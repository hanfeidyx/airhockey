// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'shaders', true, true);
Module['FS_createPath']('/', 'textures', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 32, 32, 32, 32, 9, 32, 9, 9, 9, 9, 9, 9, 9, 9, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 117, 95, 67, 111, 108, 111, 114, 59, 32, 32, 32, 32, 32, 32, 9, 32, 32, 32, 9, 9, 9, 9, 9, 9, 9, 9, 10, 32, 32, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 9, 10, 123, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 117, 95, 67, 111, 108, 111, 114, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 9, 10, 125]);
Module['FS_createDataFile']('/shaders', 'color_shader.fsh', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 32, 32, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 123, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 32, 32, 9, 32, 32, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 32, 42, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 125, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]);
Module['FS_createDataFile']('/shaders', 'color_shader.vsh', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 84, 101, 120, 116, 117, 114, 101, 85, 110, 105, 116, 59, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 117, 95, 84, 101, 120, 116, 117, 114, 101, 85, 110, 105, 116, 44, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/shaders', 'texture_shader.fsh', fileData2, true, true, false);
var fileData3 = [];
fileData3.push.apply(fileData3, [117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 97, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 32, 32, 32, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 32, 61, 32, 97, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 32, 42, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 10, 125]);
Module['FS_createDataFile']('/shaders', 'texture_shader.vsh', fileData3, true, true, false);
var fileData4 = [];
fileData4.push.apply(fileData4, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 0, 0, 0, 2, 0, 8, 2, 0, 0, 0, 123, 26, 67, 173, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 52, 72, 0, 0, 52, 72, 1, 78, 128, 151, 165, 0, 0, 0, 26, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 80, 97, 105, 110, 116, 46, 78, 69, 84, 32, 118, 51, 46, 53, 46, 49, 48, 48, 244, 114, 161, 0, 0, 255, 140, 73, 68, 65, 84, 120, 94, 236, 253, 137, 159, 101, 103, 154, 149, 135, 198, 63, 114, 47, 119, 30, 125, 175, 239, 53, 198, 19, 54, 54, 54, 54, 198, 6, 26, 26, 26, 26, 26, 26, 26, 154, 121, 158, 231, 217, 198, 96, 176, 193, 204, 24, 99, 140, 177, 129, 166, 129, 170, 110, 85, 169, 74, 169, 89, 42, 169, 38, 169, 171, 74, 85, 165, 42, 149, 74, 42, 101, 42, 51, 165, 212, 156, 82, 166, 82, 153, 74, 233, 222, 117, 226, 141, 92, 185, 226, 249, 246, 254, 206, 62, 251, 156, 19, 113, 34, 51, 242, 247, 252, 126, 221, 153, 25, 113, 206, 222, 223, 187, 214, 243, 198, 137, 19, 149, 218, 251, 223, 252, 107, 63, 118, 202, 41, 167, 156, 114, 202, 93, 200, 233, 2, 56, 229, 148, 83, 78, 185, 75, 57, 93, 0, 167, 156, 114, 202, 41, 119, 41, 167, 11, 224, 148, 83, 78, 57, 229, 46, 229, 116, 1, 156, 114, 202, 41, 167, 220, 165, 156, 46, 128, 83, 78, 57, 229, 148, 187, 148, 211, 5, 112, 202, 41, 167, 156, 114, 151, 114, 186, 0, 78, 217, 21, 254, 183, 63, 253, 159, 221, 61, 224, 222, 79, 57, 229, 88, 56, 93, 0, 167, 108, 18, 104, 238, 148, 141, 131, 3, 63, 229, 148, 117, 56, 93, 0, 167, 44, 7, 14, 218, 6, 63, 237, 95, 255, 241, 187, 10, 220, 254, 150, 192, 28, 79, 57, 5, 156, 46, 128, 187, 29, 40, 99, 77, 160, 185, 233, 252, 239, 126, 198, 63, 191, 171, 192, 237, 175, 4, 206, 124, 77, 144, 135, 83, 238, 42, 78, 23, 192, 29, 14, 218, 62, 3, 216, 167, 15, 52, 119, 202, 54, 192, 153, 119, 192, 40, 231, 129, 68, 157, 114, 39, 113, 186, 0, 78, 60, 168, 235, 74, 192, 23, 131, 192, 62, 219, 224, 127, 255, 111, 252, 139, 187, 16, 28, 194, 54, 192, 40, 7, 65, 36, 86, 2, 81, 60, 229, 196, 113, 186, 0, 78, 12, 232, 222, 68, 208, 118, 0, 95, 172, 9, 4, 55, 157, 255, 195, 191, 249, 47, 239, 66, 112, 8, 211, 193, 177, 175, 9, 34, 209, 130, 68, 77, 4, 233, 61, 101, 55, 57, 93, 0, 59, 7, 138, 180, 20, 212, 21, 160, 237, 51, 128, 125, 58, 64, 112, 167, 108, 9, 28, 123, 7, 140, 114, 30, 72, 84, 130, 40, 78, 1, 105, 63, 229, 120, 57, 93, 0, 199, 6, 138, 177, 20, 116, 207, 160, 174, 43, 1, 95, 12, 2, 251, 108, 156, 255, 227, 191, 245, 137, 187, 25, 156, 198, 102, 193, 40, 7, 65, 36, 86, 2, 81, 76, 144, 222, 62, 168, 198, 41, 71, 198, 233, 2, 56, 10, 16, 247, 62, 40, 146, 65, 247, 38, 130, 182, 3, 248, 98, 77, 160, 182, 137, 252, 159, 254, 237, 79, 222, 205, 224, 52, 38, 130, 147, 95, 7, 68, 162, 5, 137, 154, 8, 210, 107, 144, 246, 62, 232, 209, 41, 27, 231, 116, 1, 108, 24, 36, 184, 3, 138, 97, 80, 164, 41, 160, 177, 9, 218, 62, 3, 168, 167, 3, 212, 182, 107, 252, 159, 255, 157, 159, 152, 14, 62, 119, 215, 192, 201, 119, 192, 52, 103, 128, 68, 37, 200, 225, 20, 144, 246, 2, 213, 232, 128, 186, 157, 178, 38, 167, 11, 96, 45, 144, 206, 49, 16, 247, 2, 197, 88, 10, 186, 151, 160, 177, 211, 129, 44, 6, 129, 122, 54, 11, 180, 187, 85, 254, 47, 63, 243, 39, 167, 131, 207, 221, 30, 56, 144, 141, 131, 105, 182, 32, 18, 43, 129, 28, 26, 68, 119, 41, 168, 70, 129, 18, 117, 64, 43, 79, 153, 206, 233, 2, 88, 1, 196, 110, 12, 228, 88, 32, 238, 125, 208, 37, 131, 238, 77, 4, 109, 7, 144, 197, 58, 192, 107, 19, 129, 118, 239, 66, 112, 32, 19, 193, 225, 175, 3, 34, 209, 130, 68, 77, 1, 209, 53, 136, 122, 31, 148, 168, 64, 215, 198, 64, 115, 79, 25, 227, 116, 1, 140, 130, 72, 13, 130, 116, 22, 200, 113, 7, 212, 163, 64, 151, 166, 128, 198, 38, 104, 251, 12, 160, 158, 49, 224, 181, 93, 224, 255, 250, 239, 222, 179, 41, 240, 200, 199, 14, 14, 191, 3, 166, 57, 3, 36, 42, 65, 14, 151, 130, 168, 27, 244, 162, 3, 186, 38, 80, 201, 49, 208, 238, 83, 138, 211, 5, 112, 0, 226, 50, 8, 146, 39, 144, 206, 14, 72, 124, 129, 122, 244, 65, 247, 18, 52, 118, 58, 144, 197, 32, 80, 207, 6, 129, 100, 55, 207, 191, 247, 169, 141, 129, 71, 222, 40, 56, 150, 205, 130, 105, 182, 32, 18, 43, 129, 28, 26, 68, 119, 41, 232, 69, 129, 6, 141, 129, 74, 10, 212, 118, 16, 212, 255, 174, 229, 238, 93, 0, 8, 68, 11, 82, 37, 144, 188, 49, 144, 227, 2, 137, 239, 128, 46, 25, 116, 111, 34, 104, 59, 128, 44, 214, 1, 82, 155, 4, 36, 27, 252, 223, 238, 56, 112, 131, 135, 192, 177, 76, 3, 231, 63, 27, 68, 162, 5, 137, 154, 2, 162, 107, 16, 245, 62, 104, 144, 64, 209, 198, 64, 109, 5, 170, 61, 8, 252, 112, 151, 112, 23, 45, 0, 204, 187, 5, 161, 65, 170, 198, 64, 70, 5, 114, 220, 1, 245, 48, 168, 211, 82, 208, 216, 4, 109, 95, 21, 72, 167, 7, 164, 214, 24, 240, 104, 248, 191, 255, 172, 79, 111, 21, 60, 221, 145, 129, 179, 93, 128, 243, 31, 1, 3, 93, 21, 196, 9, 32, 135, 75, 65, 206, 11, 148, 162, 3, 138, 86, 160, 143, 131, 160, 218, 2, 221, 111, 129, 61, 238, 84, 238, 216, 5, 128, 113, 182, 32, 16, 2, 161, 25, 4, 225, 19, 200, 232, 24, 8, 125, 129, 122, 44, 5, 245, 51, 40, 237, 116, 32, 139, 1, 14, 75, 7, 86, 90, 7, 136, 117, 83, 252, 63, 254, 253, 123, 183, 10, 158, 110, 83, 224, 112, 214, 228, 208, 212, 48, 208, 6, 68, 98, 37, 144, 67, 131, 220, 246, 65, 41, 10, 212, 167, 3, 250, 40, 208, 217, 65, 208, 125, 200, 161, 5, 122, 185, 99, 184, 163, 22, 0, 102, 6, 48, 114, 129, 76, 180, 32, 88, 2, 225, 27, 3, 105, 22, 8, 125, 31, 212, 201, 160, 126, 83, 64, 219, 201, 45, 77, 192, 32, 171, 2, 157, 77, 1, 98, 189, 203, 193, 225, 76, 1, 35, 88, 21, 143, 158, 145, 56, 12, 226, 52, 17, 228, 214, 32, 231, 29, 80, 159, 2, 45, 27, 3, 157, 21, 232, 117, 11, 204, 0, 117, 180, 192, 60, 39, 151, 147, 189, 0, 48, 21, 128, 161, 98, 228, 45, 8, 141, 64, 176, 6, 65, 70, 11, 164, 121, 12, 212, 195, 160, 78, 75, 65, 105, 15, 113, 171, 231, 232, 255, 68, 32, 157, 49, 160, 179, 99, 225, 255, 249, 31, 124, 230, 40, 193, 179, 31, 61, 24, 193, 24, 24, 232, 116, 150, 174, 7, 132, 112, 10, 200, 121, 129, 82, 116, 64, 203, 4, 202, 56, 8, 74, 45, 80, 252, 22, 168, 67, 192, 45, 0, 94, 58, 65, 156, 176, 5, 128, 115, 7, 152, 25, 134, 218, 130, 88, 8, 68, 167, 5, 249, 43, 16, 211, 49, 144, 251, 2, 13, 233, 131, 6, 222, 102, 174, 226, 33, 139, 22, 72, 103, 83, 64, 166, 27, 225, 95, 249, 217, 159, 61, 74, 240, 236, 235, 131, 35, 218, 20, 24, 232, 32, 72, 197, 82, 54, 187, 27, 208, 136, 2, 221, 25, 3, 77, 20, 40, 236, 32, 104, 61, 180, 208, 2, 177, 64, 59, 0, 202, 218, 113, 78, 192, 2, 192, 249, 38, 24, 12, 198, 214, 130, 193, 35, 22, 131, 32, 94, 2, 17, 28, 4, 105, 46, 144, 251, 14, 168, 211, 109, 86, 23, 61, 170, 14, 32, 139, 217, 192, 101, 75, 129, 76, 79, 17, 56, 162, 41, 96, 10, 179, 65, 42, 18, 196, 105, 41, 157, 221, 128, 144, 247, 65, 119, 4, 42, 54, 6, 218, 42, 208, 232, 22, 104, 65, 192, 27, 0, 218, 129, 148, 0, 108, 182, 107, 236, 226, 2, 192, 9, 2, 156, 62, 102, 3, 48, 87, 12, 190, 5, 209, 17, 136, 215, 32, 72, 170, 64, 154, 59, 160, 36, 7, 172, 40, 122, 148, 54, 65, 213, 87, 5, 198, 25, 3, 46, 59, 74, 254, 95, 255, 225, 125, 199, 8, 46, 230, 136, 193, 20, 198, 192, 76, 87, 2, 113, 74, 16, 194, 62, 99, 91, 65, 160, 17, 99, 160, 98, 5, 154, 56, 8, 26, 141, 202, 183, 64, 26, 2, 86, 1, 48, 18, 124, 149, 64, 116, 187, 192, 174, 44, 0, 156, 84, 130, 243, 197, 233, 3, 76, 14, 163, 109, 65, 56, 16, 157, 65, 16, 65, 129, 164, 142, 129, 220, 31, 176, 138, 235, 209, 64, 131, 210, 78, 7, 166, 104, 129, 113, 54, 5, 52, 186, 14, 255, 239, 255, 232, 204, 49, 130, 139, 89, 19, 156, 210, 166, 192, 76, 91, 144, 138, 137, 32, 132, 6, 161, 237, 48, 182, 21, 80, 156, 49, 80, 67, 129, 170, 14, 130, 202, 11, 56, 1, 64, 41, 2, 206, 73, 32, 43, 168, 12, 192, 129, 199, 194, 113, 46, 0, 28, 71, 130, 115, 196, 41, 39, 152, 13, 134, 215, 130, 217, 35, 28, 45, 72, 152, 64, 10, 199, 64, 166, 23, 76, 118, 61, 26, 101, 208, 192, 41, 160, 234, 0, 166, 152, 7, 44, 54, 5, 104, 244, 148, 2, 167, 180, 20, 12, 98, 54, 72, 69, 130, 56, 77, 1, 161, 53, 8, 249, 24, 235, 108, 5, 84, 85, 160, 206, 45, 16, 130, 128, 49, 0, 132, 3, 29, 1, 120, 12, 150, 75, 224, 198, 35, 227, 168, 23, 0, 110, 59, 201, 147, 194, 57, 2, 204, 0, 19, 2, 152, 46, 198, 223, 130, 0, 9, 132, 108, 16, 132, 117, 65, 147, 236, 65, 80, 18, 131, 82, 245, 65, 105, 19, 84, 125, 85, 96, 156, 65, 96, 177, 35, 227, 95, 253, 57, 247, 239, 8, 184, 176, 35, 3, 131, 24, 3, 51, 93, 9, 196, 41, 65, 8, 151, 130, 132, 23, 168, 195, 32, 245, 149, 19, 251, 117, 84, 43, 1, 62, 1, 112, 17, 76, 149, 164, 223, 4, 236, 151, 192, 153, 91, 229, 40, 22, 0, 110, 207, 224, 68, 112, 94, 9, 78, 25, 51, 0, 152, 31, 166, 219, 130, 124, 32, 64, 131, 32, 136, 11, 154, 212, 14, 130, 244, 11, 148, 164, 15, 26, 104, 80, 218, 233, 192, 20, 45, 48, 206, 70, 128, 61, 103, 243, 255, 249, 143, 31, 216, 17, 112, 97, 235, 128, 179, 218, 8, 152, 105, 11, 82, 49, 17, 132, 208, 32, 180, 125, 80, 135, 2, 173, 25, 100, 222, 74, 64, 217, 5, 108, 0, 32, 19, 1, 219, 36, 208, 20, 36, 6, 82, 125, 16, 99, 2, 151, 110, 156, 109, 45, 0, 220, 134, 201, 219, 22, 56, 148, 4, 167, 137, 179, 78, 48, 33, 140, 176, 5, 9, 64, 68, 90, 16, 178, 5, 77, 28, 91, 144, 233, 2, 233, 239, 128, 82, 21, 104, 224, 20, 80, 117, 0, 83, 204, 3, 10, 91, 10, 236, 121, 74, 130, 179, 234, 131, 65, 204, 6, 169, 72, 16, 167, 41, 32, 180, 6, 9, 239, 128, 214, 8, 148, 107, 144, 118, 37, 160, 200, 131, 192, 6, 112, 5, 128, 106, 32, 34, 0, 131, 193, 111, 73, 42, 17, 194, 76, 224, 216, 141, 176, 201, 5, 128, 203, 53, 121, 123, 2, 55, 159, 228, 121, 225, 52, 1, 38, 129, 57, 1, 204, 24, 9, 104, 65, 140, 230, 233, 30, 153, 238, 128, 158, 20, 40, 213, 82, 208, 91, 131, 170, 175, 10, 140, 51, 8, 20, 118, 4, 252, 127, 255, 147, 7, 119, 16, 92, 228, 17, 128, 65, 140, 129, 153, 174, 4, 226, 148, 32, 129, 75, 65, 194, 11, 116, 97, 12, 148, 75, 160, 128, 45, 27, 121, 137, 0, 147, 0, 88, 8, 142, 74, 210, 108, 2, 222, 75, 82, 149, 16, 105, 2, 247, 206, 102, 221, 5, 128, 203, 50, 121, 27, 2, 55, 153, 228, 185, 224, 212, 18, 156, 53, 38, 1, 48, 69, 204, 24, 32, 34, 11, 154, 48, 1, 100, 81, 32, 175, 99, 32, 253, 5, 122, 210, 7, 37, 52, 232, 237, 68, 96, 138, 22, 24, 103, 125, 32, 205, 121, 252, 107, 63, 247, 161, 29, 4, 23, 57, 15, 28, 215, 70, 192, 76, 91, 144, 138, 137, 32, 129, 6, 137, 237, 131, 46, 8, 84, 102, 12, 20, 80, 160, 164, 45, 51, 94, 34, 192, 36, 240, 76, 2, 65, 65, 95, 73, 26, 79, 192, 135, 73, 42, 20, 130, 77, 224, 228, 149, 152, 179, 0, 240, 244, 73, 94, 49, 110, 38, 201, 251, 199, 233, 36, 56, 83, 156, 120, 130, 57, 97, 138, 0, 33, 16, 8, 74, 11, 162, 38, 16, 199, 65, 144, 108, 129, 244, 119, 64, 169, 12, 74, 184, 20, 84, 29, 192, 20, 243, 128, 194, 250, 64, 154, 167, 0, 28, 215, 82, 48, 139, 121, 32, 21, 9, 226, 52, 5, 36, 182, 64, 188, 59, 160, 50, 5, 154, 53, 8, 26, 42, 208, 98, 176, 234, 62, 128, 100, 160, 32, 0, 119, 193, 108, 73, 202, 16, 158, 76, 82, 173, 176, 174, 129, 168, 167, 176, 194, 2, 192, 147, 153, 188, 50, 92, 116, 146, 247, 137, 35, 72, 242, 212, 112, 166, 0, 243, 192, 180, 18, 140, 89, 32, 10, 0, 49, 18, 136, 218, 32, 136, 172, 64, 178, 199, 64, 85, 10, 148, 106, 41, 232, 173, 65, 213, 87, 2, 174, 25, 3, 10, 219, 54, 63, 253, 63, 125, 120, 151, 193, 213, 110, 27, 204, 98, 16, 140, 117, 37, 16, 167, 4, 9, 236, 131, 120, 23, 40, 66, 7, 52, 75, 160, 125, 131, 160, 197, 168, 57, 216, 222, 62, 72, 167, 9, 24, 47, 73, 73, 194, 159, 73, 42, 23, 54, 54, 176, 247, 24, 75, 22, 0, 30, 212, 228, 21, 224, 226, 146, 188, 31, 220, 106, 146, 167, 131, 179, 75, 112, 226, 152, 7, 192, 44, 49, 108, 128, 160, 8, 36, 169, 5, 113, 20, 136, 236, 24, 232, 128, 64, 85, 250, 160, 132, 6, 189, 157, 8, 76, 1, 224, 154, 245, 129, 43, 231, 241, 175, 255, 188, 71, 118, 25, 92, 237, 12, 112, 104, 235, 131, 177, 182, 32, 21, 19, 65, 2, 13, 18, 219, 1, 69, 40, 208, 151, 49, 208, 62, 212, 115, 16, 116, 28, 18, 0, 43, 237, 3, 168, 9, 226, 74, 210, 117, 2, 38, 76, 82, 158, 240, 170, 73, 15, 67, 209, 6, 74, 7, 195, 11, 0, 15, 97, 242, 249, 112, 41, 38, 175, 27, 183, 148, 228, 41, 224, 140, 18, 156, 44, 206, 61, 193, 180, 48, 78, 128, 40, 32, 40, 45, 72, 155, 64, 28, 7, 65, 178, 11, 116, 160, 3, 122, 85, 160, 132, 83, 64, 219, 19, 152, 98, 6, 144, 87, 31, 184, 242, 148, 65, 112, 104, 125, 48, 142, 121, 32, 21, 9, 178, 180, 20, 196, 213, 32, 219, 29, 208, 23, 129, 90, 13, 130, 122, 10, 84, 184, 5, 18, 128, 34, 0, 244, 2, 249, 128, 84, 22, 132, 150, 164, 3, 5, 12, 105, 210, 168, 2, 190, 53, 41, 103, 120, 219, 192, 243, 226, 246, 2, 192, 135, 154, 124, 92, 60, 165, 201, 235, 195, 213, 39, 121, 183, 56, 139, 36, 143, 15, 39, 11, 14, 77, 165, 153, 89, 130, 97, 11, 164, 1, 32, 76, 2, 129, 107, 65, 106, 11, 132, 123, 12, 180, 165, 64, 181, 250, 160, 183, 9, 218, 62, 29, 184, 102, 16, 200, 107, 171, 252, 140, 255, 236, 209, 19, 1, 46, 123, 171, 96, 28, 131, 96, 172, 43, 129, 44, 25, 196, 111, 41, 200, 118, 129, 22, 140, 129, 78, 9, 84, 111, 16, 244, 23, 5, 111, 129, 31, 32, 16, 112, 200, 60, 155, 120, 113, 144, 110, 20, 48, 167, 73, 211, 66, 194, 73, 74, 27, 62, 47, 172, 253, 61, 252, 69, 145, 159, 143, 135, 54, 121, 41, 2, 23, 106, 242, 174, 112, 207, 73, 158, 17, 78, 48, 193, 185, 99, 42, 0, 19, 197, 188, 1, 226, 130, 48, 13, 130, 80, 10, 4, 119, 16, 116, 160, 64, 91, 58, 160, 135, 6, 189, 157, 8, 76, 1, 224, 154, 245, 129, 40, 87, 229, 223, 248, 207, 31, 59, 17, 224, 178, 103, 128, 115, 91, 19, 140, 181, 5, 169, 152, 2, 226, 103, 16, 215, 62, 104, 129, 64, 89, 198, 64, 239, 4, 186, 217, 130, 130, 163, 254, 45, 176, 7, 220, 146, 64, 74, 80, 86, 146, 150, 19, 112, 160, 73, 103, 10, 24, 213, 164, 126, 33, 103, 147, 38, 135, 228, 139, 67, 11, 32, 63, 26, 15, 100, 242, 89, 113, 65, 38, 175, 30, 247, 150, 228, 89, 224, 164, 18, 156, 47, 78, 63, 193, 204, 48, 81, 128, 64, 32, 46, 45, 8, 156, 64, 40, 7, 65, 190, 5, 58, 208, 1, 213, 42, 208, 195, 41, 160, 237, 9, 76, 49, 3, 152, 171, 15, 68, 121, 202, 24, 56, 183, 14, 24, 199, 60, 144, 138, 4, 89, 90, 10, 226, 106, 144, 237, 49, 80, 150, 2, 157, 26, 4, 221, 68, 121, 91, 80, 127, 200, 1, 64, 44, 208, 14, 72, 89, 65, 101, 73, 218, 79, 192, 141, 38, 93, 10, 205, 38, 169, 101, 24, 219, 216, 237, 233, 252, 189, 159, 246, 211, 111, 75, 95, 224, 115, 138, 124, 116, 60, 177, 201, 11, 197, 61, 36, 121, 207, 56, 145, 36, 15, 81, 224, 136, 147, 28, 12, 198, 6, 48, 114, 4, 162, 5, 145, 66, 224, 6, 65, 112, 5, 242, 61, 6, 218, 82, 160, 90, 125, 208, 219, 4, 109, 159, 14, 92, 51, 8, 204, 181, 61, 254, 205, 159, 255, 248, 201, 2, 215, 191, 37, 48, 142, 65, 48, 214, 149, 64, 150, 12, 226, 215, 7, 193, 46, 80, 129, 49, 80, 40, 129, 210, 13, 130, 242, 10, 180, 27, 64, 14, 80, 7, 72, 231, 8, 24, 41, 73, 137, 65, 113, 73, 90, 81, 192, 153, 38, 29, 11, 253, 154, 116, 53, 52, 110, 82, 248, 123, 99, 210, 23, 249, 88, 120, 26, 147, 215, 132, 203, 53, 121, 111, 184, 243, 36, 15, 11, 231, 152, 224, 244, 49, 27, 128, 185, 98, 234, 0, 137, 65, 164, 90, 144, 75, 129, 236, 142, 129, 38, 8, 20, 166, 15, 170, 88, 160, 183, 19, 129, 41, 0, 92, 179, 38, 240, 227, 170, 252, 91, 191, 224, 115, 39, 11, 92, 255, 74, 224, 232, 214, 4, 99, 109, 65, 42, 166, 128, 248, 25, 100, 181, 3, 42, 80, 160, 41, 131, 160, 116, 2, 197, 108, 65, 181, 5, 186, 15, 224, 13, 88, 37, 129, 142, 32, 171, 36, 253, 38, 96, 63, 147, 182, 132, 72, 147, 20, 47, 156, 108, 82, 224, 112, 123, 241, 211, 126, 198, 143, 239, 225, 143, 242, 115, 240, 112, 38, 159, 27, 151, 101, 242, 54, 112, 135, 73, 158, 8, 206, 43, 193, 41, 99, 6, 9, 38, 135, 185, 2, 100, 2, 161, 105, 65, 236, 4, 162, 57, 8, 34, 46, 208, 132, 49, 80, 45, 131, 42, 46, 5, 109, 79, 96, 138, 25, 192, 92, 29, 224, 199, 83, 58, 224, 232, 250, 96, 34, 51, 64, 42, 18, 100, 105, 41, 200, 106, 129, 96, 119, 64, 83, 4, 218, 52, 8, 90, 41, 208, 92, 128, 226, 11, 152, 1, 164, 82, 32, 28, 144, 154, 130, 196, 146, 244, 30, 148, 152, 164, 69, 33, 88, 147, 54, 134, 168, 77, 90, 29, 194, 63, 88, 0, 249, 17, 248, 100, 147, 207, 132, 139, 48, 121, 197, 184, 25, 147, 55, 143, 115, 73, 242, 40, 5, 14, 58, 201, 241, 96, 114, 0, 83, 71, 44, 90, 144, 42, 196, 110, 16, 196, 87, 32, 226, 99, 160, 51, 5, 218, 213, 7, 213, 53, 104, 251, 116, 32, 154, 65, 96, 174, 109, 240, 111, 255, 194, 39, 78, 40, 184, 145, 45, 129, 137, 180, 96, 172, 43, 129, 44, 25, 100, 175, 15, 82, 93, 32, 255, 99, 160, 77, 2, 141, 107, 65, 109, 5, 122, 13, 160, 5, 72, 3, 164, 109, 4, 92, 148, 164, 190, 32, 183, 36, 125, 8, 85, 38, 169, 86, 88, 215, 164, 162, 97, 111, 99, 207, 31, 44, 0, 255, 30, 31, 87, 228, 35, 226, 201, 76, 94, 25, 46, 218, 228, 77, 10, 28, 129, 201, 35, 19, 56, 208, 36, 103, 128, 9, 1, 76, 23, 179, 7, 200, 13, 130, 213, 130, 104, 10, 196, 119, 16, 52, 161, 64, 103, 58, 160, 138, 6, 213, 157, 2, 76, 1, 32, 154, 53, 129, 28, 167, 243, 239, 124, 223, 147, 39, 20, 220, 200, 74, 224, 244, 214, 1, 99, 5, 136, 196, 68, 144, 61, 131, 172, 118, 64, 254, 5, 106, 50, 6, 26, 135, 74, 182, 160, 212, 2, 173, 7, 48, 6, 124, 146, 164, 133, 4, 28, 149, 164, 214, 32, 189, 36, 37, 9, 133, 154, 244, 45, 84, 108, 210, 219, 80, 186, 41, 237, 239, 225, 79, 139, 252, 124, 60, 180, 201, 235, 192, 37, 154, 188, 31, 220, 170, 201, 163, 17, 56, 56, 131, 179, 198, 36, 18, 204, 15, 211, 5, 72, 6, 162, 211, 130, 240, 33, 154, 131, 32, 229, 2, 77, 232, 128, 118, 21, 168, 226, 82, 80, 248, 4, 166, 152, 1, 180, 213, 1, 114, 60, 165, 15, 78, 175, 3, 38, 178, 42, 136, 68, 130, 32, 45, 5, 65, 53, 72, 245, 24, 168, 137, 64, 149, 6, 65, 37, 5, 58, 11, 80, 121, 1, 39, 128, 148, 9, 84, 3, 82, 80, 208, 87, 146, 186, 131, 12, 147, 148, 39, 188, 106, 82, 194, 240, 179, 73, 153, 195, 243, 226, 208, 2, 240, 199, 225, 33, 76, 62, 31, 46, 197, 228, 117, 227, 150, 76, 30, 129, 192, 1, 153, 60, 80, 129, 227, 78, 114, 72, 2, 35, 76, 48, 123, 132, 163, 5, 217, 66, 248, 90, 144, 96, 129, 148, 143, 129, 206, 20, 40, 88, 31, 180, 215, 160, 240, 211, 129, 104, 6, 129, 182, 54, 206, 207, 252, 69, 159, 63, 209, 224, 118, 182, 1, 38, 210, 130, 177, 78, 7, 65, 74, 144, 189, 62, 72, 181, 64, 248, 199, 64, 149, 4, 234, 214, 130, 194, 10, 52, 26, 64, 8, 208, 5, 128, 103, 96, 161, 36, 197, 5, 173, 37, 169, 65, 72, 210, 164, 81, 5, 124, 91, 164, 153, 33, 109, 99, 189, 11, 59, 127, 47, 255, 20, 159, 96, 242, 209, 241, 196, 197, 161, 75, 108, 110, 192, 228, 221, 226, 32, 76, 30, 156, 192, 177, 38, 57, 9, 204, 9, 228, 128, 49, 254, 22, 164, 7, 241, 106, 65, 64, 5, 66, 60, 8, 250, 32, 208, 153, 14, 168, 162, 65, 123, 167, 0, 83, 0, 136, 102, 29, 160, 197, 233, 252, 187, 191, 248, 11, 39, 26, 220, 206, 74, 224, 12, 103, 131, 177, 2, 68, 98, 34, 200, 94, 129, 160, 118, 64, 248, 11, 116, 100, 16, 116, 77, 160, 143, 45, 104, 52, 250, 14, 210, 21, 2, 38, 73, 210, 63, 2, 118, 74, 82, 104, 208, 93, 146, 122, 132, 57, 77, 154, 22, 18, 54, 169, 107, 152, 188, 72, 231, 239, 225, 239, 76, 62, 10, 158, 192, 228, 213, 224, 66, 77, 222, 21, 110, 216, 228, 1, 9, 28, 159, 193, 137, 99, 30, 9, 166, 136, 25, 3, 228, 3, 233, 105, 65, 254, 16, 208, 65, 16, 116, 129, 62, 140, 129, 130, 21, 168, 226, 82, 80, 248, 4, 166, 88, 21, 8, 171, 3, 180, 120, 202, 20, 112, 134, 99, 96, 40, 171, 130, 72, 36, 8, 210, 82, 16, 212, 2, 145, 238, 128, 142, 8, 244, 168, 5, 101, 20, 104, 107, 11, 250, 14, 27, 128, 212, 8, 36, 3, 82, 77, 16, 87, 146, 162, 131, 6, 77, 58, 83, 192, 168, 38, 245, 11, 51, 23, 233, 112, 232, 221, 112, 1, 228, 231, 224, 225, 138, 124, 214, 177, 47, 246, 243, 234, 113, 111, 73, 158, 5, 142, 201, 228, 177, 10, 28, 122, 146, 163, 18, 24, 100, 130, 4, 32, 31, 0, 241, 18, 136, 96, 11, 66, 44, 16, 244, 49, 208, 28, 129, 130, 245, 65, 123, 13, 10, 63, 29, 136, 166, 5, 194, 218, 56, 255, 222, 247, 127, 241, 206, 0, 247, 181, 89, 48, 148, 65, 48, 217, 137, 32, 72, 6, 193, 235, 131, 72, 23, 72, 254, 32, 40, 145, 64, 209, 6, 65, 91, 81, 103, 0, 21, 64, 20, 0, 134, 129, 127, 146, 84, 22, 132, 150, 164, 0, 225, 70, 147, 46, 133, 102, 77, 58, 25, 186, 54, 182, 58, 132, 127, 176, 0, 252, 215, 2, 159, 89, 228, 115, 224, 233, 77, 94, 43, 110, 195, 228, 61, 227, 56, 76, 30, 159, 192, 225, 38, 57, 15, 76, 11, 228, 152, 17, 2, 128, 0, 9, 36, 172, 5, 49, 69, 142, 7, 65, 31, 10, 52, 167, 3, 10, 89, 160, 189, 83, 128, 38, 0, 68, 51, 27, 216, 112, 58, 63, 235, 151, 124, 233, 206, 0, 247, 53, 17, 28, 227, 58, 96, 178, 9, 34, 49, 5, 4, 207, 32, 165, 29, 144, 124, 129, 130, 12, 130, 162, 9, 52, 177, 5, 93, 70, 217, 65, 90, 66, 192, 33, 73, 154, 71, 192, 75, 73, 170, 12, 162, 51, 105, 69, 1, 103, 154, 20, 44, 220, 107, 108, 105, 8, 220, 164, 234, 23, 11, 160, 254, 63, 124, 144, 241, 195, 9, 60, 83, 145, 215, 132, 203, 53, 121, 111, 184, 243, 36, 79, 10, 135, 152, 228, 185, 99, 42, 9, 102, 137, 73, 3, 164, 4, 25, 2, 136, 160, 64, 76, 91, 144, 245, 2, 149, 24, 3, 29, 43, 80, 200, 62, 40, 124, 2, 77, 172, 10, 132, 53, 6, 108, 120, 202, 68, 112, 140, 99, 96, 40, 171, 130, 72, 36, 8, 210, 82, 144, 210, 2, 121, 30, 3, 237, 16, 40, 209, 32, 104, 34, 170, 218, 130, 166, 195, 3, 32, 5, 2, 189, 36, 105, 36, 1, 95, 37, 169, 56, 216, 207, 164, 45, 33, 82, 147, 214, 133, 144, 77, 170, 27, 86, 47, 202, 252, 123, 248, 211, 226, 246, 39, 55, 143, 91, 228, 21, 224, 226, 76, 222, 9, 110, 210, 228, 137, 224, 176, 146, 60, 95, 156, 126, 146, 3, 19, 24, 103, 130, 28, 32, 37, 0, 33, 19, 72, 97, 11, 162, 44, 16, 247, 65, 208, 156, 2, 29, 235, 128, 246, 38, 232, 252, 68, 32, 154, 22, 8, 107, 179, 252, 251, 191, 244, 203, 119, 18, 184, 187, 13, 130, 161, 12, 130, 201, 78, 4, 41, 50, 8, 94, 31, 228, 89, 32, 246, 99, 160, 65, 2, 45, 107, 65, 79, 81, 100, 0, 9, 64, 17, 0, 110, 129, 121, 146, 148, 21, 60, 102, 210, 123, 2, 86, 52, 169, 80, 216, 213, 164, 138, 97, 233, 226, 182, 204, 135, 54, 193, 237, 5, 144, 31, 135, 135, 48, 126, 38, 92, 132, 201, 43, 198, 205, 152, 188, 115, 156, 75, 146, 231, 136, 35, 78, 114, 42, 152, 25, 200, 97, 35, 10, 0, 49, 18, 200, 25, 64, 76, 5, 162, 60, 8, 90, 33, 208, 156, 14, 40, 164, 65, 129, 151, 2, 77, 0, 136, 102, 54, 80, 225, 68, 254, 131, 31, 120, 234, 78, 2, 119, 55, 17, 156, 228, 108, 48, 217, 4, 145, 152, 2, 82, 87, 32, 162, 29, 16, 251, 2, 237, 104, 65, 197, 4, 106, 216, 130, 22, 163, 230, 32, 253, 32, 96, 143, 36, 157, 35, 96, 36, 147, 6, 19, 240, 155, 73, 31, 66, 149, 38, 189, 10, 229, 26, 203, 89, 192, 219, 69, 26, 222, 218, 223, 203, 63, 197, 39, 20, 249, 184, 120, 74, 147, 215, 135, 75, 55, 121, 159, 56, 2, 147, 231, 133, 211, 76, 242, 244, 49, 155, 4, 19, 197, 188, 1, 178, 130, 36, 1, 4, 81, 32, 172, 45, 136, 187, 64, 43, 198, 64, 205, 10, 20, 114, 41, 232, 188, 129, 38, 86, 5, 182, 26, 3, 42, 60, 101, 58, 56, 201, 49, 48, 151, 149, 64, 36, 18, 164, 168, 15, 34, 90, 32, 204, 99, 160, 26, 2, 245, 25, 4, 29, 68, 73, 91, 208, 113, 24, 0, 164, 58, 32, 150, 36, 93, 36, 96, 42, 147, 102, 19, 240, 158, 73, 73, 194, 159, 38, 101, 11, 15, 23, 105, 108, 200, 220, 216, 249, 123, 179, 191, 201, 147, 215, 129, 75, 52, 121, 63, 184, 85, 147, 231, 130, 83, 75, 242, 148, 49, 131, 36, 199, 38, 48, 212, 4, 105, 64, 86, 0, 162, 134, 32, 182, 32, 205, 2, 137, 31, 3, 253, 17, 168, 89, 31, 20, 216, 160, 243, 19, 129, 101, 90, 96, 171, 13, 242, 179, 127, 217, 211, 119, 30, 184, 199, 13, 130, 185, 180, 96, 178, 19, 65, 138, 12, 82, 215, 1, 97, 46, 144, 249, 65, 80, 31, 129, 138, 181, 160, 164, 168, 112, 75, 214, 31, 114, 0, 169, 20, 8, 39, 73, 71, 9, 24, 204, 164, 241, 32, 195, 36, 229, 9, 175, 22, 105, 96, 200, 217, 216, 225, 208, 187, 217, 195, 239, 253, 9, 2, 143, 85, 228, 179, 226, 130, 140, 175, 27, 183, 100, 242, 8, 4, 14, 200, 228, 105, 226, 172, 147, 28, 15, 38, 7, 114, 228, 72, 3, 64, 152, 16, 181, 22, 132, 85, 32, 208, 131, 160, 24, 2, 253, 25, 3, 133, 52, 40, 240, 82, 160, 9, 0, 203, 204, 6, 30, 156, 194, 127, 248, 203, 127, 234, 206, 3, 247, 56, 5, 156, 228, 108, 48, 217, 4, 145, 152, 2, 82, 87, 32, 162, 29, 144, 121, 129, 94, 12, 130, 126, 161, 128, 45, 168, 48, 10, 14, 210, 12, 2, 222, 72, 210, 54, 2, 46, 50, 233, 46, 1, 179, 153, 212, 32, 36, 105, 172, 83, 1, 211, 26, 59, 25, 186, 54, 41, 246, 20, 254, 193, 2, 240, 223, 225, 211, 140, 159, 64, 224, 185, 139, 188, 74, 220, 128, 201, 187, 197, 65, 152, 60, 53, 156, 105, 146, 51, 192, 132, 18, 204, 21, 83, 7, 72, 12, 242, 4, 16, 71, 132, 117, 16, 132, 94, 160, 24, 99, 160, 105, 5, 58, 217, 7, 157, 55, 208, 196, 170, 192, 86, 99, 192, 131, 167, 76, 7, 39, 57, 6, 230, 178, 18, 136, 68, 130, 20, 245, 65, 62, 11, 36, 121, 12, 244, 66, 160, 59, 45, 40, 160, 64, 67, 1, 218, 141, 238, 131, 148, 6, 148, 146, 164, 133, 4, 28, 101, 210, 105, 208, 93, 146, 122, 132, 57, 141, 29, 11, 253, 154, 20, 53, 28, 94, 88, 245, 98, 177, 0, 234, 255, 195, 7, 25, 63, 22, 158, 198, 248, 130, 4, 174, 181, 200, 187, 194, 13, 155, 60, 32, 129, 227, 51, 121, 214, 152, 68, 146, 195, 19, 24, 109, 130, 76, 32, 49, 0, 105, 67, 28, 91, 16, 104, 129, 208, 15, 130, 254, 20, 104, 90, 7, 20, 216, 160, 243, 19, 129, 101, 90, 96, 171, 77, 241, 31, 253, 224, 87, 238, 84, 112, 167, 155, 2, 115, 105, 193, 100, 39, 130, 20, 21, 136, 92, 31, 36, 89, 32, 240, 99, 160, 59, 40, 87, 11, 234, 41, 208, 95, 144, 197, 135, 22, 64, 202, 4, 170, 73, 210, 78, 2, 238, 50, 41, 58, 104, 208, 164, 51, 161, 83, 147, 226, 133, 147, 11, 171, 91, 192, 234, 69, 153, 127, 15, 127, 42, 242, 51, 241, 160, 198, 207, 141, 203, 50, 121, 15, 184, 61, 147, 103, 129, 99, 50, 121, 166, 56, 241, 36, 135, 36, 48, 194, 36, 7, 143, 76, 0, 228, 9, 129, 107, 65, 100, 17, 232, 65, 208, 13, 129, 254, 116, 64, 45, 11, 20, 120, 10, 48, 69, 2, 203, 204, 3, 6, 156, 194, 207, 249, 21, 95, 189, 83, 193, 157, 46, 5, 135, 57, 27, 76, 54, 65, 30, 150, 130, 200, 25, 228, 115, 12, 4, 94, 160, 20, 131, 160, 92, 2, 237, 3, 40, 47, 170, 13, 210, 9, 2, 198, 72, 82, 50, 80, 80, 146, 214, 130, 208, 146, 20, 32, 220, 104, 82, 164, 112, 108, 97, 21, 11, 88, 186, 72, 159, 67, 245, 226, 246, 2, 200, 143, 195, 67, 20, 249, 76, 184, 8, 227, 107, 197, 109, 152, 188, 103, 28, 135, 201, 227, 19, 56, 92, 147, 195, 192, 156, 18, 76, 23, 179, 7, 25, 26, 68, 170, 5, 137, 68, 100, 91, 144, 123, 129, 110, 140, 129, 166, 21, 168, 101, 31, 116, 62, 129, 41, 166, 3, 85, 141, 1, 3, 158, 178, 18, 56, 204, 49, 48, 154, 149, 64, 30, 12, 34, 212, 7, 225, 44, 16, 227, 49, 80, 10, 129, 226, 180, 160, 122, 2, 221, 4, 217, 107, 129, 214, 39, 208, 5, 100, 146, 164, 127, 160, 166, 36, 85, 6, 209, 153, 180, 34, 132, 105, 172, 86, 1, 235, 22, 233, 103, 168, 187, 72, 195, 91, 251, 123, 249, 167, 248, 132, 34, 31, 23, 79, 89, 228, 149, 225, 162, 77, 222, 33, 110, 222, 228, 73, 225, 16, 77, 30, 58, 230, 145, 96, 138, 152, 113, 130, 100, 32, 55, 0, 153, 67, 40, 91, 16, 107, 129, 232, 15, 130, 22, 9, 148, 173, 3, 58, 108, 208, 249, 137, 192, 50, 0, 170, 218, 20, 255, 241, 175, 252, 218, 29, 12, 110, 118, 83, 96, 52, 45, 152, 236, 20, 16, 33, 131, 200, 117, 64, 140, 11, 164, 125, 16, 180, 70, 160, 89, 0, 197, 20, 104, 46, 200, 202, 67, 8, 32, 53, 2, 201, 36, 233, 37, 40, 43, 73, 197, 193, 126, 38, 85, 9, 139, 22, 233, 91, 168, 216, 216, 216, 144, 185, 177, 243, 247, 254, 149, 159, 189, 45, 239, 231, 157, 224, 38, 77, 158, 8, 14, 203, 228, 225, 10, 28, 189, 201, 81, 9, 12, 50, 201, 241, 35, 25, 0, 169, 66, 236, 90, 144, 90, 196, 122, 16, 212, 67, 160, 69, 99, 160, 150, 6, 53, 94, 10, 76, 145, 192, 50, 243, 128, 1, 151, 242, 159, 252, 208, 51, 119, 48, 184, 217, 41, 224, 60, 231, 129, 201, 38, 200, 195, 82, 144, 183, 2, 225, 28, 3, 81, 47, 208, 136, 22, 212, 74, 160, 119, 0, 181, 69, 169, 65, 218, 64, 192, 21, 73, 234, 5, 242, 73, 82, 86, 80, 153, 73, 239, 65, 137, 38, 253, 9, 181, 154, 148, 48, 252, 92, 216, 225, 208, 187, 209, 2, 56, 244, 123, 127, 130, 192, 99, 21, 126, 62, 92, 138, 201, 235, 198, 45, 153, 188, 127, 28, 141, 201, 115, 196, 17, 155, 28, 137, 192, 192, 146, 156, 49, 18, 0, 50, 58, 8, 86, 11, 114, 137, 224, 182, 32, 250, 2, 13, 25, 3, 125, 19, 168, 101, 31, 116, 62, 129, 41, 166, 3, 79, 141, 1, 3, 30, 59, 63, 247, 87, 125, 189, 15, 62, 254, 216, 193, 121, 14, 130, 209, 172, 4, 242, 96, 16, 161, 62, 8, 103, 129, 12, 15, 130, 58, 8, 84, 102, 16, 244, 14, 173, 4, 217, 104, 129, 190, 39, 105, 9, 1, 135, 36, 169, 29, 72, 41, 73, 137, 193, 111, 38, 101, 8, 79, 154, 148, 42, 124, 91, 88, 203, 2, 198, 46, 108, 117, 8, 255, 96, 1, 248, 175, 5, 62, 179, 240, 163, 227, 137, 141, 175, 15, 151, 110, 242, 62, 113, 4, 38, 207, 11, 71, 105, 242, 232, 5, 6, 99, 48, 75, 76, 58, 65, 62, 144, 30, 128, 228, 33, 151, 45, 8, 55, 210, 63, 8, 90, 84, 160, 111, 29, 80, 227, 2, 157, 159, 8, 44, 3, 224, 169, 141, 0, 23, 111, 131, 255, 244, 87, 127, 163, 15, 62, 126, 227, 224, 150, 55, 2, 70, 211, 130, 201, 78, 1, 17, 50, 200, 91, 7, 100, 88, 32, 234, 131, 160, 50, 2, 157, 106, 65, 43, 209, 89, 144, 101, 135, 10, 64, 10, 4, 122, 73, 82, 71, 144, 149, 73, 179, 253, 140, 159, 55, 188, 12, 210, 144, 144, 167, 177, 102, 5, 12, 92, 88, 212, 2, 14, 47, 236, 249, 131, 5, 224, 223, 227, 227, 10, 63, 22, 158, 166, 200, 171, 193, 133, 154, 188, 43, 220, 112, 145, 71, 131, 83, 75, 242, 148, 49, 0, 147, 3, 19, 24, 103, 146, 33, 64, 62, 0, 178, 133, 228, 1, 4, 87, 32, 220, 45, 104, 72, 129, 34, 141, 129, 102, 22, 168, 241, 82, 96, 138, 4, 150, 153, 1, 220, 183, 20, 184, 248, 142, 4, 183, 188, 20, 28, 233, 60, 48, 217, 4, 121, 88, 10, 242, 86, 32, 153, 99, 32, 231, 2, 117, 24, 4, 157, 66, 233, 0, 10, 139, 58, 131, 244, 128, 128, 37, 146, 20, 11, 180, 147, 164, 166, 96, 48, 147, 198, 131, 12, 77, 106, 19, 70, 45, 210, 189, 208, 114, 97, 117, 11, 88, 189, 40, 237, 239, 225, 79, 11, 127, 38, 30, 180, 200, 231, 198, 101, 21, 121, 245, 184, 49, 147, 167, 128, 3, 50, 121, 154, 56, 104, 147, 131, 17, 24, 91, 146, 147, 70, 14, 64, 6, 8, 241, 2, 136, 166, 64, 118, 91, 80, 0, 129, 146, 12, 130, 190, 21, 104, 102, 31, 212, 222, 192, 20, 211, 129, 167, 6, 129, 251, 142, 133, 159, 247, 195, 223, 156, 13, 30, 234, 88, 192, 145, 14, 130, 209, 172, 4, 242, 96, 144, 159, 62, 72, 166, 64, 128, 199, 64, 23, 4, 250, 210, 130, 198, 161, 146, 32, 187, 44, 208, 244, 36, 253, 32, 96, 143, 36, 133, 3, 29, 153, 116, 151, 128, 217, 204, 109, 13, 206, 125, 89, 144, 54, 134, 168, 11, 203, 92, 192, 243, 226, 208, 2, 240, 199, 225, 33, 138, 124, 38, 92, 68, 145, 215, 138, 219, 48, 190, 97, 28, 132, 201, 83, 195, 153, 38, 57, 3, 140, 39, 201, 137, 98, 222, 9, 82, 130, 12, 1, 228, 15, 233, 4, 8, 183, 64, 1, 6, 65, 151, 4, 250, 214, 1, 53, 54, 168, 253, 20, 96, 25, 0, 79, 173, 15, 228, 187, 41, 254, 179, 95, 243, 236, 108, 240, 80, 155, 2, 55, 190, 62, 24, 13, 192, 88, 39, 130, 252, 20, 8, 91, 7, 4, 88, 32, 228, 131, 160, 44, 2, 133, 106, 65, 31, 209, 86, 144, 53, 135, 4, 64, 170, 3, 86, 73, 82, 68, 112, 148, 73, 167, 65, 119, 198, 98, 20, 112, 166, 177, 93, 33, 94, 99, 63, 67, 221, 133, 245, 46, 236, 252, 189, 127, 245, 231, 108, 221, 251, 121, 111, 184, 109, 147, 103, 132, 227, 51, 121, 214, 24, 67, 146, 147, 195, 80, 147, 140, 2, 82, 2, 144, 48, 228, 15, 32, 190, 2, 17, 111, 65, 79, 4, 186, 52, 6, 202, 89, 160, 198, 75, 129, 44, 18, 88, 102, 6, 16, 95, 31, 200, 247, 14, 6, 55, 222, 7, 71, 58, 3, 140, 53, 65, 24, 150, 130, 176, 21, 136, 229, 24, 8, 185, 64, 17, 6, 65, 155, 80, 183, 150, 172, 42, 138, 12, 210, 0, 2, 126, 72, 82, 41, 176, 141, 73, 59, 9, 184, 203, 164, 232, 224, 64, 99, 91, 66, 164, 198, 190, 133, 138, 141, 141, 13, 153, 23, 22, 190, 208, 2, 56, 54, 239, 231, 89, 224, 152, 76, 158, 41, 78, 60, 201, 9, 97, 120, 73, 206, 27, 105, 0, 25, 35, 36, 12, 32, 160, 2, 9, 110, 65, 13, 208, 147, 49, 208, 58, 129, 114, 246, 65, 243, 13, 100, 49, 29, 120, 106, 16, 136, 239, 40, 249, 207, 127, 237, 183, 54, 11, 30, 255, 200, 192, 145, 14, 130, 209, 76, 7, 97, 72, 144, 159, 14, 136, 101, 129, 244, 14, 130, 34, 8, 52, 165, 5, 93, 67, 25, 65, 182, 88, 160, 227, 73, 154, 65, 192, 27, 73, 170, 6, 22, 50, 105, 45, 8, 205, 164, 253, 32, 70, 115, 91, 161, 107, 127, 131, 8, 122, 55, 123, 248, 189, 63, 65, 224, 177, 10, 63, 31, 46, 197, 248, 162, 113, 51, 38, 239, 28, 135, 98, 242, 4, 113, 184, 38, 39, 129, 33, 37, 57, 87, 76, 61, 65, 86, 144, 36, 128, 20, 34, 163, 0, 17, 23, 168, 193, 32, 168, 147, 64, 235, 58, 160, 201, 5, 154, 63, 5, 88, 6, 192, 83, 235, 3, 225, 174, 201, 207, 255, 145, 111, 111, 22, 60, 254, 154, 224, 222, 215, 4, 163, 1, 24, 235, 20, 16, 30, 131, 164, 117, 64, 122, 5, 18, 62, 8, 154, 130, 42, 181, 160, 137, 232, 41, 200, 130, 163, 254, 73, 26, 67, 192, 39, 38, 253, 35, 96, 39, 147, 42, 131, 229, 14, 248, 249, 203, 151, 129, 165, 186, 241, 77, 112, 176, 0, 252, 215, 2, 159, 89, 248, 209, 241, 196, 198, 151, 136, 75, 55, 190, 67, 222, 255, 45, 242, 164, 112, 136, 38, 79, 28, 243, 72, 114, 126, 152, 110, 146, 129, 16, 136, 75, 130, 156, 33, 133, 0, 33, 22, 72, 121, 11, 170, 34, 80, 167, 49, 208, 207, 2, 101, 238, 3, 89, 36, 176, 204, 12, 96, 189, 62, 16, 238, 157, 13, 238, 189, 15, 78, 117, 85, 48, 214, 4, 97, 88, 10, 146, 86, 32, 147, 99, 32, 225, 2, 45, 104, 65, 143, 80, 180, 22, 244, 20, 45, 78, 208, 125, 152, 193, 164, 73, 4, 60, 99, 210, 75, 80, 150, 73, 191, 65, 125, 198, 146, 20, 240, 103, 97, 205, 110, 106, 19, 236, 249, 247, 248, 184, 194, 143, 133, 167, 41, 110, 95, 205, 150, 191, 201, 147, 231, 139, 163, 55, 57, 39, 76, 49, 201, 169, 35, 19, 32, 147, 132, 156, 1, 196, 20, 33, 110, 65, 13, 4, 170, 50, 8, 90, 87, 160, 159, 29, 208, 124, 3, 89, 76, 7, 146, 26, 4, 214, 59, 2, 126, 193, 175, 123, 110, 171, 224, 233, 142, 6, 156, 106, 11, 70, 51, 29, 132, 193, 32, 60, 125, 144, 73, 129, 232, 14, 130, 10, 8, 212, 164, 5, 69, 67, 13, 65, 246, 87, 160, 221, 73, 58, 65, 192, 24, 38, 13, 35, 224, 31, 147, 178, 130, 199, 76, 74, 15, 62, 44, 210, 156, 144, 106, 145, 238, 133, 150, 11, 171, 91, 192, 234, 194, 218, 223, 195, 95, 20, 254, 76, 60, 104, 145, 207, 141, 203, 42, 242, 234, 113, 99, 69, 222, 63, 142, 198, 228, 57, 226, 136, 77, 206, 3, 211, 74, 114, 186, 152, 125, 130, 196, 32, 79, 0, 89, 68, 82, 1, 130, 46, 80, 134, 22, 52, 74, 160, 117, 29, 80, 230, 2, 205, 159, 2, 44, 3, 32, 169, 53, 129, 103, 103, 243, 11, 127, 253, 119, 182, 10, 158, 110, 54, 184, 253, 53, 193, 104, 0, 198, 58, 5, 132, 199, 32, 105, 99, 32, 186, 2, 241, 30, 4, 29, 65, 137, 90, 208, 65, 52, 20, 100, 181, 81, 252, 36, 93, 33, 96, 18, 147, 230, 129, 148, 146, 219, 18, 251, 190, 225, 101, 144, 38, 132, 36, 15, 136, 111, 16, 65, 179, 198, 54, 134, 168, 11, 203, 92, 192, 243, 226, 208, 2, 200, 15, 197, 163, 8, 63, 141, 192, 21, 20, 190, 80, 193, 219, 216, 39, 239, 22, 7, 97, 124, 100, 56, 74, 147, 71, 47, 48, 24, 147, 83, 196, 140, 147, 140, 133, 64, 104, 18, 164, 13, 89, 4, 136, 50, 130, 62, 8, 10, 131, 70, 141, 129, 126, 22, 40, 115, 31, 200, 34, 129, 101, 86, 5, 202, 235, 3, 207, 222, 241, 224, 246, 251, 224, 96, 87, 5, 99, 77, 16, 134, 62, 136, 89, 129, 64, 142, 129, 120, 11, 228, 191, 5, 37, 66, 197, 90, 208, 80, 244, 55, 201, 202, 67, 8, 73, 58, 68, 192, 48, 38, 117, 4, 89, 25, 107, 77, 192, 120, 198, 110, 132, 54, 15, 216, 220, 38, 72, 231, 47, 22, 128, 255, 66, 224, 115, 10, 63, 46, 158, 175, 240, 101, 9, 94, 244, 62, 190, 49, 129, 123, 46, 242, 116, 112, 112, 38, 79, 25, 3, 48, 57, 45, 204, 50, 201, 241, 35, 25, 32, 243, 132, 180, 1, 132, 21, 81, 110, 65, 25, 4, 10, 51, 8, 186, 39, 80, 209, 62, 40, 191, 129, 47, 38, 2, 73, 181, 64, 121, 219, 230, 251, 126, 244, 249, 35, 3, 79, 189, 109, 112, 176, 131, 96, 58, 19, 65, 18, 12, 146, 211, 1, 129, 44, 144, 219, 65, 144, 127, 20, 164, 5, 21, 67, 1, 65, 54, 87, 160, 215, 73, 218, 0, 162, 72, 210, 45, 208, 206, 109, 190, 127, 249, 50, 72, 215, 65, 131, 38, 133, 9, 151, 46, 88, 182, 9, 172, 235, 41, 239, 19, 236, 213, 255, 193, 71, 20, 126, 32, 60, 65, 225, 139, 16, 188, 196, 125, 124, 15, 184, 61, 147, 103, 129, 99, 42, 242, 52, 121, 214, 183, 200, 193, 8, 140, 205, 228, 152, 145, 128, 4, 185, 65, 170, 18, 196, 17, 97, 109, 65, 220, 81, 134, 65, 80, 42, 129, 238, 141, 129, 50, 27, 148, 127, 41, 80, 12, 128, 164, 214, 1, 122, 157, 199, 47, 250, 13, 223, 61, 50, 240, 212, 243, 192, 33, 172, 9, 166, 147, 96, 172, 83, 64, 114, 10, 196, 108, 12, 132, 182, 64, 182, 91, 80, 16, 129, 6, 1, 20, 16, 245, 4, 89, 106, 84, 62, 73, 75, 64, 32, 73, 10, 7, 58, 50, 233, 46, 104, 205, 220, 22, 224, 188, 111, 16, 109, 98, 19, 236, 225, 143, 132, 63, 13, 15, 87, 248, 41, 5, 47, 104, 31, 95, 49, 110, 198, 248, 182, 113, 28, 38, 207, 14, 199, 106, 114, 6, 24, 143, 201, 113, 98, 210, 73, 134, 67, 32, 58, 9, 50, 135, 68, 2, 164, 25, 113, 111, 65, 97, 4, 122, 53, 6, 90, 90, 160, 207, 125, 224, 11, 3, 197, 172, 10, 124, 215, 1, 122, 189, 75, 192, 33, 116, 192, 193, 174, 10, 198, 154, 32, 9, 125, 144, 177, 2, 105, 28, 4, 193, 22, 8, 127, 11, 234, 35, 208, 47, 128, 110, 162, 185, 73, 150, 29, 42, 72, 210, 30, 16, 75, 146, 34, 130, 163, 14, 88, 233, 101, 193, 145, 111, 130, 219, 11, 192, 31, 132, 79, 46, 252, 4, 130, 79, 191, 143, 175, 15, 151, 94, 220, 190, 195, 9, 222, 231, 9, 222, 34, 207, 26, 99, 48, 57, 54, 129, 161, 154, 12, 129, 64, 68, 146, 76, 21, 50, 7, 144, 87, 4, 186, 5, 149, 64, 103, 6, 65, 247, 10, 180, 180, 3, 202, 111, 224, 139, 137, 64, 82, 45, 240, 221, 246, 248, 197, 191, 241, 133, 99, 1, 151, 177, 61, 112, 176, 131, 96, 58, 19, 65, 18, 12, 146, 211, 1, 105, 20, 8, 237, 32, 8, 191, 64, 59, 0, 202, 133, 234, 129, 236, 172, 64, 163, 147, 148, 0, 20, 145, 164, 82, 32, 28, 147, 118, 130, 184, 140, 21, 39, 96, 191, 34, 61, 9, 133, 22, 214, 172, 128, 129, 23, 76, 222, 4, 214, 254, 158, 255, 72, 224, 163, 133, 31, 78, 240, 201, 246, 241, 213, 224, 66, 139, 188, 31, 220, 106, 145, 39, 130, 195, 50, 121, 178, 56, 116, 147, 19, 194, 240, 76, 14, 91, 32, 10, 6, 233, 65, 182, 18, 132, 18, 145, 109, 65, 226, 81, 137, 65, 80, 45, 129, 250, 141, 129, 62, 23, 40, 255, 82, 160, 24, 0, 73, 173, 3, 196, 186, 42, 223, 255, 155, 94, 60, 22, 112, 25, 51, 192, 57, 172, 3, 166, 147, 96, 172, 75, 65, 108, 12, 50, 54, 6, 18, 43, 144, 234, 22, 84, 67, 160, 59, 0, 213, 67, 49, 65, 214, 25, 101, 79, 82, 14, 80, 71, 146, 170, 129, 133, 76, 42, 11, 54, 43, 210, 123, 80, 162, 177, 57, 33, 213, 194, 226, 21, 112, 242, 130, 201, 155, 96, 177, 0, 240, 119, 133, 63, 159, 15, 189, 143, 159, 27, 151, 85, 248, 210, 5, 238, 170, 200, 251, 199, 209, 20, 121, 130, 56, 92, 147, 147, 192, 144, 76, 14, 85, 96, 228, 38, 35, 34, 16, 160, 4, 201, 67, 46, 1, 50, 141, 208, 183, 160, 54, 2, 213, 26, 4, 45, 45, 80, 233, 62, 240, 133, 129, 98, 86, 5, 178, 235, 0, 177, 222, 61, 224, 28, 58, 224, 108, 87, 2, 99, 77, 144, 132, 62, 200, 152, 64, 20, 199, 64, 170, 5, 146, 223, 130, 238, 160, 89, 32, 43, 137, 194, 130, 172, 57, 36, 144, 164, 52, 160, 20, 147, 254, 129, 154, 76, 122, 12, 138, 59, 32, 190, 65, 4, 73, 26, 187, 20, 154, 45, 172, 98, 1, 75, 47, 88, 182, 9, 246, 240, 123, 127, 52, 31, 104, 31, 63, 19, 46, 162, 240, 133, 10, 220, 67, 225, 91, 21, 60, 136, 125, 242, 188, 112, 148, 38, 207, 29, 35, 49, 57, 63, 140, 214, 100, 20, 4, 130, 146, 100, 188, 144, 60, 128, 212, 34, 211, 45, 104, 5, 106, 51, 8, 26, 40, 208, 210, 14, 40, 191, 129, 47, 38, 2, 67, 181, 64, 118, 91, 226, 151, 252, 230, 239, 29, 47, 184, 158, 45, 129, 179, 109, 193, 116, 166, 128, 24, 24, 196, 166, 3, 162, 40, 16, 215, 65, 16, 123, 129, 94, 0, 212, 10, 165, 3, 217, 86, 129, 46, 39, 89, 127, 200, 33, 73, 153, 192, 51, 38, 165, 4, 95, 25, 155, 13, 210, 59, 96, 149, 183, 10, 32, 222, 194, 114, 22, 240, 182, 176, 216, 69, 10, 255, 96, 1, 248, 239, 240, 105, 133, 31, 23, 79, 89, 248, 178, 4, 174, 184, 240, 93, 241, 158, 111, 225, 163, 17, 56, 181, 34, 207, 23, 71, 111, 114, 78, 24, 161, 201, 145, 11, 4, 34, 201, 12, 33, 97, 9, 162, 137, 224, 182, 32, 247, 40, 70, 11, 218, 37, 208, 192, 49, 80, 233, 2, 253, 159, 2, 44, 147, 192, 80, 179, 129, 79, 87, 229, 151, 254, 150, 151, 142, 23, 92, 207, 74, 224, 40, 214, 1, 211, 73, 48, 211, 165, 32, 54, 5, 2, 54, 6, 226, 42, 16, 233, 65, 208, 11, 180, 6, 160, 116, 168, 100, 146, 45, 22, 232, 120, 146, 90, 128, 52, 76, 26, 70, 192, 63, 69, 154, 10, 18, 51, 169, 59, 152, 176, 176, 48, 5, 92, 90, 216, 183, 80, 113, 97, 93, 67, 227, 11, 154, 23, 4, 123, 254, 61, 63, 52, 188, 47, 240, 28, 194, 23, 33, 112, 125, 133, 239, 1, 183, 103, 124, 10, 56, 32, 147, 167, 137, 131, 46, 114, 30, 152, 86, 146, 211, 197, 224, 13, 178, 130, 36, 37, 200, 31, 210, 9, 144, 108, 228, 190, 5, 229, 65, 187, 198, 64, 87, 5, 42, 221, 7, 190, 72, 96, 153, 149, 128, 236, 198, 128, 79, 239, 42, 112, 20, 29, 112, 182, 43, 129, 153, 26, 196, 160, 15, 2, 86, 32, 135, 131, 32, 210, 2, 153, 111, 65, 107, 208, 41, 144, 101, 68, 85, 65, 22, 28, 245, 79, 82, 23, 48, 137, 73, 243, 64, 74, 230, 182, 190, 126, 96, 120, 25, 88, 128, 2, 110, 44, 172, 80, 1, 187, 22, 7, 6, 94, 246, 179, 67, 16, 251, 130, 91, 155, 96, 143, 127, 177, 143, 63, 19, 143, 88, 28, 153, 247, 113, 160, 38, 79, 31, 131, 49, 57, 69, 12, 56, 201, 76, 32, 46, 73, 134, 12, 249, 3, 200, 46, 146, 13, 80, 12, 129, 242, 12, 130, 18, 10, 116, 181, 3, 20, 80, 192, 23, 19, 129, 161, 90, 32, 187, 141, 243, 3, 191, 245, 236, 142, 128, 11, 219, 6, 56, 219, 22, 76, 103, 10, 136, 129, 65, 102, 58, 32, 135, 2, 89, 29, 4, 153, 71, 41, 90, 208, 41, 52, 46, 201, 158, 10, 180, 56, 201, 226, 195, 9, 38, 29, 34, 96, 152, 3, 126, 112, 249, 50, 176, 208, 4, 92, 87, 88, 137, 2, 182, 44, 44, 85, 1, 223, 10, 11, 121, 198, 38, 56, 180, 0, 252, 113, 248, 252, 194, 79, 131, 167, 47, 124, 125, 184, 244, 34, 239, 16, 55, 95, 228, 25, 225, 248, 140, 79, 153, 51, 184, 69, 78, 11, 179, 76, 114, 246, 136, 69, 146, 73, 66, 206, 18, 164, 19, 217, 5, 136, 190, 64, 55, 90, 80, 48, 129, 18, 142, 129, 86, 23, 80, 192, 82, 96, 153, 4, 134, 154, 13, 100, 122, 183, 129, 211, 152, 13, 166, 147, 96, 166, 75, 65, 102, 10, 164, 107, 12, 100, 85, 32, 207, 45, 104, 4, 42, 3, 80, 55, 148, 49, 201, 254, 10, 180, 59, 73, 33, 192, 21, 38, 221, 2, 237, 24, 11, 74, 192, 93, 69, 90, 14, 2, 44, 210, 147, 80, 104, 97, 205, 10, 24, 88, 88, 209, 131, 155, 192, 122, 23, 118, 254, 98, 1, 228, 95, 224, 115, 132, 31, 20, 79, 86, 228, 5, 225, 90, 69, 222, 15, 110, 181, 200, 19, 193, 97, 21, 121, 166, 56, 110, 147, 179, 193, 216, 76, 206, 24, 227, 79, 50, 49, 200, 83, 130, 20, 34, 163, 0, 249, 70, 250, 1, 202, 35, 80, 176, 65, 208, 213, 2, 173, 238, 0, 95, 36, 176, 204, 74, 192, 116, 155, 229, 151, 253, 182, 221, 2, 151, 183, 113, 112, 182, 43, 129, 153, 26, 196, 160, 15, 210, 37, 16, 194, 65, 16, 102, 129, 192, 183, 160, 47, 104, 19, 200, 26, 162, 164, 73, 246, 90, 160, 245, 38, 45, 241, 115, 127, 104, 254, 50, 72, 107, 65, 104, 198, 222, 131, 18, 139, 52, 39, 164, 186, 96, 217, 207, 14, 89, 218, 144, 121, 97, 219, 47, 22, 192, 82, 239, 11, 60, 186, 240, 211, 11, 94, 220, 62, 190, 122, 220, 88, 225, 155, 23, 56, 151, 34, 79, 16, 135, 91, 228, 12, 48, 30, 147, 227, 196, 164, 147, 76, 6, 114, 147, 100, 212, 144, 66, 128, 4, 35, 223, 0, 245, 16, 168, 80, 11, 122, 88, 160, 174, 99, 64, 1, 6, 202, 152, 2, 12, 53, 15, 104, 116, 58, 191, 252, 183, 239, 22, 184, 188, 233, 224, 64, 102, 131, 233, 76, 1, 25, 40, 16, 152, 14, 72, 160, 64, 80, 7, 65, 218, 81, 135, 22, 180, 9, 93, 75, 178, 161, 2, 253, 53, 217, 119, 1, 27, 152, 180, 7, 196, 98, 210, 66, 16, 212, 1, 241, 13, 34, 40, 206, 216, 132, 144, 100, 97, 145, 10, 56, 118, 193, 196, 77, 48, 254, 130, 96, 15, 127, 42, 58, 222, 23, 126, 62, 94, 202, 62, 190, 86, 220, 70, 225, 91, 21, 56, 133, 194, 135, 37, 120, 148, 251, 228, 137, 99, 24, 38, 39, 135, 161, 154, 76, 0, 242, 145, 100, 158, 144, 182, 4, 25, 69, 130, 1, 10, 128, 122, 12, 130, 154, 161, 135, 99, 160, 216, 5, 20, 176, 20, 88, 102, 58, 208, 220, 24, 208, 232, 93, 8, 14, 100, 12, 28, 239, 74, 96, 166, 125, 16, 152, 2, 209, 26, 3, 65, 21, 72, 114, 11, 234, 128, 178, 0, 20, 13, 53, 76, 178, 185, 2, 189, 54, 233, 1, 1, 75, 152, 84, 10, 108, 99, 236, 37, 40, 203, 164, 220, 224, 189, 194, 110, 132, 54, 11, 171, 85, 192, 186, 11, 186, 155, 192, 74, 111, 55, 193, 237, 5, 224, 15, 194, 39, 23, 126, 116, 62, 241, 62, 190, 50, 92, 116, 225, 27, 19, 184, 231, 194, 231, 130, 35, 51, 62, 92, 28, 186, 201, 9, 97, 120, 38, 39, 141, 28, 36, 153, 27, 164, 42, 65, 22, 145, 212, 4, 17, 23, 232, 0, 64, 133, 4, 106, 54, 8, 26, 43, 80, 236, 62, 80, 198, 20, 96, 40, 0, 205, 109, 150, 31, 252, 29, 187, 8, 46, 114, 179, 224, 120, 91, 48, 157, 41, 32, 3, 29, 16, 173, 2, 9, 28, 4, 73, 70, 212, 91, 208, 20, 84, 9, 100, 1, 81, 207, 36, 27, 45, 208, 119, 147, 126, 128, 58, 76, 122, 6, 10, 50, 150, 149, 128, 199, 10, 235, 78, 192, 132, 133, 109, 9, 145, 22, 150, 173, 128, 135, 133, 69, 45, 224, 112, 97, 201, 91, 251, 123, 63, 179, 171, 254, 124, 56, 60, 147, 240, 117, 224, 18, 11, 223, 134, 192, 29, 22, 62, 5, 28, 144, 241, 57, 226, 136, 77, 206, 3, 163, 50, 57, 87, 140, 220, 100, 62, 144, 158, 36, 3, 39, 16, 199, 4, 57, 70, 202, 1, 74, 130, 10, 13, 130, 42, 10, 52, 118, 12, 40, 96, 41, 176, 76, 2, 67, 205, 3, 14, 157, 200, 175, 248, 157, 187, 8, 46, 114, 58, 56, 147, 121, 96, 58, 9, 102, 218, 7, 129, 25, 3, 241, 43, 144, 210, 22, 68, 29, 69, 104, 65, 143, 208, 178, 36, 139, 41, 208, 92, 147, 77, 23, 240, 128, 73, 105, 192, 39, 230, 182, 124, 70, 222, 45, 176, 190, 4, 204, 86, 88, 128, 2, 110, 44, 236, 79, 168, 181, 176, 126, 161, 229, 5, 147, 223, 36, 216, 27, 244, 190, 240, 231, 243, 161, 151, 189, 181, 235, 139, 22, 184, 159, 194, 247, 140, 227, 40, 242, 212, 112, 160, 197, 237, 115, 63, 114, 233, 35, 115, 9, 146, 138, 28, 3, 212, 0, 37, 105, 65, 205, 4, 218, 56, 6, 186, 221, 1, 202, 48, 176, 204, 116, 224, 184, 49, 224, 208, 187, 19, 156, 201, 32, 56, 222, 233, 96, 160, 6, 1, 232, 131, 92, 13, 130, 136, 10, 196, 184, 5, 69, 64, 77, 0, 42, 134, 2, 38, 217, 89, 129, 70, 155, 52, 0, 228, 96, 126, 222, 15, 223, 94, 6, 144, 140, 73, 35, 65, 86, 69, 58, 13, 186, 43, 172, 68, 1, 91, 22, 54, 42, 100, 91, 216, 198, 16, 245, 130, 101, 155, 96, 15, 191, 247, 71, 243, 129, 246, 241, 51, 225, 10, 10, 95, 37, 174, 190, 240, 29, 226, 230, 139, 60, 35, 28, 95, 145, 167, 140, 1, 24, 143, 10, 83, 52, 57, 114, 129, 64, 152, 76, 15, 178, 149, 32, 145, 200, 107, 130, 160, 163, 6, 45, 40, 146, 64, 217, 90, 208, 216, 14, 16, 65, 1, 107, 76, 1, 134, 2, 112, 220, 6, 249, 149, 191, 107, 119, 193, 165, 110, 16, 28, 47, 192, 104, 166, 128, 0, 24, 164, 101]);
fileData4.push.apply(fileData4, [12, 196, 111, 16, 100, 88, 32, 231, 0, 53, 65, 137, 64, 86, 15, 197, 76, 178, 203, 63, 255, 71, 214, 92, 6, 7, 122, 17, 48, 143, 177, 163, 160, 47, 99, 203, 65, 128, 133, 37, 41, 224, 207, 226, 192, 177, 67, 255, 203, 50, 203, 89, 192, 219, 194, 98, 135, 240, 15, 22, 128, 255, 90, 224, 51, 133, 31, 23, 79, 89, 28, 175, 247, 115, 42, 24, 152, 201, 233, 98, 240, 38, 131, 130, 12, 37, 25, 59, 129, 80, 38, 72, 51, 178, 14, 208, 19, 20, 105, 16, 20, 114, 16, 116, 187, 128, 8, 250, 64, 52, 9, 12, 53, 15, 8, 116, 10, 63, 244, 187, 119, 23, 92, 234, 68, 112, 38, 51, 192, 104, 18, 12, 116, 41, 72, 139, 64, 168, 198, 64, 62, 91, 16, 114, 129, 22, 0, 52, 8, 253, 74, 178, 146, 40, 108, 146, 29, 71, 253, 147, 212, 5, 76, 82, 164, 115, 160, 35, 99, 107, 65, 104, 198, 222, 131, 18, 11, 107, 83, 192, 168, 194, 202, 237, 111, 2, 104, 124, 65, 243, 130, 96, 207, 191, 231, 135, 78, 254, 86, 15, 46, 174, 200, 27, 192, 189, 9, 223, 188, 192, 185, 20, 62, 62, 129, 147, 45, 114, 6, 24, 79, 145, 83, 196, 128, 77, 6, 66, 32, 46, 38, 227, 37, 16, 190, 36, 243, 138, 52, 3, 52, 1, 85, 105, 65, 217, 6, 65, 111, 5, 186, 221, 1, 214, 48, 16, 205, 116, 224, 184, 49, 32, 208, 187, 19, 156, 201, 32, 56, 222, 233, 96, 160, 6, 1, 232, 128, 80, 21, 200, 94, 11, 2, 220, 130, 10, 160, 32, 32, 155, 37, 208, 187, 36, 171, 138, 34, 39, 89, 124, 104, 193, 164, 67, 160, 151, 34, 191, 65, 36, 224, 168, 226, 182, 202, 150, 189, 85, 0, 73, 46, 88, 246, 83, 164, 150, 48, 228, 92, 216, 222, 16, 187, 176, 246, 247, 126, 214, 70, 191, 228, 247, 229, 10, 222, 204, 42, 222, 199, 33, 26, 159, 53, 38, 97, 114, 102, 24, 167, 201, 217, 35, 22, 38, 99, 36, 16, 50, 131, 92, 34, 181, 9, 226, 142, 50, 180, 160, 78, 45, 40, 164, 64, 111, 199, 128, 8, 10, 88, 99, 10, 48, 20, 128, 227, 54, 197, 175, 250, 61, 39, 0, 92, 243, 70, 192, 241, 2, 140, 102, 10, 8, 64, 129, 168, 140, 129, 224, 9, 132, 115, 16, 36, 28, 160, 32, 168, 15, 200, 210, 161, 146, 73, 86, 24, 5, 79, 82, 8, 112, 133, 73, 177, 192, 57, 133, 213, 36, 96, 173, 194, 114, 219, 226, 38, 88, 253, 91, 67, 123, 249, 155, 252, 80, 60, 138, 232, 120, 95, 248, 250, 120, 233, 251, 248, 222, 112, 207, 133, 143, 6, 71, 102, 124, 178, 56, 116, 227, 217, 96, 108, 38, 103, 140, 241, 155, 140, 139, 64, 152, 76, 134, 79, 32, 154, 9, 50, 141, 196, 3, 180, 165, 5, 149, 67, 39, 199, 64, 195, 5, 68, 208, 7, 162, 73, 96, 168, 25, 192, 155, 83, 248, 213, 191, 247, 4, 128, 107, 94, 10, 142, 101, 6, 24, 77, 130, 129, 246, 65, 84, 10, 36, 106, 16, 132, 83, 32, 189, 45, 200, 63, 64, 119, 208, 172, 36, 203, 136, 170, 38, 89, 109, 20, 223, 164, 37, 32, 16, 99, 213, 8, 88, 168, 176, 172, 4, 60, 86, 88, 119, 131, 155, 192, 170, 20, 176, 232, 130, 238, 38, 176, 162, 167, 127, 107, 232, 96, 1, 248, 239, 240, 57, 226, 246, 131, 118, 191, 228, 231, 133, 238, 227, 59, 193, 77, 22, 62, 8, 28, 144, 241, 57, 226, 136, 139, 156, 4, 134, 100, 114, 162, 24, 182, 201, 100, 32, 52, 38, 67, 38, 16, 193, 36, 83, 139, 76, 3, 244, 1, 160, 78, 2, 149, 107, 65, 111, 11, 52, 188, 3, 196, 97, 224, 154, 137, 192, 113, 131, 192, 155, 119, 45, 56, 150, 65, 112, 188, 211, 193, 52, 13, 166, 223, 1, 137, 18, 8, 222, 32, 72, 47, 226, 221, 130, 118, 36, 217, 41, 129, 198, 37, 89, 82, 84, 56, 201, 202, 195, 6, 198, 222, 24, 123, 235, 56, 253, 3, 53, 21, 214, 151, 128, 217, 10, 11, 16, 98, 44, 44, 79, 1, 175, 10, 139, 87, 192, 201, 194, 198, 134, 204, 133, 85, 47, 22, 11, 192, 191, 193, 199, 9, 63, 10, 30, 93, 228, 211, 227, 202, 132, 175, 27, 183, 84, 248, 182, 5, 78, 164, 240, 169, 225, 64, 139, 60, 119, 140, 164, 240, 228, 4, 134, 106, 50, 1, 8, 135, 201, 48, 9, 68, 205, 32, 157, 200, 110, 130, 196, 3, 20, 70, 160, 81, 45, 168, 165, 64, 117, 199, 128, 11, 10, 136, 99, 41, 48, 20, 128, 227, 54, 194, 15, 255, 190, 147, 1, 46, 123, 35, 224, 120, 1, 70, 51, 5, 76, 191, 64, 78, 198, 64, 234, 4, 146, 217, 130, 108, 35, 252, 0, 197, 1, 89, 55, 148, 49, 201, 242, 162, 218, 38, 61, 0, 69, 152, 244, 9, 84, 99, 108, 36, 200, 170, 176, 208, 4, 92, 87, 216, 135, 80, 101, 97, 157, 66, 179, 11, 214, 126, 65, 176, 135, 63, 21, 183, 63, 109, 197, 47, 249, 125, 161, 2, 247, 32, 124, 147, 2, 247, 95, 248, 140, 112, 124, 133, 143, 88, 224, 244, 139, 156, 19, 70, 104, 114, 222, 136, 130, 201, 220, 32, 82, 38, 35, 40, 16, 208, 4, 201, 6, 104, 5, 58, 3, 80, 57, 129, 90, 14, 130, 134, 23, 112, 65, 31, 184, 198, 192, 80, 51, 128, 55, 151, 242, 107, 126, 255, 201, 0, 151, 61, 5, 156, 204, 170, 96, 52, 9, 166, 217, 7, 57, 17, 136, 211, 24, 72, 38, 162, 219, 130, 228, 163, 23, 0, 157, 74, 178, 134, 40, 105, 146, 165, 70, 223, 77, 202, 1, 222, 48, 54, 12, 228, 99, 236, 40, 232, 171, 176, 226, 4, 236, 87, 216, 144, 144, 103, 97, 187, 66, 188, 194, 90, 22, 48, 182, 56, 240, 249, 208, 26, 56, 180, 0, 166, 120, 95, 224, 185, 133, 175, 12, 87, 92, 248, 174, 112, 183, 133, 79, 4, 135, 85, 248, 64, 5, 206, 186, 240, 72, 4, 166, 85, 228, 92, 49, 114, 147, 249, 64, 116, 76, 70, 77, 32, 136, 9, 226, 155, 32, 247, 104, 5, 64, 169, 4, 90, 215, 130, 246, 10, 52, 188, 3, 196, 97, 224, 154, 137, 64, 112, 131, 192, 155, 119, 51, 56, 153, 22, 28, 239, 116, 48, 205, 2, 163, 239, 128, 56, 9, 68, 110, 16, 228, 22, 193, 110, 201, 82, 160, 50, 0, 93, 75, 178, 158, 40, 175, 201, 166, 11, 120, 160, 72, 99, 64, 38, 198, 206, 89, 250, 13, 34, 8, 173, 176, 244, 4, 124, 88, 28, 56, 115, 213, 55, 9, 86, 127, 65, 112, 176, 0, 252, 119, 248, 28, 225, 71, 228, 147, 77, 254, 146, 31, 247, 86, 248, 254, 113, 52, 133, 143, 79, 224, 100, 11, 15, 0, 131, 49, 57, 69, 12, 184, 200, 28, 32, 37, 73, 166, 10, 129, 75, 16, 211, 36, 195, 141, 220, 3, 212, 6, 165, 106, 65, 51, 5, 218, 59, 6, 116, 80, 64, 28, 75, 129, 161, 0, 4, 183, 62, 191, 246, 15, 156, 36, 112, 241, 235, 131, 227, 5, 24, 205, 82, 48, 250, 2, 33, 25, 3, 145, 19, 136, 101, 11, 130, 141, 216, 131, 236, 139, 64, 155, 18, 116, 48, 201, 218, 162, 209, 38, 13, 0, 57, 152, 212, 8, 12, 83, 88, 68, 219, 216, 4, 86, 104, 127, 19, 64, 203, 194, 210, 22, 240, 185, 200, 53, 176, 183, 212, 251, 2, 143, 46, 252, 220, 184, 38, 113, 251, 162, 135, 212, 239, 187, 197, 65, 20, 62, 44, 129, 115, 44, 124, 220, 24, 131, 241, 180, 48, 72, 147, 83, 71, 32, 76, 166, 7, 193, 74, 16, 71, 131, 4, 35, 223, 0, 221, 64, 115, 0, 138, 39, 80, 206, 65, 208, 115, 1, 29, 244, 129, 107, 12, 12, 181, 42, 48, 230, 82, 126, 228, 15, 158, 36, 112, 241, 75, 193, 225, 172, 10, 70, 147, 96, 154, 29, 16, 146, 2, 89, 26, 4, 153, 68, 104, 91, 144, 121, 52, 2, 100, 149, 80, 180, 4, 221, 52, 217, 229, 239, 95, 99, 25, 88, 44, 2, 206, 41, 172, 166, 25, 155, 96, 233, 63, 56, 97, 163, 66, 182, 133, 109, 12, 75, 79, 121, 65, 176, 135, 63, 21, 254, 28, 62, 220, 26, 223, 234, 241, 237, 9, 220, 188, 240, 209, 8, 156, 90, 225, 195, 197, 161, 23, 57, 27, 140, 205, 120, 186, 24, 188, 201, 160, 32, 67, 9, 98, 103, 50, 166, 2, 33, 78, 144, 126, 116, 3, 160, 90, 40, 222, 32, 40, 176, 64, 207, 199, 128, 56, 12, 92, 51, 17, 8, 174, 5, 198, 188, 203, 193, 225, 12, 130, 19, 158, 2, 70, 105, 48, 250, 14, 200, 146, 64, 222, 90, 16, 90, 129, 84, 131, 172, 3, 202, 2, 178, 98, 40, 96, 130, 206, 154, 236, 56, 234, 111, 44, 10, 1, 135, 20, 105, 27, 136, 168, 176, 172, 182, 184, 9, 54, 247, 130, 224, 208, 2, 240, 7, 225, 243, 133, 31, 29, 207, 42, 58, 222, 23, 190, 31, 220, 106, 225, 179, 192, 25, 21, 62, 74, 28, 113, 145, 147, 192, 144, 138, 156, 37, 198, 108, 50, 19, 136, 139, 65, 188, 76, 198, 81, 32, 172, 73, 70, 28, 233, 7, 104, 14, 170, 213, 130, 114, 10, 20, 120, 12, 24, 161, 128, 62, 250, 64, 79, 0, 130, 91, 147, 95, 247, 135, 78, 30, 184, 133, 245, 193, 9, 39, 24, 205, 82, 48, 247, 2, 9, 25, 3, 121, 67, 32, 91, 16, 105, 4, 30, 100, 83, 4, 122, 148, 100, 245, 80, 204, 4, 93, 54, 110, 253, 216, 203, 130, 180, 7, 196, 82, 124, 223, 143, 222, 94, 6, 80, 83, 97, 125, 205, 218, 4, 7, 218, 20, 48, 170, 176, 114, 161, 226, 194, 174, 134, 195, 7, 95, 16, 44, 22, 128, 255, 148, 159, 176, 198, 119, 249, 125, 245, 184, 177, 194, 119, 142, 19, 41, 124, 112, 56, 208, 194, 135, 46, 48, 146, 34, 39, 135, 161, 22, 158, 189, 64, 44, 12, 98, 100, 50, 118, 2, 161, 76, 50, 199, 72, 57, 200, 122, 160, 60, 45, 168, 31, 202, 57, 8, 122, 94, 192, 8, 29, 224, 154, 4, 134, 90, 9, 232, 178, 207, 175, 255, 195, 39, 15, 220, 66, 31, 28, 206, 170, 96, 46, 6, 163, 236, 131, 132, 8, 4, 105, 16, 4, 82, 32, 177, 32, 211, 46, 208, 133, 36, 27, 36, 208, 175, 36, 43, 137, 194, 26, 20, 220, 164, 13, 32, 10, 99, 159, 64, 53, 197, 154, 155, 192, 50, 20, 240, 228, 86, 94, 16, 28, 94, 3, 123, 75, 213, 143, 199, 21, 29, 239, 11, 95, 49, 110, 70, 228, 173, 226, 20, 132, 143, 73, 224, 4, 133, 143, 88, 96, 0, 133, 135, 36, 48, 191, 34, 39, 141, 16, 24, 132, 198, 100, 194, 16, 190, 36, 243, 138, 52, 39, 232, 0, 26, 2, 208, 46, 212, 175, 5, 29, 22, 232, 121, 7, 232, 163, 128, 107, 38, 2, 193, 181, 64, 151, 119, 57, 56, 156, 65, 112, 194, 83, 192, 40, 13, 230, 62, 6, 130, 36, 16, 182, 22, 196, 85, 32, 207, 32, 139, 128, 154, 128, 44, 23, 122, 151, 100, 85, 209, 98, 131, 214, 27, 251, 1, 234, 48, 41, 25, 248, 71, 172, 178, 9, 104, 63, 97, 55, 66, 155, 162, 191, 9, 44, 100, 136, 90, 88, 227, 2, 134, 47, 243, 239, 225, 79, 133, 63, 1, 143, 37, 252, 76, 184, 2, 225, 235, 195, 165, 23, 190, 55, 220, 179, 240, 161, 8, 156, 151, 240, 129, 10, 28, 119, 145, 35, 193, 180, 10, 15, 85, 96, 222, 5, 194, 97, 50, 73, 8, 89, 146, 185, 68, 100, 147, 12, 58, 58, 0, 208, 31, 20, 172, 5, 21, 21, 168, 241, 32, 48, 66, 1, 125, 44, 5, 134, 74, 32, 184, 53, 249, 209, 63, 114, 34, 193, 93, 172, 9, 78, 56, 193, 92, 150, 130, 185, 11, 196, 99, 12, 36, 77, 32, 141, 0, 97, 70, 212, 65, 118, 68, 160, 65, 73, 150, 14, 125, 52, 217, 95, 84, 219, 64, 5, 198, 198, 152, 247, 13, 162, 109, 110, 130, 209, 53, 32, 14, 252, 188, 202, 11, 130, 219, 11, 192, 31, 129, 207, 20, 246, 190, 192, 83, 10, 95, 19, 174, 85, 248, 78, 112, 135, 133, 79, 1, 167, 83, 248, 4, 113, 184, 133, 79, 31, 131, 49, 30, 33, 70, 107, 16, 5, 147, 185, 65, 164, 76, 230, 15, 209, 76, 50, 205, 200, 122, 130, 146, 160, 66, 45, 104, 32, 42, 58, 8, 218, 46, 96, 132, 62, 208, 141, 129, 161, 86, 2, 174, 236, 243, 27, 254, 232, 137, 4, 119, 209, 7, 231, 179, 18, 152, 139, 193, 28, 59, 32, 30, 5, 82, 212, 130, 40, 10, 100, 21, 32, 234, 40, 66, 146, 221, 17, 104, 150, 249, 65, 17, 101, 68, 79, 77, 150, 26, 125, 55, 240, 67, 97, 141, 204, 221, 4, 7, 18, 19, 240, 155, 176, 0, 55, 251, 173, 33, 187, 26, 26, 23, 150, 188, 181, 191, 88, 0, 254, 83, 124, 180, 240, 99, 225, 57, 132, 175, 0, 23, 39, 242, 210, 113, 87, 194, 183, 141, 227, 40, 124, 94, 56, 202, 194, 103, 141, 49, 24, 15, 12, 131, 52, 152, 122, 145, 249, 64, 116, 76, 230, 12, 41, 76, 50, 181, 200, 116, 130, 38, 160, 39, 0, 29, 67, 9, 91, 80, 99, 129, 182, 143, 1, 125, 24, 232, 102, 10, 176, 91, 11, 92, 121, 10, 206, 167, 5, 39, 60, 5, 204, 177, 192, 208, 199, 64, 132, 4, 98, 54, 8, 178, 138, 36, 131, 172, 0, 10, 146, 100, 167, 4, 26, 103, 178, 161, 40, 175, 201, 166, 67, 2, 6, 198, 40, 44, 150, 165, 155, 0, 202, 42, 172, 53, 1, 227, 9, 43, 17, 170, 44, 236, 82, 104, 86, 88, 194, 144, 179, 176, 186, 219, 23, 4, 22, 190, 216, 171, 255, 131, 143, 16, 254, 124, 60, 174, 240, 179, 226, 106, 132, 175, 21, 247, 32, 124, 147, 2, 247, 47, 124, 58, 56, 184, 194, 135, 43, 112, 238, 133, 199, 131, 177, 21, 24, 176, 201, 52, 32, 40, 69, 70, 10, 105, 75, 50, 157, 200, 110, 146, 113, 71, 19, 0, 90, 132, 142, 181, 160, 168, 104, 242, 24, 240, 130, 128, 62, 150, 2, 67, 37, 176, 219, 58, 252, 198, 63, 118, 130, 193, 189, 172, 3, 78, 56, 193, 92, 250, 96, 232, 5, 178, 49, 8, 98, 38, 144, 67, 128, 24, 35, 228, 32, 219, 33, 208, 29, 147, 93, 19, 104, 162, 201, 230, 162, 212, 198, 221, 255, 129, 145, 101, 0, 141, 20, 86, 205, 140, 77, 48, 241, 91, 67, 91, 121, 65, 48, 242, 125, 161, 61, 252, 145, 189, 47, 240, 64, 126, 14, 129, 43, 200, 139, 195, 117, 139, 186, 43, 129, 187, 21, 62, 14, 129, 195, 18, 62, 74, 129, 83, 46, 60, 12, 12, 169, 192, 56, 141, 7, 143, 64, 152, 76, 15, 130, 101, 50, 133, 200, 104, 146, 153, 70, 226, 19, 84, 5, 69, 106, 65, 15, 81, 212, 65, 80, 120, 1, 47, 116, 128, 110, 12, 12, 181, 18, 16, 101, 135, 223, 244, 199, 79, 48, 184, 151, 14, 56, 159, 149, 192, 92, 12, 230, 216, 1, 217, 16, 200, 207, 32, 200, 33, 82, 10, 16, 114, 84, 32, 201, 214, 8, 116, 202, 100, 7, 5, 26, 90, 76, 249, 30, 145, 133, 32, 224, 138, 2, 98, 41, 44, 159, 141, 111, 2, 11, 179, 191, 9, 32, 225, 121, 107, 224, 246, 2, 24, 243, 190, 240, 227, 226, 41, 133, 175, 6, 87, 41, 124, 27, 2, 119, 40, 124, 255, 56, 154, 194, 103, 135, 51, 45, 124, 244, 24, 73, 129, 225, 21, 57, 99, 140, 223, 56, 37, 200, 144, 201, 180, 33, 139, 73, 102, 23, 201, 78, 208, 7, 180, 5, 160, 105, 232, 97, 11, 202, 44, 80, 248, 49, 96, 144, 2, 186, 153, 2, 236, 214, 2, 81, 158, 130, 243, 105, 193, 9, 79, 1, 115, 44, 48, 241, 49, 144, 31, 129, 140, 181, 32, 165, 200, 48, 200, 240, 163, 26, 73, 182, 73, 160, 107, 38, 187, 137, 218, 26, 23, 92, 160, 251, 69, 90, 2, 2, 41, 160, 154, 194, 58, 154, 181, 9, 14, 52, 40, 96, 72, 97, 127, 66, 173, 194, 226, 133, 144, 133, 117, 13, 141, 11, 75, 222, 218, 95, 44, 0, 255, 41, 62, 90, 248, 177, 240, 28, 194, 87, 128, 43, 19, 190, 110, 220, 143, 200, 27, 198, 89, 8, 159, 20, 78, 176, 240, 65, 99, 0, 5, 70, 85, 228, 68, 49, 236, 34, 51, 129, 184, 152, 204, 22, 98, 103, 50, 163, 72, 112, 146, 161, 23, 168, 68, 130, 46, 161, 105, 0, 69, 21, 40, 243, 32, 240, 66, 1, 131, 244, 129, 161, 18, 216, 109, 54, 191, 249, 79, 156, 108, 112, 59, 235, 128, 19, 54, 24, 202, 82, 48, 113, 129, 96, 12, 130, 128, 9, 132, 176, 5, 25, 70, 194, 147, 44, 5, 42, 147, 100, 203, 126, 104, 141, 101, 144, 173, 135, 16, 140, 189, 1, 165, 20, 144, 79, 97, 65, 13, 110, 2, 203, 77, 192, 123, 71, 252, 130, 192, 194, 23, 123, 245, 127, 240, 17, 194, 159, 140, 199, 245, 243, 9, 92, 138, 47, 84, 224, 30, 132, 239, 16, 55, 47, 242, 104, 112, 106, 194, 199, 138, 227, 46, 48, 152, 194, 195, 19, 152, 107, 145, 9, 64, 56, 138, 204, 16, 226, 101, 50, 142, 72, 106, 146, 225, 70, 238, 65, 182, 5, 93, 2, 168, 162, 64, 93, 91, 208, 121, 1, 47, 116, 128, 113, 12, 12, 53, 29, 88, 178, 195, 111, 249, 147, 39, 27, 220, 78, 7, 28, 209, 116, 48, 20, 131, 33, 118, 64, 48, 4, 194, 51, 8, 18, 136, 136, 130, 204, 182, 64, 242, 147, 236, 139, 64, 155, 76, 182, 15, 197, 52, 217, 98, 20, 188, 200, 111, 16, 65, 17, 198, 38, 129, 100, 10, 232, 168, 176, 178, 160, 178, 194, 174, 131, 6, 133, 37, 41, 224, 79, 81, 106, 221, 236, 247, 133, 246, 240, 71, 254, 104, 60, 144, 240, 115, 224, 185, 69, 93, 153, 192, 21, 139, 188, 37, 220, 173, 240, 89, 224, 140, 132, 15, 81, 224, 124, 5, 198, 80, 120, 84, 2, 83, 44, 60, 108, 129, 40, 20, 153, 24, 132, 201, 100, 242, 16, 74, 147, 9, 70, 190, 19, 180, 2, 157, 1, 232, 27, 218, 216, 130, 74, 163, 243, 99, 64, 34, 5, 140, 51, 5, 216, 13, 192, 146, 71, 198, 111, 253, 83, 147, 192, 103, 29, 13, 56, 34, 128, 227, 157, 2, 134, 88, 96, 220, 99, 32, 60, 2, 233, 106, 65, 62, 145, 94, 144, 177, 71, 41, 146, 236, 17, 42, 150, 100, 37, 209, 86, 147, 213, 70, 235, 139, 148, 3, 188, 81, 216, 45, 208, 78, 1, 65, 21, 165, 175, 173, 189, 32, 160, 135, 173, 104, 168, 187, 179, 6, 110, 47, 0, 127, 4, 62, 89, 248, 113, 241, 124, 194, 87, 131, 171, 20, 190, 7, 220, 158, 240, 157, 227, 80, 138, 142, 247, 5, 206, 93, 120, 48, 2, 51, 43, 60, 87, 140, 220, 56, 25, 8, 141, 201, 132, 33, 124, 38, 195, 138, 28, 39, 25, 125, 129, 98, 36, 104, 20, 250, 6, 80, 87, 129, 74, 15, 2, 59, 8, 72, 164, 15, 36, 149, 192, 110, 179, 129, 154, 215, 228, 183, 253, 233, 73, 224, 179, 214, 4, 119, 52, 15, 28, 111, 130, 161, 244, 193, 184, 11, 164, 98, 16, 164, 11, 241, 107, 65, 122, 145, 237, 36, 235, 128, 178, 36, 217, 47, 84, 207, 100, 79, 81, 97, 227, 178, 11, 120, 160, 176, 46, 4, 76, 82, 216, 54, 16, 81, 1, 95, 9, 11, 173, 191, 9, 32, 73, 97, 133, 10, 216, 85, 148, 120, 87, 124, 65, 192, 53, 176, 88, 0, 254, 83, 124, 180, 240, 3, 225, 9, 234, 185, 11, 92, 86, 94, 52, 238, 71, 248, 110, 113, 10, 194, 199, 132, 227, 43, 112, 202, 133, 39, 129, 9, 21, 158, 34, 6, 108, 156, 3, 68, 196, 100, 158, 16, 53, 147, 185, 68, 100, 77, 70, 92, 160, 0, 73, 118, 6, 141, 2, 40, 36, 234, 58, 8, 106, 47, 96, 135, 14, 144, 78, 1, 73, 77, 7, 138, 236, 0, 53, 159, 68, 112, 71, 99, 224, 136, 166, 131, 161, 24, 76, 176, 3, 82, 33, 144, 156, 22, 196, 15, 225, 4, 153, 106, 129, 204, 39, 89, 19, 148, 40, 201, 210, 161, 143, 198, 205, 29, 123, 183, 192, 245, 23, 48, 67, 97, 129, 8, 184, 165, 56, 88, 3, 51, 54, 65, 99, 63, 97, 55, 194, 153, 83, 94, 16, 204, 91, 3, 98, 175, 254, 15, 62, 194, 159, 41, 240, 160, 245, 124, 2, 215, 33, 124, 149, 184, 1, 225, 123, 195, 61, 23, 62, 23, 156, 151, 192, 153, 22, 235, 120, 63, 167, 142, 64, 20, 206, 141, 64, 164, 76, 230, 15, 209, 52, 25, 101, 129, 160, 27, 116, 3, 205, 73, 80, 57, 129, 78, 2, 84, 90, 160, 246, 99, 192, 35, 5, 164, 179, 20, 216, 13, 64, 145, 91, 229, 183, 255, 153, 249, 224, 161, 182, 10, 142, 8, 224, 120, 167, 128, 9, 22, 152, 245, 32, 136, 141, 64, 180, 90, 144, 76, 68, 23, 100, 224, 81, 135, 36, 235, 131, 114, 153, 108, 34, 74, 106, 178, 209, 40, 123, 145, 78, 128, 46, 10, 43, 69, 192, 54, 194, 58, 26, 220, 4, 16, 90, 113, 176, 6, 230, 190, 32, 128, 120, 133, 181, 12, 93, 11, 155, 28, 146, 175, 239, 11, 237, 225, 79, 253, 209, 120, 20, 225, 231, 192, 115, 11, 95, 25, 174, 88, 248, 126, 112, 159, 162, 227, 125, 129, 115, 20, 62, 104, 12, 160, 240, 132, 48, 188, 34, 103, 140, 241, 23, 153, 18, 4, 200, 56, 106, 72, 97, 146, 169, 69, 160, 77, 22, 64, 160, 30, 9, 122, 133, 214, 1, 148, 86, 160, 216, 45, 176, 67, 1, 143, 116, 128, 164, 18, 216, 109, 30, 208, 241, 60, 126, 199, 159, 157, 15, 30, 106, 30, 184, 169, 121, 224, 120, 19, 12, 165, 15, 102, 45, 16, 137, 65, 144, 43, 4, 175, 5, 185, 69, 170, 147, 44, 2, 106, 146, 100, 173, 208, 56, 227, 122, 10, 52, 215, 184, 227, 168, 191, 177, 37, 32, 16, 177, 244, 29, 99, 11, 10, 226, 42, 224, 55, 97, 1, 66, 140, 194, 218, 20, 48, 106, 231, 5, 129, 21, 221, 190, 32, 176, 216, 33, 252, 219, 11, 192, 31, 129, 207, 20, 126, 92, 60, 159, 240, 165, 224, 42, 133, 111, 0, 247, 38, 124, 231, 56, 17, 129, 83, 19, 62, 86, 129, 19, 23, 30, 137, 192, 192, 132, 199, 41, 48, 233, 194, 129, 16, 200, 74, 145, 169, 66, 224, 76, 166, 19, 193, 53, 25, 116, 129, 26, 36, 217, 28, 244, 10, 160, 150, 40, 109, 11, 154, 95, 64, 16, 99, 64, 58, 6, 158, 154, 8, 20, 57, 6, 116, 124, 66, 193, 77, 141, 129, 35, 154, 14, 38, 98, 48, 193, 49, 144, 7, 129, 216, 180, 32, 120, 136, 37, 200, 60, 11, 164, 61, 201, 130, 160, 62, 73, 214, 13, 77, 44, 178, 179, 168, 179, 113, 235, 33, 4, 99, 111, 64, 41, 98, 226, 38, 216, 234, 11, 130, 121, 223, 23, 178, 228, 173, 253, 197, 2, 240, 159, 226, 163, 69, 61, 144, 192, 19, 248, 185, 113, 89, 194, 87, 140, 59, 17, 29, 239, 11, 156, 148, 232, 120, 95, 120, 6, 24, 79, 225, 249, 97, 174, 133, 199, 47, 144, 140, 34, 51, 132, 120, 21, 153, 66, 4, 212, 100, 160, 5, 226, 110, 208, 16, 244, 39, 65, 241, 80, 203, 22, 20, 91, 160, 252, 131, 192, 35, 5, 164, 179, 20, 216, 13, 64, 145, 91, 226, 119, 254, 185, 205, 128, 135, 221, 18, 56, 34, 128, 227, 93, 10, 198, 87, 96, 208, 99, 32, 51, 8, 85, 11, 98, 137, 208, 130, 140, 58, 138, 144, 100, 113, 80, 43, 147, 29, 68, 61, 139, 31, 158, 176, 12, 236, 1, 40, 162, 176, 70, 4, 12, 35, 250, 155, 192, 250, 154, 184, 9, 172, 71, 104, 83, 88, 170, 144, 237, 250, 107, 96, 239, 216, 213, 143, 115, 17, 62, 56, 129, 51, 21, 62, 113, 12, 163, 240, 180, 48, 200, 194, 195, 22, 200, 65, 225, 172, 32, 73, 38, 51, 135, 56, 154, 204, 46, 98, 109, 178, 6, 2, 37, 73, 208, 46, 116, 15, 160, 186, 40, 246, 32, 112, 132, 128, 74, 250, 192, 83, 6, 118, 155, 7, 68, 188, 42, 191, 235, 191, 216, 12, 120, 216, 25, 224, 190, 102, 128, 227, 77, 48, 145, 14, 24, 116, 129, 60, 180, 32, 84, 2, 169, 3, 72, 44, 242, 156, 100, 5, 80, 144, 36, 11, 133, 174, 153, 44, 38, 58, 91, 184, 218, 2, 173, 47, 108, 6, 72, 163, 176, 88, 4, 156, 35, 44, 37, 1, 95, 9, 219, 12, 162, 19, 144, 161, 176, 42, 219, 23, 4, 22, 172, 128, 123, 173, 101, 232, 90, 148, 198, 199, 214, 192, 30, 254, 180, 62, 186, 192, 3, 249, 57, 240, 220, 194, 151, 133, 43, 22, 190, 31, 220, 167, 192, 89, 8, 159, 20, 78, 80, 228, 17, 227, 244, 133, 103, 131, 177, 21, 30, 173, 192, 212, 11, 39, 3, 161, 49, 206, 22, 98, 103, 50, 163, 136, 111, 146, 137, 71, 25, 146, 236, 15, 218, 5, 208, 76, 84, 183, 5, 229, 23, 112, 196, 24, 144, 142, 129, 167, 38, 2, 63, 142, 1, 17, 159, 92, 112, 95, 131, 224, 136, 166, 131, 137, 20, 24, 223, 24, 8, 131, 64, 96, 90, 16, 57, 4, 18, 100, 146, 5, 114, 158, 100, 53, 208, 26, 147, 45, 67, 1, 141, 171, 42, 208, 226, 194, 101, 23, 240, 64, 97, 87, 64, 35, 133, 85, 3, 5, 137, 109, 188, 32, 88, 241, 251, 66, 43, 175, 129, 219, 11, 160, 62, 66, 224, 51, 133, 31, 23, 207, 231, 235, 16, 184, 196, 121, 222, 23, 56, 53, 225, 51, 197, 113, 11, 15, 67, 96, 78, 194, 131, 20, 152, 113, 225, 28, 32, 34, 69, 38, 9, 33, 51, 153, 72, 132, 213, 100, 178, 17, 250, 36, 123, 130, 22, 37, 168, 31, 202, 217, 130, 122, 163, 255, 99, 192, 38, 2, 210, 89, 10, 236, 6, 224, 199, 141, 243, 187, 255, 203, 205, 131, 167, 216, 56, 56, 34, 128, 227, 93, 10, 198, 87, 96, 202, 131, 32, 48, 2, 137, 2, 8, 36, 226, 154, 100, 194, 5, 242, 111, 126, 116, 197, 101, 240, 35, 35, 203, 32, 251, 139, 106, 23, 174, 191, 128, 25, 10, 219, 3, 98, 41, 108, 30, 72, 73, 76, 217, 4, 199, 242, 125, 161, 50, 124, 174, 129, 197, 2, 168, 63, 21, 248, 104, 225, 7, 194, 115, 248, 185, 113, 77, 194, 87, 140, 59, 17, 184, 91, 49, 207, 251, 194, 167, 143, 169, 20, 158, 28, 38, 90, 120, 234, 8, 68, 145, 185, 65, 164, 10, 39, 79, 32, 148, 38, 19, 140, 124, 39, 217, 7, 180, 37, 65, 199, 208, 64, 128, 246, 162, 222, 131, 64, 19, 2, 54, 233, 0, 79, 25, 216, 109, 6, 240, 239, 74, 252, 158, 63, 191, 121, 240, 20, 43, 129, 91, 155, 1, 142, 215, 96, 28, 125, 48, 101, 129, 36, 180, 32, 78, 2, 121, 3, 25, 84, 196, 24, 100, 248, 209, 11, 147, 61, 66, 197, 76, 246, 17, 85, 53, 110, 52, 202, 94, 88, 8, 2, 174, 40, 14, 214, 192, 208, 38, 176, 136, 4, 28, 181, 193, 23, 4, 150, 42, 100, 43, 172, 98, 40, 122, 226, 26, 216, 171, 223, 224, 35, 132, 63, 25, 143, 235, 231, 195, 117, 8, 95, 37, 174, 94, 224, 246, 132, 239, 31, 231, 34, 124, 106, 56, 80, 225, 179, 198, 24, 138, 19, 225, 253, 204, 61, 42, 145, 100, 145, 208, 49, 128, 126, 162, 192, 45, 80, 128, 128, 38, 198, 128, 122, 10, 120, 106, 34, 240, 227, 32, 240, 239, 137, 6, 183, 54, 8, 142, 104, 34, 24, 135, 193, 236, 198, 64, 18, 4, 210, 2, 16, 54, 129, 52, 38, 153, 97, 129, 132, 155, 108, 132, 64, 95, 76, 150, 11, 189, 51, 110, 40, 202, 107, 220, 113, 212, 191, 176, 34, 4, 236, 33, 172, 151, 254, 38, 128, 178, 196, 198, 95, 16, 116, 222, 30, 128, 174, 151, 174, 129, 61, 252, 169, 240, 39, 224, 177, 252, 28, 120, 110, 49, 166, 126, 220, 143, 152, 226, 125, 129, 19, 20, 62, 95, 156, 187, 240, 96, 4, 102, 38, 60, 81, 12, 187, 112, 32, 4, 178, 82, 56, 82, 2, 105, 43, 50, 151, 136, 172, 201, 124, 35, 253, 73, 182, 5, 93, 74, 208, 64, 84, 180, 5, 13, 135, 2, 6, 129, 77, 10, 168, 167, 15, 236, 6, 224, 199, 205, 242, 123, 255, 171, 45, 130, 231, 218, 32, 56, 34, 128, 227, 93, 10, 102, 39, 48, 226, 65, 16, 21, 129, 44, 1, 68, 17, 65, 77, 50, 219, 2, 201, 55, 217, 20, 148, 200, 100, 227, 80, 70, 227, 206, 46, 253, 6, 17, 132, 32, 242, 103, 135, 32, 147, 194, 182, 129, 136, 10, 155, 10, 6, 155, 250, 130, 160, 113, 38, 164, 42, 54, 184, 6, 14, 45, 0, 127, 16, 62, 223, 143, 139, 231, 19, 155, 85, 63, 142, 76, 248, 52, 113, 202, 133, 39, 129, 9, 9, 143, 80, 96, 192, 194, 227, 23, 72, 70, 225, 0, 33, 88, 38, 83, 136, 128, 22, 25, 101, 164, 60, 201, 86, 160, 51, 9, 154, 134, 30, 2, 116, 24, 37, 111, 129, 41, 4, 108, 210, 1, 158, 74, 32, 184, 85, 129, 121, 167, 243, 251, 254, 194, 22, 193, 115, 77, 7, 119, 183, 42, 56, 91, 131, 113, 116, 192, 136, 5, 98, 48, 8, 178, 132, 164, 129, 140, 40, 2, 156, 100, 230, 5, 26, 97, 178, 65, 40, 151, 201, 26, 162, 161, 133, 139, 188, 189, 77, 176, 242, 11, 130, 91, 186, 19, 48, 161, 37, 9, 121, 10, 8, 86, 108, 100, 13, 28, 44, 0, 255, 5, 62, 199, 143, 133, 231, 176, 247, 5, 46, 11, 215, 45, 124, 87, 184, 91, 225, 131, 192, 25, 9, 159, 32, 78, 86, 116, 188, 47, 60, 51, 140, 179, 240, 188, 145, 131, 194, 113, 65, 140, 140, 211, 134, 32, 154, 76, 45, 2, 109, 50, 253, 232, 70, 146, 117, 66, 211, 0, 90, 138, 14, 183, 64, 4, 48, 197, 24, 80, 79, 1, 79, 77, 4, 114, 28, 4, 230, 61, 233, 224, 238, 6, 193, 41, 77, 1, 227, 40, 48, 184, 49, 16, 3, 129, 156, 180, 32, 105, 200, 97, 146, 233, 21, 200, 182, 201, 46, 160, 38, 73, 214, 10, 141, 43, 92, 76, 129, 206, 22, 174, 246, 198, 55, 129, 117, 4, 77, 21, 246, 24, 252, 54, 239, 251, 66, 144, 173, 40, 9, 207, 94, 3, 123, 254, 13, 62, 206, 159, 143, 199, 29, 243, 190, 192, 181, 138, 49, 245, 251, 206, 5, 206, 197, 231, 37, 112, 148, 194, 103, 141, 25, 8, 79, 8, 195, 43, 60, 93, 76, 189, 112, 56, 16, 26, 227, 108, 33, 118, 198, 233, 68, 112, 77, 6, 29, 29, 72, 178, 51, 104, 84, 130, 30, 162, 165, 0, 37, 23, 16, 193, 32, 112, 138, 128, 122, 150, 2, 187, 37, 144, 227, 166, 248, 253, 127, 241, 40, 192, 147, 110, 16, 156, 82, 130, 179, 237, 131, 193, 21, 152, 239, 32, 200, 9, 130, 4, 16, 66, 68, 52, 201, 84, 11, 100, 222, 100, 71, 80, 31, 227, 162, 9, 116, 176, 112, 85, 5, 90, 92, 184, 236, 131, 155, 192, 162, 16, 112, 136, 176, 100, 32, 159, 226, 96, 13, 172, 242, 130, 96, 83, 111, 15, 204, 94, 3, 139, 5, 128, 191, 243, 231, 224, 177, 166, 171, 223, 222, 23, 184, 37, 223, 45, 14, 66, 248, 140, 112, 118, 98, 138, 247, 5, 166, 37, 60, 75, 140, 185, 112, 20, 4, 82, 34, 50, 73, 8, 89, 145, 89, 68, 76, 77, 102, 26, 113, 55, 217, 13, 52, 39, 65, 223, 208, 70, 128, 38, 163, 231, 45, 144, 133, 128, 83, 58, 64, 85, 6, 118, 91, 9, 56, 119, 34, 127, 224, 191, 62, 10, 240, 164, 19, 193, 13, 174, 10, 206, 214, 96, 22, 29, 48, 95, 129, 12, 180, 32, 69, 200, 24, 200, 112, 34, 186, 73, 166, 29, 69, 72, 178, 56, 232, 84, 145, 237, 67, 49, 139, 236, 47, 170, 93, 184, 251, 208, 66, 97, 117, 64, 41, 98, 246, 11, 2, 43, 14, 234, 19, 22, 35, 132, 41, 74, 164, 219, 88, 3, 98, 47, 127, 227, 143, 195, 231, 207, 80, 63, 238, 65, 248, 14, 113, 231, 194, 231, 130, 243, 18, 62, 77, 156, 178, 240, 12, 48, 30, 225, 225, 9, 204, 85, 120, 240, 2, 153, 40, 156, 27, 68, 170, 200, 228, 33, 148, 69, 102, 23, 177, 54, 89, 3, 52, 36, 201, 82, 9, 84, 46, 65, 87, 209, 100, 0, 17, 8, 200, 98, 12, 216, 167, 128, 170, 166, 0, 57, 182, 192, 185, 119, 0, 184, 193, 65, 112, 74, 83, 192, 44, 10, 76, 109, 16, 4, 64, 32, 36, 45, 200, 24, 18, 152, 100, 104, 17, 233, 36, 91, 128, 130, 152, 108, 19, 138, 102, 220, 71, 84, 181, 112, 157, 5, 154, 94, 216, 6, 16, 69, 97, 147, 64, 50, 194, 10, 18, 176, 147, 56, 88, 3, 43, 189, 32, 184, 37, 73, 1, 127, 110, 105, 13, 28, 44, 0, 255, 29, 62, 71, 28, 139, 250, 237, 125, 129, 99, 21, 62, 116, 204, 67, 120, 90, 152, 98, 225, 73, 35, 1, 133, 83, 130, 0, 21, 14, 153, 64, 254, 138, 76, 42, 66, 108, 50, 241, 40, 131, 201, 242, 160, 87, 9, 218, 136, 174, 2, 84, 93, 64, 7, 45, 112, 74, 1, 251, 244, 129, 221, 18, 200, 113, 35, 252, 193, 191, 116, 164, 224, 217, 55, 2, 78, 41, 193, 217, 246, 193, 212, 4, 134, 59, 8, 18, 130, 8, 1, 196, 15, 225, 76, 50, 207, 136, 122, 146, 213, 64, 107, 140, 251, 133, 234, 25, 55, 20, 229, 45, 92, 112, 129, 238, 23, 7, 107, 96, 197, 111, 13, 77, 121, 65, 176, 169, 239, 11, 109, 124, 13, 236, 249, 247, 248, 56, 177, 61, 245, 251, 206, 113, 34, 98, 77, 239, 11, 76, 78, 28, 175, 247, 51, 217, 8, 189, 201, 146, 160, 63, 9, 90, 135, 78, 38, 40, 179, 64, 219, 91, 160, 12, 1, 173, 140, 1, 85, 25, 216, 109, 37, 96, 219, 41, 252, 161, 191, 124, 164, 224, 217, 151, 130, 27, 92, 21, 156, 109, 129, 65, 116, 192, 100, 5, 166, 223, 130, 252, 32, 96, 32, 99, 137, 208, 38, 153, 115, 84, 192, 100, 95, 80, 37, 147, 165, 67, 31, 11, 119, 22, 117, 46, 92, 121, 1, 27, 8, 235, 162, 191, 9, 160, 32, 97, 65, 65, 92, 194, 90, 131, 238, 132, 101, 8, 73, 30, 205, 26, 88, 44, 0, 252, 157, 168, 79, 107, 237, 143, 39, 219, 41, 245, 99, 78, 194, 131, 20, 152, 177, 112, 2, 16, 142, 194, 1, 18, 200, 86, 225, 252, 33, 154, 38, 115, 140, 136, 155, 236, 3, 170, 98, 178, 90, 2, 197, 75, 208, 88, 244, 25, 64, 7, 2, 202, 24, 4, 2, 42, 160, 170, 41, 64, 142, 45, 176, 237, 29, 0, 110, 112, 16, 156, 210, 82, 48, 136, 2, 35, 27, 3, 211, 71, 60, 90, 144, 46, 100, 47, 201, 184, 34, 204, 73, 134, 31, 189, 48, 89, 34, 244, 171, 112, 13, 5, 26, 90, 184, 197, 40, 184, 200, 127, 115, 2, 114, 40, 108, 15, 136, 69, 88, 59, 2, 70, 154, 247, 130, 192, 98, 132, 48, 183, 189, 6, 246, 240, 71, 59, 165, 126, 159, 163, 192, 41, 11, 15, 0, 179, 17, 158, 28, 38, 42, 60, 114, 129, 64, 8, 199, 69, 32, 73, 133, 211, 134, 32, 26, 231, 21, 81, 54, 153, 123, 84, 194, 100, 133, 4, 10, 150, 100, 39, 209, 88, 128, 194, 67, 7, 131, 192, 44, 2, 2, 234, 3, 187, 37, 144, 227, 250, 252, 225, 255, 230, 24, 192, 53, 172, 15, 78, 201, 224, 96, 251, 96, 100, 5, 38, 219, 130, 120, 32, 60, 32, 83, 39, 144, 201, 36, 99, 140, 144, 155, 108, 4, 202, 98, 92, 43, 129, 198, 21, 46, 166, 64, 103, 11, 247, 26, 149, 23, 253, 77, 96, 153, 172, 244, 130, 224, 164, 172, 129, 219, 11, 224, 232, 213, 111, 239, 11, 28, 144, 207, 14, 199, 42, 124, 226, 152, 132, 240, 168, 4, 166, 40, 60, 99, 140, 191, 112, 62, 144, 155, 194, 217, 66, 236, 138, 76, 39, 130, 107, 28, 113, 164, 63, 201, 182, 160, 72, 6, 221, 67, 51, 19, 84, 26, 133, 111, 129, 50, 4, 204, 50, 6, 108, 101, 96, 183, 149, 128, 106, 151, 242, 71, 254, 219, 99, 0, 215, 176, 20, 220, 227, 116, 112, 176, 6, 131, 24, 3, 99, 21, 24, 125, 11, 194, 131, 104, 129, 12, 36, 226, 154, 100, 188, 145, 124, 227, 154, 8, 52, 168, 200, 174, 161, 134, 133, 171, 42, 208, 226, 194, 77, 135, 1, 132, 21, 33, 96, 15, 97, 183, 64, 59, 194, 82, 130, 172, 54, 251, 246, 192, 140, 53, 0, 153, 139, 131, 53, 144, 11, 96, 162, 250, 197, 198, 213, 143, 19, 17, 62, 47, 28, 165, 240, 41, 227, 244, 133, 103, 131, 153, 137, 28, 42, 230, 45, 156, 6, 164, 164, 112, 146, 16, 178, 34, 179, 136, 152, 22, 153, 102, 4, 221, 100, 43, 80, 24, 147, 5, 19, 168, 95, 130, 222, 162, 213, 0, 82, 128, 53, 198, 128, 131, 10, 8, 107, 41, 48, 99, 11, 84, 123, 103, 128, 123, 4, 56, 162, 41, 96, 10, 5, 230, 53, 8, 70, 47, 144, 13, 128, 92, 33, 117, 73, 6, 21, 49, 78, 50, 246, 104, 68, 145, 221, 65, 173, 140, 219, 135, 98, 22, 46, 175, 64, 175, 133, 139, 47, 224, 132, 173, 188, 32, 216, 213, 53, 176, 119, 55, 168, 31, 3, 22, 57, 126, 36, 67, 56, 55, 136, 84, 225, 216, 9, 36, 178, 200, 236, 34, 214, 69, 166, 31, 197, 72, 178, 75, 168, 89, 146, 205, 68, 111, 1, 58, 15, 41, 12, 2, 185, 8, 56, 168, 3, 4, 151, 192, 140, 107, 242, 71, 255, 202, 177, 129, 43, 89, 7, 28, 81, 130, 131, 237, 131, 121, 9, 204, 180, 5, 193, 16, 72, 78, 146, 121, 19, 72, 99, 146, 1, 70, 182, 77, 118, 1, 53, 49, 110, 19, 138, 102, 220, 71, 84, 181, 112, 157, 81, 243, 194, 30, 128, 34, 196, 148, 77, 176, 169, 239, 11, 29, 253, 26, 40, 243, 239, 225, 79, 5, 62, 173, 30, 174, 181, 191, 159, 62, 47, 75, 248, 114, 113, 27, 51, 212, 239, 115, 196, 249, 138, 41, 222, 23, 152, 168, 240, 188, 145, 3, 225, 160, 8, 100, 72, 56, 100, 2, 249, 43, 28, 83, 129, 4, 23, 153, 117, 212, 192, 100, 103, 80, 167, 36, 27, 136, 126, 38, 104, 53, 106, 223, 2, 113, 8, 200, 101, 12, 8, 171, 128, 224, 86, 2, 158, 237, 243, 199, 254, 234, 177, 129, 43, 233, 131, 123, 156, 14, 14, 214, 96, 10, 99, 96, 166, 2, 115, 7, 136, 13, 66, 5, 50, 138, 72, 105, 146, 193, 70, 230, 141, 219, 129, 226, 152, 172, 24, 218, 87, 184, 161, 40, 111, 225, 118, 163, 248, 133, 205, 0, 99, 76, 125, 65, 208, 56, 202, 250, 130, 214, 150, 174, 1, 1, 121, 10, 123, 53, 101, 187, 254, 26, 56, 180, 0, 240, 161, 39, 87, 253, 24, 161, 240, 116, 49, 245, 194, 201, 64, 98, 10, 167, 10, 105, 43, 156, 72, 132, 213, 56, 214, 136, 187, 201, 110, 160, 54, 73, 54, 13, 37, 76, 208, 94, 116, 27, 192, 11, 16, 199, 32, 112, 80, 1, 97, 45, 5, 102, 108, 129, 103, 239, 12, 112, 143, 0, 71, 52, 5, 76, 65, 96, 88, 131, 96, 232, 2, 169, 0, 72, 20, 242, 150, 100, 68, 145, 94, 147, 105, 71, 17, 140, 43, 35, 208, 166, 194, 165, 19, 232, 99, 225, 206, 162, 203, 194, 101, 23, 240, 128, 176, 40, 32, 16, 97, 189, 8, 152, 199, 82, 106, 95, 16, 88, 101, 80, 220, 58, 107, 0, 226, 245, 26, 128, 168, 197, 193, 26, 56, 44, 118, 97, 231, 31, 44, 0, 252, 245, 93, 162, 126, 231, 0, 17, 41, 156, 33, 100, 171, 112, 254, 16, 77, 227, 4, 35, 220, 38, 155, 128, 146, 152, 108, 20, 202, 150, 100, 63, 209, 94, 128, 230, 67, 13, 45, 240, 139, 128, 131, 250, 192, 113, 6, 102, 92, 135, 63, 254, 223, 29, 51, 184, 158, 217, 224, 136, 18, 156, 106, 7, 12, 75, 96, 160, 45, 136, 132, 64, 102, 146, 76, 154, 64, 14, 147, 140, 46, 82, 109, 178, 2, 104, 71, 225, 18, 9, 244, 171, 112, 13, 5, 26, 42, 92, 97, 129, 118, 11, 215, 31, 90, 40, 236, 13, 248, 100, 222, 247, 133, 172, 53, 232, 110, 198, 55, 133, 44, 91, 72, 120, 213, 53, 112, 176, 0, 240, 167, 226, 4, 169, 223, 147, 192, 144, 132, 231, 135, 185, 22, 158, 61, 50, 33, 156, 24, 132, 169, 200, 192, 33, 139, 133, 243, 138, 40, 23, 153, 120, 148, 193, 100, 115, 80, 170, 36, 123, 136, 150, 38, 232, 54, 202, 223, 2, 125, 192, 47, 99, 64, 88, 6, 142, 155, 8, 12, 219, 231, 79, 252, 181, 99, 6, 215, 211, 1, 183, 57, 29, 156, 106, 129, 17, 140, 129, 129, 10, 76, 28, 32, 48, 136, 83, 146, 9, 20, 200, 167, 201, 60, 35, 234, 38, 123, 129, 202, 20, 174, 149, 64, 227, 10, 183, 18, 133, 45, 92, 106, 148, 189, 176, 13, 96, 9, 97, 141, 64, 47, 155, 125, 123, 96, 147, 107, 224, 150, 168, 33, 240, 131, 29, 208, 172, 129, 67, 11, 96, 80, 253, 98, 80, 253, 98, 219, 234, 31, 243, 190, 240, 233, 99, 48, 194, 51, 195, 44, 133, 39, 141, 4, 20, 78, 9, 210, 35, 28, 47, 129, 228, 21, 78, 39, 130, 91, 100, 190, 17, 125, 147, 61, 65, 133, 76, 246, 13, 109, 76, 208, 97, 52, 28, 192, 14, 208, 199, 32, 48, 145, 128, 176, 150, 2, 51, 2, 24, 246, 142, 1, 183, 9, 112, 68, 75, 193, 8, 10, 76, 106, 16, 76, 28, 121, 0, 200, 18, 146, 102, 50, 153, 2, 185, 53, 25, 114, 228, 223, 184, 41, 40, 81, 225, 162, 9, 116, 176, 112, 79, 81, 225, 194, 29, 71, 247, 133, 229, 0, 105, 8, 43, 69, 192, 54, 22, 17, 4, 37, 78, 196, 26, 56, 88, 0, 245, 23, 173, 253, 253, 64, 120, 130, 65, 245, 139, 147, 168, 126, 103, 2, 89, 41, 156, 39, 228, 172, 112, 22, 17, 211, 194, 81, 22, 72, 121, 145, 125, 64, 85, 76, 246, 10, 173, 75, 178, 165, 232, 48, 64, 255, 97, 135, 22, 40, 70, 192, 68, 29, 224, 56, 3, 51, 206, 230, 79, 254, 245, 227, 7, 151, 52, 27, 28, 81, 130, 83, 237, 128, 73, 9, 76, 179, 5, 121, 64, 90, 146, 204, 152, 64, 2, 77, 38, 22, 97, 54, 153, 124, 148, 194, 184, 59, 168, 85, 225, 234, 9, 180, 178, 112, 115, 209, 104, 225, 202, 11, 216, 64, 216, 21, 112, 136, 176, 97, 96, 158, 206, 11, 130, 227, 90, 3, 203, 223, 31, 174, 5, 48, 79, 253, 2, 23, 81, 23, 215, 218, 223, 55, 147, 55, 41, 124, 243, 56, 148, 25, 234, 247, 84, 4, 6, 230, 89, 98, 198, 34, 67, 128, 124, 8, 167, 7, 169, 42, 156, 60, 132, 178, 112, 112, 5, 50, 93, 100, 250, 81, 140, 34, 43, 132, 118, 37, 217, 70, 116, 53, 65, 195, 209, 255, 22, 24, 4, 138, 25, 3, 206, 42, 224, 184, 137, 192, 176, 29, 254, 84, 159, 191, 177, 57, 240, 200, 1, 46, 169, 3, 110, 115, 58, 56, 213, 2, 231, 63, 8, 70, 41, 48, 107, 128, 168, 32, 72, 73, 102, 79, 32, 153, 38, 147, 140, 144, 155, 172, 3, 154, 82, 184, 77, 40, 90, 225, 50, 10, 244, 84, 184, 200, 2, 29, 23, 54, 0, 228, 32, 172, 14, 40, 69, 216, 54, 16, 209, 210, 53, 32, 160, 59, 97, 19, 166, 30, 55, 190, 6, 160, 119, 107, 127, 177, 0, 240, 119, 226, 196, 169, 31, 19, 18, 158, 31, 230, 42, 60, 117, 164, 65, 100, 92, 144, 36, 225, 156, 33, 130, 133, 99, 42, 144, 224, 194, 41, 71, 1, 76, 182, 5, 69, 50, 217, 58, 116, 50, 65, 147, 209, 243, 4, 130, 16, 144, 72, 11, 76, 84, 192, 89, 125, 96, 70, 112, 200, 176, 16, 241, 137, 35, 238, 5, 183, 9, 112, 68, 75, 193, 249, 11, 140, 105, 16, 204, 26, 97, 0, 25, 33, 4, 44, 201, 76, 34, 174, 73, 198, 27, 201, 47, 92, 16, 129, 238, 20, 238, 23, 170, 87, 184, 158, 168, 109, 225, 94, 163, 242, 194, 66, 128, 40, 132, 53, 2, 189, 8, 203, 7, 82, 90, 103, 13, 64, 149, 203, 215, 192, 97, 21, 139, 118, 7, 136, 242, 249, 224, 26, 216, 195, 31, 13, 170, 95, 220, 61, 234, 71, 110, 132, 131, 37, 144, 57, 225, 80, 10, 228, 181, 112, 166, 17, 119, 227, 86, 160, 48, 38, 11, 134, 238, 37, 89, 87, 52, 25, 192, 2, 112, 68, 11, 68, 35, 32, 163, 49, 224, 56, 115, 91, 139, 208, 229, 42, 252, 233, 191, 185, 43, 224, 194, 86, 166, 187, 30, 112, 164, 29, 48, 35, 129, 57, 182, 32, 9, 200, 73, 146, 233, 66, 240, 146, 204, 42, 98, 108, 28, 120, 129, 46, 20, 174, 140, 64, 155, 10, 55, 14, 101, 44, 220, 86, 20, 89, 184, 230, 2, 6, 16, 246, 3, 188, 33, 108, 21, 216, 198, 34, 130, 160, 182, 177, 6, 160, 89, 49, 184, 6, 202, 213, 19, 215, 192, 237, 5, 224, 191, 198, 167, 13, 170, 95, 156, 32, 245, 123, 174, 2, 35, 207, 64, 32, 43, 194, 73, 66, 194, 10, 167, 16, 233, 44, 156, 96, 132, 187, 200, 14, 160, 30, 38, 187, 132, 154, 153, 172, 37, 26, 155, 160, 231, 176, 0, 128, 68, 4, 68, 51, 8, 180, 85, 204, 179, 60, 244, 58, 198, 159, 249, 91, 187, 2, 46, 108, 12, 220, 230, 114, 198, 23, 3, 14, 127, 12, 204, 17, 131, 6, 8, 9, 34, 148, 100, 234, 16, 200, 36, 3, 140, 108, 23, 217, 2, 20, 164, 112, 137, 4, 250, 85, 184, 131, 232, 166, 112, 121, 5, 122, 45, 220, 122, 8, 65, 216, 21, 208, 136, 176, 97, 96, 30, 97, 47, 165, 172, 102, 188, 55, 96, 85, 66, 161, 86, 43, 148, 123, 176, 3, 230, 126, 71, 232, 96, 1, 116, 212, 47, 240, 208, 131, 234, 23, 199, 165, 126, 79, 5, 211, 18, 158, 37, 102, 44, 156, 0, 36, 67, 100, 116, 144, 42, 225, 204, 33, 139, 133, 243, 138, 40, 23, 153, 120, 148, 161, 200, 206, 160, 78, 38, 235, 135, 102, 38, 232, 51, 218, 158, 64, 19, 2, 30, 105, 129, 143, 196, 74, 174, 135, 25, 1, 244, 122, 199, 128, 219, 4, 56, 162, 30, 205, 225, 23, 152, 81, 11, 166, 140, 24, 128, 12, 15, 162, 149, 100, 26, 17, 84, 147, 169, 70, 224, 141, 123, 129, 202, 20, 174, 149, 64, 227, 132, 43, 41, 208, 86, 225, 46, 163, 230, 194, 18, 128, 28, 132, 213, 1, 165, 8, 11, 7, 34, 18, 118, 84, 138, 235, 216, 215, 0, 196, 94, 182, 175, 53, 176, 231, 223, 224, 131, 58, 234, 111, 237, 63, 168, 126, 49, 168, 126, 177, 251, 234, 71, 134, 68, 134, 12, 249, 19, 78, 39, 130, 91, 56, 220, 2, 185, 47, 178, 33, 40, 143, 201, 166, 161, 132, 38, 75, 43, 80, 233, 4, 46, 128, 41, 0, 68, 35, 214, 119, 61, 228, 56, 131, 63, 59, 198, 223, 222, 38, 120, 174, 91, 224, 218, 102, 128, 243, 49, 56, 207, 97, 154, 1, 9, 12, 177, 5, 25, 64, 66, 146, 12, 21, 34, 151, 100, 68, 145, 94, 227, 156, 163, 2, 198, 77, 65, 137, 10, 23, 13, 5, 44, 220, 80, 148, 87, 184, 218, 2, 173, 23, 118, 2, 92, 33, 108, 18, 24, 198, 242, 129, 148, 132, 125, 149, 18, 219, 212, 26, 88, 245, 141, 129, 50, 249, 216, 26, 88, 44, 0, 252, 133, 63, 1, 15, 212, 81, 191, 200, 75, 20, 190, 116, 220, 82, 221, 106, 107, 127, 31, 77, 30, 153, 240, 81, 226, 136, 125, 250, 152, 138, 240, 192, 48, 72, 207, 88, 96, 252, 25, 14, 228, 70, 56, 85, 72, 155, 112, 28, 5, 146, 42, 28, 101, 129, 148, 23, 46, 131, 64, 79, 138, 108, 20, 202, 102, 178, 156, 2, 213, 53, 104, 59, 92, 0, 160, 18, 65, 227, 12, 1, 115, 21, 208, 220, 20, 14, 185, 21, 254, 13, 254, 220, 223, 217, 33, 112, 109, 135, 184, 117, 47, 184, 205, 137, 224, 60, 11, 156, 252, 0, 205, 4, 49, 98, 128, 120, 32, 60, 73, 134, 13, 81, 52, 153, 91, 68, 218, 100, 248, 209, 139, 194, 221, 65, 173, 10, 247, 14, 149, 20, 46, 172, 64, 151, 133, 155, 14, 9, 8, 251, 1, 234, 16, 182, 10, 108, 99, 17, 65, 80, 194, 238, 74, 161, 109, 124, 13, 64, 200, 7, 59, 96, 218, 75, 1, 177, 151, 191, 89, 73, 253, 226, 196, 169, 31, 243, 22, 78, 3, 82, 34, 156, 33, 196, 171, 112, 254, 144, 203, 194, 217, 69, 166, 139, 140, 62, 90, 81, 100, 127, 80, 45, 147, 61, 68, 69, 13, 90, 141, 206, 39, 144, 197, 148, 47, 240, 161, 36, 1, 115, 245, 233, 248, 29, 110, 189, 99, 192, 109, 30, 48, 107, 61, 224, 228, 5, 166, 211, 130, 17, 35, 0, 32, 99, 131, 80, 37, 25, 66, 228, 211, 100, 152, 145, 243, 34, 235, 128, 166, 20, 110, 19, 90, 38, 92, 67, 129, 134, 10, 87, 24, 213, 22, 46, 62, 132, 32, 172, 11, 104, 68, 216, 48, 48, 143, 165, 4, 89, 9, 123, 44, 229, 54, 123, 13, 64, 182, 101, 224, 117, 214, 192, 237, 5, 208, 81, 127, 107, 255, 65, 245, 139, 59, 94, 253, 78, 27, 130, 88, 56, 169, 72, 112, 225, 148, 163, 0, 198, 61, 65, 133, 76, 246, 13, 85, 52, 89, 93, 129, 98, 39, 48, 2, 124, 1, 160, 27, 1, 37, 141, 49, 38, 122, 200, 113, 85, 254, 139, 191, 187, 91, 224, 242, 102, 128, 243, 89, 176, 202, 98, 192, 116, 48, 190, 22, 76, 31, 217, 72, 50, 78, 8, 155, 201, 100, 34, 180, 198, 241, 22, 72, 126, 225, 130, 8, 116, 71, 184, 92, 2, 189, 19, 46, 38, 10, 43, 92, 103, 129, 166, 11, 123, 0, 126, 176, 58, 160, 20, 97, 219, 192, 66, 22, 20, 196, 37, 218, 29, 32, 188, 6, 32, 70, 113, 176, 6, 14, 139, 180, 236, 186, 242, 26, 56, 172, 244, 242, 188, 215, 192, 98, 1, 248, 143, 240, 161, 29, 245, 11, 92, 196, 160, 250, 197, 86, 213, 239, 73, 96, 66, 194, 243, 195, 92, 133, 71, 142, 40, 100, 80, 144, 33, 225, 132, 33, 121, 34, 163, 137, 212, 138, 140, 53, 18, 95, 184, 21, 40, 140, 113, 181, 208, 186, 36, 91, 138, 2, 39, 217, 121, 24, 1, 64, 40, 208, 205, 32, 155, 18, 61, 220, 58, 200, 127, 57, 200, 127, 127, 36, 224, 73, 247, 193, 229, 141, 129, 59, 93, 10, 14, 115, 65, 115, 236, 131, 96, 124, 2, 243, 77, 50, 21, 2, 153, 73, 50, 102, 72, 160, 113, 92, 5, 146, 92, 56, 240, 2, 93, 40, 220, 23, 84, 169, 112, 215, 80, 195, 194, 61, 69, 127, 133, 219, 141, 226, 11, 59, 1, 174, 16, 54, 9, 12, 99, 249, 64, 74, 150, 21, 36, 102, 185, 65, 122, 99, 107, 224, 96, 7, 108, 249, 59, 66, 123, 29, 245, 143, 217, 63, 159, 88, 248, 130, 112, 161, 131, 234, 23, 27, 81, 191, 88, 85, 253, 158, 49, 102, 47, 156, 12, 36, 70, 56, 79, 200, 89, 225, 44, 34, 163, 194, 33, 22, 200, 119, 225, 14, 160, 30, 69, 182, 8, 5, 51, 217, 70, 20, 213, 160, 219, 104, 126, 2, 95, 64, 40, 45, 173, 238, 33, 175, 62, 48, 99, 114, 91, 172, 48, 239, 9, 37, 238, 8, 119, 154, 224, 124, 58, 224, 216, 167, 172, 4, 12, 23, 163, 7, 25, 24, 196, 41, 201, 248, 33, 153, 69, 102, 24, 241, 46, 92, 1, 129, 118, 20, 110, 16, 202, 85, 184, 125, 104, 165, 112, 109, 81, 103, 225, 178, 67, 2, 194, 138, 128, 58, 132, 173, 2, 219, 108, 108, 13, 220, 250, 154, 24, 182, 236, 175, 1, 168, 184, 252, 60, 186, 6, 14, 75, 190, 204, 191, 88, 0, 248, 139, 142, 250, 5, 158, 178, 163, 254, 214, 254, 131, 234, 23, 131, 234, 23, 59, 171, 126, 39, 15, 137, 44, 156, 90, 164, 185, 112, 226, 81, 134, 34, 59, 131, 58, 21, 217, 58, 20, 50, 201, 14, 163, 222, 9, 188, 0, 107, 128, 121, 198, 135, 230, 204, 129, 19, 225, 202, 201, 252, 249, 191, 183, 115, 224, 10, 167, 210, 221, 13, 56, 204, 49, 48, 151, 165, 43, 1, 115, 71, 42, 146, 12, 18, 50, 102, 50, 147, 136, 171, 113, 170, 17, 248, 194, 165, 16, 232, 75, 225, 78, 161, 107, 194, 101, 68, 73, 133, 43, 44, 208, 110, 23, 95, 192, 9, 214, 5, 52, 34, 108, 24, 152, 103, 35, 107, 96, 249, 27, 3, 135, 53, 91, 238, 29, 91, 3, 16, 248, 193, 14, 104, 214, 192, 94, 254, 166, 62, 104, 204, 254, 120, 26, 63, 61, 46, 171, 163, 126, 145, 55, 44, 124, 16, 56, 160, 190, 250, 5, 6, 224, 193, 96, 96, 158, 37, 102, 44, 60, 126, 36, 67, 56, 52, 200, 147, 112, 218, 144, 66, 225, 140, 34, 187, 133, 243, 141, 232, 23, 174, 135, 64, 115, 138, 236, 24, 234, 103, 178, 171, 168, 113, 146, 205, 135, 23, 0, 180, 2, 233, 12, 2, 127, 137, 25, 162, 135, 88, 7, 249, 175, 254, 135, 157, 3, 87, 56, 8, 238, 180, 199, 26, 91, 1, 131, 235, 239, 131, 204, 131, 64, 90, 146, 12, 24, 178, 103, 156, 82, 4, 216, 56, 231, 168, 64, 225, 154, 8, 52, 72, 184, 98, 168, 94, 225, 110, 162, 179, 194, 141, 70, 211, 133, 61, 0, 63, 88, 29, 80, 138, 176, 109, 96, 33, 219, 9, 214, 154, 183, 6, 160, 208, 131, 29, 176, 233, 151, 2, 183, 23, 64, 71, 253, 34, 31, 125, 37, 245, 139, 25, 234, 23, 56, 68, 31, 46, 14, 221, 195, 192, 144, 60, 63, 204, 85, 120, 228, 136, 130, 83, 130, 244, 8, 103, 11, 153, 19, 14, 165, 64, 94, 133, 211, 140, 160, 23, 46, 131, 64, 79, 10, 215, 73, 160, 105, 69, 118, 18, 117, 77, 178, 225, 232, 127, 130, 175, 241, 161, 149, 22, 136, 73, 76, 119, 61, 204, 152, 64, 172, 119, 18, 184, 83, 131, 195, 25, 165, 57, 240, 2, 115, 1, 57, 83, 129, 161, 39, 153, 19, 129, 20, 153, 76, 29, 2, 105, 50, 186, 72, 117, 225, 228, 163, 20, 133, 139, 131, 66, 21, 110, 28, 202, 40, 92, 85, 84, 88, 184, 224, 40, 190, 176, 19, 224, 10, 107, 4, 122, 17, 54, 15, 140, 100, 83, 193, 96, 54, 27, 140, 215, 238, 0, 81, 206, 220, 200, 26, 128, 210, 15, 118, 192, 173, 53, 176, 88, 0, 245, 71, 99, 246, 199, 131, 118, 212, 223, 218, 127, 167, 212, 239, 25, 11, 140, 223, 201, 64, 98, 132, 243, 132, 156, 9, 167, 16, 233, 20, 142, 175, 64, 178, 133, 163, 47, 208, 138, 194, 205, 65, 169, 76, 54, 16, 229, 52, 217, 100, 244, 60, 129, 29, 224, 14, 0, 239, 76, 212, 61, 100, 87, 192, 140, 43, 241, 23, 90, 254, 254, 145, 131, 11, 104, 46, 114, 37, 112, 56, 6, 39, 57, 192, 225, 137, 20, 152, 26, 56, 52, 241, 38, 15, 38, 243, 35, 144, 46, 147, 81, 68, 74, 11, 135, 89, 32, 231, 133, 187, 128, 154, 20, 238, 17, 42, 38, 92, 64, 20, 83, 184, 182, 2, 141, 118, 217, 33, 1, 97, 63, 64, 29, 86, 10, 84, 35, 6, 119, 128, 24, 220, 1, 162, 179, 3, 4, 84, 185, 100, 13, 28, 150, 112, 153, 25, 107, 160, 28, 62, 186, 6, 180, 0, 58, 234, 23, 249, 88, 126, 2, 60, 113, 71, 253, 2, 183, 116, 188, 234, 199, 188, 133, 211, 128, 148, 8, 7, 8, 217, 18, 78, 30, 18, 41, 156, 87, 228, 184, 112, 214, 209, 129, 194, 61, 65, 133, 140, 155, 134, 18, 154, 108, 44, 250, 156, 164, 2, 96, 7, 0, 179, 44, 53, 62, 252, 85, 64, 118, 75, 185, 109, 85, 56, 247, 22, 127, 241, 127, 220, 69, 112, 145, 183, 137, 59, 194, 157, 46, 5, 39, 41, 112, 224, 3, 28, 30, 153, 192, 76, 147, 76, 130, 64, 78, 76, 230, 10, 145, 51, 14, 167, 64, 110, 11, 199, 91, 32, 249, 133, 219, 129, 214, 8, 215, 74, 160, 113, 194, 125, 68, 79, 133, 91, 140, 118, 11, 119, 31, 78, 176, 46, 160, 17, 235, 5, 218, 17, 43, 173, 1, 235, 14, 26, 28, 92, 3, 27, 252, 142, 16, 36, 95, 230, 95, 44, 0, 252, 69, 171, 126, 209, 81, 255, 152, 253, 243, 54, 132, 111, 15, 183, 61, 168, 126, 113, 92, 234, 119, 98, 4, 194, 228, 156, 33, 127, 34, 3, 138, 236, 10, 39, 27, 137, 47, 220, 10, 20, 166, 200, 94, 161, 114, 38, 251, 137, 234, 154, 236, 57, 44, 144, 192, 29, 148, 75, 3, 244, 36, 160, 176, 49, 14, 156, 8, 87, 238, 3, 177, 222, 49, 224, 54, 15, 88, 113, 49, 224, 180, 5, 38, 2, 48, 80, 140, 59, 201, 132, 8, 228, 199, 100, 216, 144, 195]);
fileData4.push.apply(fileData4, [34, 19, 139, 48, 23, 14, 188, 64, 23, 132, 203, 34, 208, 35, 225, 150, 161, 128, 194, 245, 68, 109, 133, 27, 141, 178, 11, 123, 0, 126, 176, 58, 160, 20, 171, 6, 10, 178, 154, 160, 172, 242, 216, 170, 107, 0, 242, 44, 163, 142, 174, 129, 195, 90, 46, 87, 99, 13, 148, 213, 219, 53, 176, 151, 191, 241, 7, 229, 103, 138, 142, 253, 113, 65, 190, 80, 220, 64, 71, 253, 2, 71, 51, 168, 126, 177, 146, 250, 197, 108, 245, 35, 61, 194, 217, 66, 230, 132, 19, 137, 164, 138, 140, 50, 82, 46, 220, 1, 212, 163, 200, 22, 161, 96, 69, 246, 16, 21, 53, 217, 103, 180, 61, 129, 35, 96, 16, 0, 251, 64, 79, 131, 140, 185, 30, 126, 156, 206, 127, 253, 15, 118, 17, 92, 228, 74, 224, 100, 22, 52, 199, 56, 6, 38, 130, 121, 1, 204, 26, 73, 48, 153, 28, 132, 202, 100, 2, 17, 78, 227, 12, 35, 222, 133, 43, 128, 106, 20, 238, 14, 106, 37, 92, 58, 148, 81, 184, 170, 2, 45, 118, 193, 81, 124, 97, 39, 192, 21, 71, 179, 6, 32, 198, 178, 229, 216, 26, 128, 114, 15, 118, 192, 220, 151, 2, 183, 23, 64, 71, 253, 176, 127, 61, 229, 152, 253, 113, 209, 190, 25, 220, 100, 71, 253, 2, 199, 55, 168, 126, 177, 251, 234, 71, 166, 133, 67, 47, 208, 7, 225, 194, 8, 116, 169, 200, 214, 161, 144, 69, 86, 23, 173, 78, 210, 2, 112, 4, 128, 95, 96, 159, 150, 214, 245, 144, 221, 82, 32, 214, 150, 191, 212, 242, 63, 29, 7, 135, 175, 1, 23, 217, 130, 219, 92, 10, 142, 113, 226, 74, 192, 188, 48, 205, 36, 51, 32, 144, 16, 147, 137, 66, 216, 140, 51, 137, 184, 26, 167, 26, 129, 47, 220, 8, 148, 69, 184, 74, 2, 45, 19, 238, 32, 186, 41, 220, 92, 52, 218, 101, 135, 4, 132, 253, 0, 111, 108, 118, 13, 64, 122, 101, 194, 177, 53, 0, 157, 150, 99, 71, 215, 64, 88, 90, 116, 118, 128, 215, 192, 193, 2, 232, 216, 31, 15, 218, 81, 191, 192, 229, 110, 74, 253, 2, 71, 236, 163, 199, 72, 60, 42, 140, 208, 163, 197, 200, 157, 6, 164, 68, 56, 64, 8, 150, 51, 135, 44, 138, 12, 43, 114, 44, 156, 114, 164, 191, 112, 67, 208, 156, 194, 5, 19, 232, 94, 145, 45, 69, 129, 77, 182, 29, 46, 72, 96, 16, 248, 5, 172, 163, 123, 248, 209, 220, 182, 42, 132, 187, 33, 254, 242, 63, 28, 5, 31, 185, 25, 110, 221, 14, 110, 51, 193, 201, 140, 129, 163, 94, 186, 18, 48, 74, 12, 58, 201, 108, 32, 54, 137, 51, 134, 248, 153, 12, 42, 50, 44, 28, 114, 129, 252, 11, 23, 68, 160, 59, 194, 205, 66, 233, 132, 43, 137, 170, 10, 183, 24, 237, 118, 241, 33, 4, 97, 87, 192, 33, 118, 11, 156, 99, 23, 193, 81, 157, 29, 32, 32, 192, 25, 107, 0, 18, 62, 216, 1, 135, 215, 64, 57, 28, 107, 32, 255, 103, 195, 123, 245, 255, 193, 254, 254, 180, 124, 44, 209, 177, 63, 46, 177, 163, 126, 129, 155, 223, 41, 245, 59, 49, 2, 97, 114, 206, 144, 63, 225, 116, 34, 181, 34, 99, 141, 196, 11, 247, 1, 85, 41, 178, 78, 104, 90, 225, 66, 10, 116, 181, 200, 98, 119, 222, 194, 133, 41, 224, 145, 100, 158, 241, 225, 187, 98, 182, 229, 97, 237, 85, 249, 111, 254, 231, 81, 240, 145, 171, 130, 235, 156, 196, 248, 110, 192, 25, 14, 130, 89, 96, 88, 32, 71, 140, 0, 36, 153, 25, 196, 201, 100, 240, 144, 201, 34, 163, 139, 84, 11, 199, 94, 160, 17, 194, 125, 65, 149, 132, 139, 134, 2, 10, 215, 19, 181, 21, 110, 52, 202, 110, 9, 64, 14, 194, 222, 128, 79, 236, 25, 248, 167, 179, 3, 4, 228, 214, 95, 3, 208, 102, 103, 7, 140, 174, 129, 195, 222, 110, 119, 128, 40, 237, 47, 22, 0, 254, 162, 163, 126, 216, 223, 23, 129, 139, 235, 216, 31, 55, 236, 131, 192, 1, 29, 175, 250, 145, 30, 225, 108, 33, 115, 194, 137, 68, 82, 133, 115, 140, 124, 139, 44, 0, 186, 33, 178, 60, 232, 85, 225, 238, 161, 150, 38, 59, 140, 122, 155, 212, 1, 76, 1, 96, 25, 56, 168, 5, 34, 19, 43, 137, 30, 86, 109, 129, 181, 119, 7, 92, 39, 192, 109, 246, 24, 217, 10, 56, 231, 22, 76, 10, 115, 76, 114, 250, 8, 70, 146, 65, 66, 198, 10, 71, 81, 32, 165, 133, 147, 140, 144, 23, 110, 1, 10, 34, 92, 31, 129, 102, 9, 247, 14, 125, 116, 85, 5, 90, 236, 130, 163, 248, 22, 2, 68, 33, 6, 119, 128, 232, 236, 0, 1, 113, 245, 215, 0, 148, 88, 158, 92, 105, 13, 164, 147, 197, 244, 29, 32, 246, 240, 251, 142, 253, 241, 52, 29, 245, 195, 254, 190, 37, 220, 106, 71, 253, 2, 135, 184, 107, 234, 119, 254, 4, 162, 153, 193, 69, 166, 133, 19, 143, 38, 8, 87, 69, 160, 69, 133, 155, 134, 18, 22, 217, 213, 177, 47, 246, 179, 246, 2, 82, 48, 240, 8, 44, 3, 32, 41, 49, 81, 247, 240, 163, 129, 85, 55, 197, 127, 251, 143, 166, 130, 79, 220, 20, 184, 77, 131, 99, 25, 165, 57, 103, 12, 2, 96, 136, 24, 113, 146, 145, 64, 96, 76, 166, 11, 193, 43, 28, 78, 129, 220, 22, 206, 54, 98, 95, 184, 23, 232, 139, 112, 155, 80, 52, 225, 14, 162, 158, 194, 205, 69, 163, 93, 118, 72, 192, 114, 128, 52, 44, 19, 72, 198, 242, 129, 148, 250, 107, 0, 186, 43, 7, 142, 173, 129, 180, 168, 232, 236, 0, 172, 129, 50, 54, 214, 64, 185, 29, 107, 224, 246, 2, 240, 95, 231, 231, 248, 129, 242, 209, 69, 199, 254, 184, 232, 142, 250, 5, 142, 163, 163, 126, 129, 131, 30, 84, 191, 56, 50, 245, 35, 139, 194, 73, 69, 130, 133, 243, 141, 220, 23, 238, 6, 58, 83, 184, 87, 168, 92, 145, 205, 68, 105, 77, 54, 28, 229, 55, 240, 5, 108, 146, 64, 67, 83, 116, 15, 229, 21, 240, 227, 68, 32, 235, 157, 2, 151, 58, 17, 28, 75, 129, 3, 28, 224, 240, 20, 4, 198, 4, 114, 184, 24, 125, 146, 81, 65, 138, 140, 243, 134, 40, 22, 142, 171, 64, 146, 133, 163, 46, 208, 2, 225, 154, 160, 62, 194, 229, 66, 233, 132, 43, 137, 170, 10, 183, 24, 237, 118, 241, 33, 4, 139, 2, 2, 153, 183, 6, 160, 178, 242, 219, 216, 26, 128, 36, 203, 156, 88, 3, 229, 216, 177, 53, 0, 75, 183, 59, 64, 96, 7, 28, 44, 128, 86, 253, 162, 163, 126, 216, 223, 151, 149, 215, 234, 27, 192, 141, 117, 212, 47, 112, 100, 29, 245, 11, 12, 99, 80, 253, 98, 80, 253, 226, 216, 213, 239, 38, 160, 36, 133, 91, 132, 130, 21, 46, 161, 64, 63, 139, 108, 50, 74, 110, 82, 10, 2, 202, 72, 224, 26, 202, 232, 48, 112, 153, 128, 242, 250, 192, 170, 27, 225, 175, 252, 47, 43, 131, 71, 88, 31, 220, 102, 31, 28, 160, 192, 33, 183, 96, 70, 152, 96, 146, 67, 71, 36, 76, 230, 7, 209, 50, 78, 32, 194, 89, 56, 192, 2, 217, 22, 14, 63, 74, 81, 184, 53, 104, 147, 112, 215, 208, 65, 215, 19, 181, 21, 110, 52, 154, 190, 217, 53, 0, 77, 149, 187, 198, 214, 0, 4, 88, 86, 28, 91, 3, 233, 85, 177, 193, 29, 176, 87, 191, 89, 201, 254, 120, 226, 86, 253, 162, 163, 126, 129, 155, 223, 148, 250, 5, 6, 230, 65, 98, 192, 30, 60, 2, 225, 160, 32, 64, 206, 22, 50, 39, 28, 71, 196, 212, 9, 22, 8, 183, 112, 250, 209, 10, 225, 206, 160, 78, 133, 43, 39, 208, 198, 34, 123, 139, 74, 155, 236, 63, 212, 96, 96, 19, 184, 6, 64, 85, 2, 58, 27, 4, 126, 156, 8, 52, 61, 145, 191, 250, 191, 174, 12, 30, 97, 10, 184, 212, 137, 224, 88, 198, 192, 9, 99, 4, 0, 227, 195, 112, 147, 12, 3, 114, 98, 50, 84, 200, 91, 225, 76, 34, 174, 133, 35, 141, 168, 23, 238, 2, 58, 34, 220, 32, 148, 75, 184, 119, 232, 163, 171, 138, 10, 11, 183, 27, 173, 183, 13, 96, 9, 219, 3, 86, 233, 236, 0, 1, 101, 13, 174, 129, 50, 222, 216, 26, 128, 54, 59, 59, 0, 107, 160, 252, 140, 53, 80, 38, 199, 26, 176, 246, 15, 22, 64, 254, 157, 63, 33, 31, 197, 15, 157, 207, 39, 86, 181, 63, 110, 216, 7, 145, 167, 227, 35, 195, 81, 238, 148, 250, 157, 63, 129, 104, 58, 181, 72, 179, 112, 214, 209, 129, 194, 61, 65, 127, 132, 11, 38, 208, 189, 194, 253, 68, 117, 77, 246, 28, 10, 48, 176, 6, 156, 146, 64, 70, 80, 213, 32, 176, 94, 7, 88, 21, 64, 211, 59, 5, 46, 21, 224, 54, 251, 224, 244, 90, 48, 2, 12, 8, 228, 88, 49, 116, 147, 9, 65, 120, 140, 99, 38, 144, 192, 194, 41, 69, 128, 11, 39, 28, 201, 23, 174, 6, 42, 35, 92, 40, 20, 77, 184, 131, 168, 167, 107, 139, 58, 11, 55, 29, 6, 176, 25, 96, 140, 193, 29, 32, 102, 172, 129, 180, 156, 232, 236, 0, 172, 129, 50, 234, 216, 26, 128, 147, 219, 29, 32, 218, 29, 32, 22, 11, 0, 127, 212, 170, 95, 12, 218, 191, 158, 27, 246, 247, 133, 230, 213, 251, 150, 112, 171, 173, 250, 69, 71, 253, 2, 199, 125, 188, 234, 71, 22, 133, 147, 138, 4, 11, 231, 27, 185, 23, 110, 5, 218, 82, 184, 81, 131, 239, 235, 186, 141, 40, 170, 201, 86, 163, 240, 38, 237, 0, 113, 36, 48, 14, 124, 4, 160, 179, 49, 160, 200, 2, 86, 93, 147, 255, 238, 31, 207, 7, 15, 181, 38, 184, 77, 131, 51, 25, 4, 199, 219, 130, 233, 96, 118, 73, 142, 27, 73, 48, 25, 27, 36, 170, 112, 240, 4, 50, 89, 56, 183, 200, 179, 112, 224, 81, 132, 194, 77, 65, 131, 92, 46, 129, 222, 185, 146, 168, 170, 43, 140, 106, 139, 193, 29, 32, 6, 119, 128, 24, 92, 3, 229, 159, 177, 53, 0, 137, 149, 217, 176, 6, 202, 129, 99, 107, 32, 45, 42, 182, 177, 3, 14, 45, 128, 142, 253, 241, 4, 173, 250, 69, 171, 126, 209, 81, 191, 200, 179, 240, 1, 225, 224, 58, 234, 23, 24, 201, 29, 163, 126, 247, 103, 134, 247, 243, 71, 245, 81, 108, 147, 22, 128, 32, 146, 116, 10, 140, 3, 32, 172, 22, 88, 175, 128, 34, 167, 0, 71, 47, 229, 175, 253, 147, 249, 224, 161, 150, 130, 75, 157, 8, 206, 68, 224, 232, 6, 193, 249, 39, 57, 53, 129, 153, 38, 25, 3, 36, 164, 112, 144, 4, 98, 86, 56, 138, 2, 41, 21, 142, 177, 64, 194, 133, 243, 143, 94, 8, 183, 6, 109, 18, 238, 26, 58, 232, 122, 162, 182, 174, 51, 106, 46, 6, 215, 128, 117, 1, 141, 148, 91, 198, 214, 0, 4, 85, 214, 26, 91, 3, 233, 61, 177, 234, 14, 192, 26, 40, 27, 99, 13, 148, 183, 177, 6, 202, 240, 185, 6, 110, 47, 128, 35, 182, 63, 142, 160, 163, 126, 129, 195, 237, 168, 95, 96, 108, 199, 165, 126, 39, 24, 201, 22, 206, 61, 250, 32, 178, 48, 232, 146, 112, 211, 80, 194, 98, 169, 247, 179, 237, 157, 31, 221, 73, 119, 192, 44, 9, 124, 212, 2, 169, 193, 122, 125, 32, 214, 4, 142, 222, 41, 112, 169, 0, 247, 216, 1, 71, 39, 112, 182, 0, 163, 1, 57, 80, 204, 218, 100, 54, 16, 27, 227, 116, 33, 120, 133, 195, 137, 208, 22, 78, 53, 2, 47, 92, 7, 212, 68, 184, 68, 40, 151, 112, 239, 208, 71, 87, 21, 21, 118, 181, 81, 121, 171, 0, 138, 232, 175, 1, 200, 167, 140, 52, 182, 6, 160, 181, 206, 14, 192, 26, 40, 127, 142, 173, 1, 24, 184, 221, 1, 162, 221, 1, 34, 119, 192, 98, 1, 212, 239, 97, 255, 250, 76, 216, 191, 158, 3, 246, 175, 171, 129, 253, 125, 233, 121, 63, 190, 73, 220, 124, 199, 254, 56, 80, 31, 52, 6, 208, 81, 191, 192, 104, 7, 213, 47, 6, 213, 47, 142, 88, 253, 237, 151, 252, 174, 150, 64, 235, 196, 106, 222, 111, 154, 95, 164, 35, 160, 143, 4, 222, 73, 32, 44, 1, 169, 13, 2, 69, 26, 136, 117, 54, 127, 253, 159, 174, 11, 30, 112, 29, 112, 143, 5, 14, 100, 12, 156, 45, 14, 31, 96, 106, 38, 167, 44, 144, 1, 227, 180, 32, 72, 198, 121, 67, 20, 11, 103, 21, 49, 22, 14, 185, 64, 254, 93, 13, 129, 214, 184, 80, 40, 154, 112, 7, 209, 205, 205, 174, 1, 136, 165, 108, 51, 182, 6, 160, 172, 242, 24, 214, 64, 25, 111, 108, 13, 164, 51, 197, 86, 119, 192, 94, 199, 254, 120, 160, 86, 253, 162, 85, 191, 104, 213, 47, 58, 234, 23, 121, 58, 62, 50, 28, 101, 71, 253, 34, 39, 212, 87, 191, 192, 248, 119, 69, 253, 77, 97, 220, 37, 116, 172, 112, 15, 209, 207, 194, 53, 22, 104, 120, 145, 46, 128, 41, 18, 200, 37, 129, 149, 224, 172, 22, 184, 79, 64, 145, 83, 128, 160, 151, 240, 99, 107, 131, 7, 236, 130, 75, 157, 2, 14, 164, 192, 185, 181, 224, 228, 49, 151, 4, 211, 52, 57, 125, 4, 195, 56, 63, 136, 86, 225, 248, 9, 36, 83, 56, 186, 2, 169, 22, 206, 60, 186, 32, 220, 20, 52, 200, 229, 66, 233, 132, 251, 136, 158, 206, 91, 3, 144, 134, 101, 146, 134, 17, 157, 29, 48, 182, 6, 210, 114, 98, 35, 59, 0, 107, 96, 213, 29, 176, 88, 0, 248, 139, 35, 182, 63, 14, 165, 163, 126, 129, 227, 110, 213, 47, 102, 168, 95, 32, 34, 142, 14, 34, 229, 168, 33, 130, 78, 39, 82, 235, 52, 11, 4, 221, 29, 152, 253, 37, 63, 10, 89, 184, 180, 2, 125, 46, 178, 249, 144, 130, 129, 68, 146, 244, 14, 172, 4, 32, 53, 1, 247, 117, 128, 88, 15, 17, 118, 254, 27, 59, 64, 94, 15, 47, 245, 48, 184, 199, 49, 112, 104, 2, 7, 11, 114, 34, 2, 243, 74, 48, 101, 147, 145, 64, 90, 10, 39, 10, 97, 43, 188, 6, 4, 178, 42, 156, 100, 132, 92, 184, 2, 168, 134, 112, 107, 80, 40, 23, 13, 5, 20, 238, 38, 58, 235, 46, 163, 227, 131, 59, 64, 108, 106, 13, 64, 98, 101, 54, 172, 129, 114, 32, 214, 64, 217, 18, 107, 160, 188, 138, 53, 208, 217, 1, 88, 3, 101, 117, 172, 129, 197, 2, 200, 223, 139, 137, 246, 247, 19, 231, 213, 248, 18, 243, 186, 125, 51, 121, 135, 98, 85, 251, 227, 136, 59, 234, 23, 24, 222, 241, 170, 31, 201, 22, 206, 125, 71, 253, 104, 145, 232, 127, 171, 199, 21, 21, 104, 111, 225, 134, 163, 252, 6, 178, 72, 210, 47, 176, 79, 2, 109, 9, 168, 109, 16, 88, 242, 128, 125, 159, 66, 181, 171, 242, 55, 255, 217, 198, 192, 35, 175, 68, 127, 61, 224, 52, 6, 193, 169, 226, 216, 65, 14, 11, 115, 52, 24, 189, 113, 72, 4, 242, 83, 56, 99, 136, 95, 225, 124, 34, 186, 194, 193, 22, 200, 188, 235, 32, 208, 20, 151, 8, 229, 18, 253, 53, 128, 242, 138, 193, 29, 32, 6, 215, 64, 25, 99, 108, 13, 64, 59, 157, 29, 48, 182, 6, 224, 189, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 28, 90, 0, 173, 253, 235, 81, 166, 219, 31, 151, 219, 81, 63, 236, 95, 231, 2, 251, 251, 16, 113, 184, 29, 251, 99, 96, 30, 36, 6, 124, 194, 212, 127, 28, 222, 79, 143, 64, 49, 9, 220, 4, 115, 181, 64, 127, 11, 26, 99, 246, 129, 154, 59, 252, 173, 31, 223, 24, 120, 228, 14, 184, 218, 14, 99, 91, 1, 39, 214, 130, 51, 199, 68, 146, 28, 34, 230, 107, 144, 135, 194, 177, 17, 72, 84, 225, 212, 33, 144, 194, 113, 21, 72, 178, 112, 206, 145, 127, 225, 118, 160, 53, 46, 20, 138, 230, 2, 162, 152, 98, 165, 53, 80, 54, 24, 91, 3, 80, 74, 121, 102, 165, 53, 144, 78, 19, 59, 181, 3, 14, 22, 64, 253, 233, 160, 253, 241, 160, 173, 250, 197, 170, 246, 199, 205, 183, 234, 23, 29, 245, 195, 254, 30, 9, 70, 213, 81, 191, 64, 8, 142, 78, 253, 135, 67, 239, 62, 160, 39, 98, 226, 151, 252, 131, 63, 207, 227, 246, 162, 216, 5, 20, 96, 210, 23, 80, 73, 146, 246, 129, 155, 0, 212, 182, 160, 241, 224, 32, 176, 106, 2, 53, 239, 26, 184, 90, 131, 27, 28, 163, 93, 9, 56, 82, 144, 179, 16, 152, 148, 201, 201, 98, 232, 6, 33, 41, 28, 36, 129, 140, 9, 135, 80, 32, 159, 194, 233, 69, 176, 133, 99, 143, 58, 8, 55, 5, 13, 114, 185, 80, 58, 151, 17, 37, 117, 121, 81, 234, 106, 250, 216, 26, 128, 46, 202, 33, 99, 107, 32, 45, 36, 58, 59, 0, 107, 160, 140, 135, 53, 80, 110, 196, 26, 40, 139, 98, 13, 148, 111, 177, 6, 230, 237, 128, 197, 2, 56, 89, 246, 199, 161, 119, 212, 47, 48, 206, 142, 250, 5, 130, 50, 168, 126, 113, 148, 234, 71, 163, 132, 251, 182, 13, 239, 195, 26, 73, 90, 6, 14, 74, 32, 175, 41, 186, 135, 40, 11, 88, 117, 14, 255, 124, 163, 224, 193, 87, 7, 55, 88, 224, 40, 6, 193, 145, 226, 192, 147, 156, 145, 192, 4, 141, 199, 45, 144, 132, 2, 177, 41, 28, 45, 129, 212, 9, 199, 18, 113, 21, 94, 3, 2, 57, 119, 5, 80, 13, 225, 214, 160, 77, 46, 26, 10, 56, 111, 13, 64, 5, 229, 135, 177, 53, 0, 201, 148, 121, 176, 6, 202, 81, 88, 3, 131, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 140, 237, 0, 172, 129, 254, 14, 216, 107, 213, 47, 38, 218, 191, 174, 0, 246, 175, 107, 133, 253, 235, 174, 96, 255, 186, 127, 216, 223, 135, 149, 39, 232, 99, 205, 179, 22, 29, 251, 99, 132, 30, 45, 70, 222, 81, 191, 64, 152, 6, 213, 47, 54, 169, 254, 91, 85, 65, 139, 132, 59, 214, 170, 63, 203, 137, 222, 10, 212, 187, 72, 11, 64, 16, 38, 109, 2, 215, 36, 48, 20, 252, 5, 96, 64, 1, 81, 46, 231, 150, 148, 255, 118, 151, 191, 243, 47, 54, 9, 30, 28, 248, 146, 22, 224, 106, 187, 224, 40, 4, 142, 171, 5, 167, 141, 89, 152, 156, 157, 192, 100, 139, 204, 0, 226, 81, 32, 72, 133, 147, 134, 16, 22, 78, 41, 210, 43, 156, 109, 100, 222, 117, 64, 77, 132, 27, 132, 102, 205, 91, 3, 168, 121, 117, 127, 108, 13, 64, 32, 101, 149, 177, 53, 0, 47, 181, 59, 64, 28, 205, 14, 16, 99, 59, 0, 107, 160, 204, 191, 88, 0, 249, 167, 98, 125, 251, 227, 210, 91, 245, 139, 86, 253, 162, 85, 191, 232, 168, 31, 246, 247, 144, 48, 188, 77, 169, 95, 32, 112, 14, 34, 2, 234, 224, 34, 208, 206, 58, 58, 208, 249, 110, 143, 27, 37, 80, 54, 225, 54, 162, 165, 2, 101, 46, 178, 243, 208, 65, 145, 214, 128, 83, 146, 116, 16, 12, 5, 32, 56, 24, 112, 148, 125, 153, 194, 179, 5, 212, 188, 107, 224, 106, 197, 74, 139, 1, 199, 37, 112, 158, 73, 78, 65, 96, 70, 38, 103, 138, 113, 27, 167, 2, 129, 41, 16, 173, 194, 217, 67, 38, 133, 19, 139, 48, 11, 231, 28, 21, 16, 110, 7, 90, 227, 54, 161, 101, 110, 31, 90, 57, 184, 3, 196, 244, 53, 80, 198, 24, 91, 3, 233, 28, 177, 234, 14, 192, 26, 40, 19, 98, 13, 28, 217, 14, 216, 203, 223, 139, 214, 254, 245, 88, 131, 246, 199, 165, 28, 177, 253, 49, 134, 142, 250, 69, 78, 215, 35, 71, 20, 142, 87, 253, 232, 137, 112, 139, 58, 95, 242, 163, 147, 5, 218, 43, 92, 111, 129, 230, 23, 233, 8, 232, 195, 164, 107, 96, 162, 4, 254, 130, 224, 134, 105, 164, 41, 32, 214, 149, 248, 187, 255, 114, 243, 224, 41, 86, 5, 119, 39, 166, 108, 5, 28, 38, 142, 58, 201, 233, 8, 204, 206, 120, 202, 8, 128, 113, 78, 16, 161, 2, 73, 19, 142, 34, 34, 42, 28, 96, 4, 91, 44, 93, 3, 168, 143, 112, 179, 208, 184, 193, 29, 32, 6, 215, 64, 117, 124, 108, 13, 164, 37, 68, 103, 7, 96, 13, 148, 145, 176, 6, 202, 93, 88, 3, 171, 238, 0, 172, 129, 114, 44, 214, 192, 196, 29, 32, 218, 29, 112, 104, 1, 28, 129, 253, 125, 171, 121, 255, 62, 148, 60, 41, 31, 95, 158, 169, 15, 58, 79, 95, 116, 236, 143, 161, 118, 212, 47, 16, 151, 153, 234, 63, 108, 255, 35, 83, 63, 186, 90, 184, 207, 232, 121, 97, 29, 8, 152, 162, 72, 167, 192, 56, 9, 60, 5, 139, 145, 70, 133, 112, 101, 31, 120, 121, 152, 79, 108, 1, 60, 197, 16, 184, 212, 165, 224, 28, 150, 174, 4, 156, 51, 166, 96, 114, 106, 24, 168, 201, 209, 35, 21, 133, 147, 131, 68, 9, 4, 175, 112, 50, 145, 88, 225, 60, 35, 231, 179, 215, 0, 170, 39, 6, 215, 64, 245, 119, 108, 13, 64, 2, 101, 6, 172, 129, 114, 200, 216, 26, 128, 133, 218, 29, 32, 218, 29, 32, 218, 29, 32, 218, 29, 32, 182, 189, 3, 110, 47, 128, 49, 251, 227, 65, 39, 218, 191, 174, 123, 186, 253, 113, 64, 173, 250, 69, 71, 253, 176, 191, 199, 150, 179, 244, 128, 49, 248, 142, 250, 5, 34, 117, 116, 234, 63, 92, 33, 183, 75, 160, 120, 2, 253, 20, 110, 47, 90, 93, 184, 249, 144, 130, 73, 131, 64, 46, 38, 77, 4, 79, 1, 104, 14, 18, 28, 3, 110, 189, 205, 45, 35, 255, 247, 59, 131, 47, 137, 151, 26, 224, 238, 6, 193, 65, 245, 247, 65, 158, 191, 192, 116, 76, 142, 18, 83, 46, 28, 6, 129, 156, 8, 7, 73, 32, 99, 2, 57, 20, 78, 41, 2, 44, 156, 109, 100, 126, 108, 13, 184, 62, 217, 41, 225, 186, 161, 134, 213, 205, 177, 53, 128, 130, 87, 235, 199, 214, 64, 122, 67, 236, 218, 14, 16, 99, 59, 0, 107, 96, 233, 14, 56, 88, 0, 71, 102, 127, 220, 240, 70, 236, 143, 193, 180, 234, 23, 29, 245, 11, 132, 163, 163, 126, 129, 216, 29, 153, 250, 209, 52, 129, 54, 138, 172, 43, 154, 44, 220, 115, 40, 192, 216, 20, 144, 136, 73, 227, 192, 71, 135, 56, 44, 50, 104, 174, 5, 174, 60, 96, 13, 203, 255, 189, 79, 110, 5, 60, 203, 68, 198, 118, 3, 14, 161, 37, 207, 80, 240, 144, 131, 156, 11, 70, 102, 60, 92, 129, 185, 23, 142, 7, 98, 83, 56, 87, 136, 156, 64, 44, 133, 67, 139, 48, 11, 231, 28, 249, 223, 236, 26, 64, 121, 171, 209, 99, 107, 0, 90, 232, 236, 0, 172, 129, 242, 15, 214, 64, 153, 10, 107, 160, 156, 134, 53, 80, 246, 195, 26, 56, 226, 29, 176, 88, 0, 179, 237, 95, 87, 48, 104, 127, 220, 192, 206, 218, 31, 129, 112, 80, 16, 160, 142, 250, 5, 162, 57, 168, 126, 113, 52, 234, 71, 111, 133, 139, 45, 208, 249, 194, 94, 128, 50, 76, 250, 5, 234, 49, 176, 21, 92, 6, 160, 194, 149, 92, 15, 41, 15, 242, 63, 252, 196, 86, 192, 179, 180, 224, 82, 59, 204, 88, 9, 121, 188, 56, 252, 36, 135, 133, 57, 22, 30, 183, 64, 18, 10, 167, 5, 65, 18, 142, 153, 64, 2, 5, 82, 234, 0, 35, 216, 194, 153, 71, 23, 230, 173, 1, 20, 179, 218, 58, 182, 6, 80, 249, 242, 0, 214, 64, 25, 99, 108, 13, 192, 57, 237, 14, 16, 237, 14, 16, 43, 237, 0, 172, 129, 137, 59, 64, 172, 180, 3, 246, 118, 199, 254, 117, 58, 176, 127, 157, 35, 236, 95, 39, 14, 251, 215, 108, 96, 127, 15, 50, 167, 235, 145, 35, 10, 155, 82, 191, 64, 124, 183, 167, 254, 44, 36, 186, 42, 220, 100, 52, 188, 176, 5, 32, 136, 34, 61, 2, 197, 152, 84, 146, 128, 176, 18, 152, 110, 138, 238, 225, 86, 3, 41, 239, 20, 184, 84, 131, 91, 27, 164, 93, 9, 56, 195, 36, 143, 29, 67, 49, 57, 65, 12, 183, 112, 0, 4, 178, 33, 28, 30, 129, 92, 9, 167, 14, 129, 20, 72, 172, 112, 158, 145, 115, 231, 31, 189, 232, 175, 1, 148, 78, 76, 95, 3, 213, 241, 177, 53, 144, 150, 16, 71, 179, 3, 196, 49, 238, 128, 197, 2, 200, 63, 58, 2, 251, 215, 221, 14, 218, 31, 135, 213, 170, 95, 180, 234, 23, 173, 250, 69, 171, 126, 209, 81, 191, 200, 172, 56, 64, 8, 214, 129, 250, 215, 251, 158, 143, 163, 143, 74, 184, 42, 168, 16, 58, 38, 220, 64, 52, 83, 184, 183, 168, 116, 225, 206, 67, 7, 69, 90, 3, 66, 41, 82, 61, 2, 98, 50, 112, 89, 154, 110, 16, 24, 83, 192, 173, 43, 240, 147, 163, 252, 253, 105, 224, 179, 110, 131, 39, 154, 12, 110, 173, 192, 9, 0, 28, 32, 142, 55, 201, 113, 96, 88, 198, 51, 197, 184, 11, 71, 66, 32, 45, 194, 113, 66, 204, 132, 67, 136, 112, 10, 4, 88, 56, 219, 200, 188, 187, 128, 142, 12, 238, 0, 49, 184, 6, 170, 149, 99, 107, 32, 123, 45, 54, 178, 3, 176, 6, 202, 75, 88, 3, 235, 236, 0, 49, 182, 3, 176, 6, 214, 217, 1, 123, 249, 155, 149, 236, 159, 87, 32, 78, 186, 253, 17, 145, 142, 250, 5, 194, 119, 34, 212, 239, 134, 163, 252, 133, 5, 33, 224, 142, 34, 45, 3, 1, 25, 56, 43, 117, 6, 160, 66, 1, 99, 246, 184, 165, 99, 88, 219, 252, 143, 247, 108, 11, 60, 81, 178, 234, 134, 192, 237, 11, 28, 17, 200, 131, 197, 177, 39, 158, 17, 198, 103, 60, 101, 4, 160, 112, 72, 16, 30, 225, 104, 9, 164, 206, 129, 20, 200, 42, 194, 44, 6, 119, 128, 24, 220, 1, 98, 112, 13, 84, 227, 198, 214, 0, 106, 219, 217, 1, 88, 3, 229, 7, 172, 129, 50, 201, 216, 26, 72, 17, 117, 118, 0, 214, 192, 238, 236, 128, 219, 11, 224, 200, 236, 143, 219, 94, 199, 254, 53, 3, 216, 223, 3, 203, 41, 122, 180, 57, 111, 135, 0, 225, 232, 216, 127, 234, 23, 254, 125, 245, 31, 182, 255, 49, 170, 223, 58, 16, 48, 69, 97, 161, 64, 52, 38, 197, 36, 210, 89, 0, 190, 131, 16, 135, 105, 60, 43, 32, 229, 157, 2, 151, 42, 166, 47, 6, 156, 15, 78, 47, 201, 3, 199, 56, 140, 7, 39, 48, 211, 194, 115, 71, 36, 10, 103, 6, 89, 18, 78, 26, 18, 40, 156, 79, 228, 22, 193, 22, 43, 173, 129, 106, 211, 216, 26, 200, 62, 138, 234, 41, 214, 64, 53, 122, 108, 13, 164, 19, 68, 187, 3, 196, 196, 29, 32, 218, 29, 32, 198, 118, 0, 214, 192, 209, 239, 128, 131, 5, 80, 127, 138, 5, 48, 102, 127, 44, 128, 214, 254, 117, 197, 27, 180, 127, 157, 233, 160, 253, 49, 146, 86, 253, 162, 85, 191, 24, 180, 191, 131, 146, 233, 113, 164, 16, 181, 97, 245, 119, 237, 191, 113, 245, 187, 141, 104, 169, 112, 135, 209, 237, 194, 253, 135, 23, 10, 187, 3, 90, 49, 233, 160, 116, 83, 2, 163, 193, 119, 45, 80, 167, 128, 94, 39, 242, 15, 62, 181, 69, 240, 92, 19, 193, 125, 45, 93, 9, 56, 58, 28, 108, 146, 131, 192, 140, 10, 143, 82, 96, 202, 133, 147, 128, 132, 8, 71, 8, 209, 18, 14, 30, 2, 41, 156, 85, 100, 24, 33, 119, 248, 179, 17, 162, 154, 50, 182, 6, 80, 183, 234, 224, 216, 26, 200, 22, 139, 211, 29, 80, 228, 14, 88, 44, 128, 221, 177, 127, 157, 209, 160, 253, 113, 196, 27, 177, 63, 162, 208, 170, 95, 28, 168, 127, 35, 95, 248, 31, 14, 250, 160, 250, 5, 106, 227, 58, 161, 102, 110, 32, 154, 41, 220, 91, 244, 89, 184, 237, 176, 64, 97, 83, 64, 34, 69, 186, 102, 236, 93, 92, 152, 11, 94, 59, 196, 97, 39, 10, 72, 115, 12, 24, 121, 128, 79, 15, 240, 63, 173, 14, 30, 225, 0, 60, 215, 97, 112, 169, 29, 112, 239, 60, 156, 195, 228, 145, 226, 192, 77, 78, 7, 131, 43, 60, 92, 129, 185, 11, 7, 3, 129, 17, 142, 147, 64, 210, 28, 66, 132, 83, 56, 183, 200, 51, 210, 222, 95, 3, 168, 82, 245, 107, 108, 13, 100, 67, 69, 103, 7, 96, 13, 148, 13, 176, 6, 202, 27, 88, 3, 101, 24, 172, 129, 114, 17, 214, 192, 196, 29, 32, 182, 189, 3, 202, 228, 99, 59, 224, 246, 2, 200, 191, 62, 181, 127, 113, 96, 255, 195, 193, 234, 168, 95, 100, 94, 251, 234, 23, 40, 3, 170, 226, 10, 161, 90, 110, 29, 218, 40, 92, 84, 116, 88, 184, 225, 104, 190, 176, 23, 160, 140, 34, 205, 146, 198, 73, 210, 80, 144, 87, 2, 235, 193, 137, 45, 208, 235, 1, 183, 92, 12, 95, 31, 47, 157, 245, 128, 155, 26, 4, 39, 131, 115, 75, 242, 168, 49, 5, 227, 121, 97, 148, 133, 199, 141, 24, 20, 206, 9, 242, 35, 156, 46, 164, 206, 129, 68, 80, 197, 224, 14, 16, 72, 254, 224, 14, 16, 157, 53, 128, 2, 86, 43, 177, 6, 170, 191, 99, 107, 0, 6, 104, 119, 128, 104, 119, 128, 56, 161, 59, 32, 13, 47, 74, 251, 123, 83, 236, 47, 166, 216, 95, 172, 105, 127, 28, 214, 68, 251, 215, 60, 96, 255, 154, 28, 236, 95, 51, 134, 253, 43, 13, 176, 191, 163, 147, 121, 114, 200, 16, 190, 86, 253, 226, 64, 253, 179, 190, 231, 179, 65, 245, 187, 207, 232, 185, 176, 8, 4, 28, 33, 44, 17, 145, 114, 49, 105, 34, 72, 42, 73, 175, 193, 122, 0, 222, 92, 176, 186, 232, 255, 225, 189, 219, 5, 79, 183, 148, 193, 173, 128, 27, 7, 121, 98, 2, 231, 105, 242, 252, 49, 26, 227, 9, 98, 184, 133, 167, 143, 96, 8, 199, 6, 113, 18, 78, 26, 18, 232, 112, 34, 180, 98, 112, 13, 160, 2, 98, 112, 13, 84, 143, 176, 6, 170, 113, 99, 107, 32, 59, 43, 142, 102, 7, 136, 177, 29, 128, 53, 176, 141, 29, 144, 102, 22, 211, 119, 192, 98, 1, 228, 31, 221, 73, 246, 199, 32, 91, 245, 139, 86, 253, 162, 85, 191, 232, 168, 95, 100, 58, 29, 89, 68, 121, 27, 234, 119, 27, 209, 82, 225, 14, 163, 219, 194, 205, 135, 17, 10, 91, 99, 240, 251, 60, 233, 29, 40, 201, 164, 191, 96, 183, 4, 90, 20, 176, 231, 24, 144, 114, 242, 63, 127, 102, 187, 224, 233, 0, 174, 115, 144, 118, 37, 224, 88, 64, 30, 38, 206, 217, 228, 80, 48, 175, 194, 51, 197, 172, 133, 195, 32, 144, 19, 71, 72, 32, 93, 14, 30, 2, 233, 160, 34, 192, 14, 54, 2, 143, 58, 84, 71, 198, 214, 64, 182, 76, 172, 186, 3, 176, 6, 170, 251, 127, 246, 176, 16, 202, 18, 88, 3, 119, 234, 14, 88, 44, 128, 252, 125, 125, 4, 22, 192, 142, 216, 191, 78, 118, 208, 254, 24, 204, 17, 219, 31, 161, 60, 80, 255, 26, 95, 248, 163, 57, 98, 80, 253, 98, 179, 234, 183, 35, 250, 222, 135, 122, 76, 122, 10, 10, 75, 224, 62, 200, 177, 5, 134, 45, 32, 229, 221, 1, 215, 89, 224, 142, 90, 112, 38, 56, 49, 147, 39, 140, 195, 55, 30, 147, 192, 4, 197, 237, 17, 119, 55, 1, 50, 35, 156, 40, 36, 109, 171, 107, 32, 27, 36, 170, 89, 88, 3, 213, 65, 172, 129, 106, 43, 215, 192, 208, 14, 16, 37, 129, 212, 66, 103, 7, 96, 13, 220, 1, 59, 96, 96, 1, 228, 39, 220, 169, 246, 175, 169, 195, 254, 149, 15, 216, 223, 97, 202, 132, 57, 118, 153, 69, 113, 96, 255, 195, 193, 157, 174, 126, 129, 194, 108, 74, 253, 238, 54, 58, 47, 82, 10, 41, 139, 194, 54, 129, 104, 140, 149, 4, 91, 37, 105, 55, 184, 15, 64, 157, 2, 134, 93, 202, 63, 250, 236, 118, 193, 211, 77, 1, 119, 132, 91, 6, 121, 86, 2, 39, 105, 124, 236, 2, 19, 41, 60, 56, 12, 180, 240, 196, 17, 6, 225, 168, 32, 66, 194, 233, 66, 234, 230, 173, 1, 84, 0, 5, 169, 214, 140, 173, 1, 244, 174, 221, 1, 98, 96, 7, 172, 247, 237, 160, 117, 118, 128, 56, 250, 29, 80, 246, 238, 239, 128, 219, 11, 96, 138, 253, 69, 187, 0, 118, 217, 254, 53, 197, 233, 246, 71, 92, 90, 245, 139, 142, 250, 97, 127, 135, 24, 225, 70, 244, 59, 234, 23, 40, 149, 203, 134, 18, 186, 156, 40, 173, 251, 140, 158, 11, 91, 160, 253, 146, 223, 250, 16, 48, 75, 97, 251, 64, 76, 38, 45, 6, 199, 37, 144, 35, 212, 57, 6, 164, 156, 252, 47, 247, 109, 23, 60, 29, 192, 117, 14, 130, 91, 198, 129, 36, 121, 134, 2, 39, 92, 120, 16, 2, 51, 42, 60, 71, 140, 88, 220, 14, 64, 179, 9, 28, 27, 196, 73, 56, 105, 72, 160, 147, 137, 196, 118, 118, 192, 196, 53, 144, 157, 18, 199, 184, 3, 254, 212, 248, 14, 192, 26, 216, 246, 14, 40, 235, 78, 220, 1, 105, 117, 145, 59, 224, 96, 1, 108, 220, 254, 88, 0, 187, 102, 127, 140, 127, 35, 246, 71, 76, 79, 186, 250, 225, 145, 194, 174, 129, 134, 138, 67, 194, 106, 116, 102, 96, 64, 248, 17, 192, 176, 5, 164, 188, 35, 224, 34, 11, 220, 78, 11, 78, 3, 103, 101, 242, 108, 113, 236, 133, 71, 35, 48, 53, 225, 177, 10, 76, 92, 56, 15, 200, 137, 35, 132, 104, 9, 167, 14, 105, 28, 220, 1, 162, 179, 6, 80, 10, 84, 166, 122, 132, 53, 80, 141, 195, 26, 168, 110, 98, 13, 84, 139, 177, 6, 170, 239, 88, 3, 187, 179, 3, 202, 150, 19, 119, 64, 218, 88, 76, 217, 1, 101, 251, 218, 1, 139, 5, 208, 218, 95, 180, 11, 96, 138, 253, 197, 116, 251, 99, 1, 108, 195, 254, 24, 231, 58, 246, 119, 188, 50, 115, 98, 27, 246, 71, 121, 182, 161, 254, 236, 191, 72, 65, 192, 29, 194, 102, 129, 116, 138, 116, 19, 180, 101, 210, 113, 48, 32, 128, 64, 5, 60, 219, 231, 127, 221, 50, 120, 186, 165, 224, 94, 4, 238, 55, 201, 83, 18, 56, 67, 227, 211, 198, 32, 10, 15, 75, 96, 142, 194, 83, 70, 0, 132, 179, 129, 204, 56, 78, 136, 153, 24, 220, 1, 98, 112, 13, 84, 182, 215, 89, 3, 104, 89, 187, 3, 68, 187, 3, 68, 187, 3, 6, 223, 18, 40, 63, 12, 190, 45, 156, 110, 89, 103, 7, 148, 229, 118, 100, 7, 44, 22, 64, 253, 127, 88, 0, 211, 237, 143, 5, 48, 197, 254, 98, 131, 246, 175, 73, 108, 208, 254, 149, 149, 41, 246, 175, 252, 193, 254, 149, 84, 216, 31, 225, 174, 196, 195, 254, 174, 7, 106, 179, 17, 245, 187, 219, 171, 125, 201, 31, 42, 129, 101, 132, 53, 36, 96, 168, 34, 93, 6, 211, 37, 240, 35, 4, 58, 8, 164, 156, 252, 227, 45, 131, 167, 75, 112, 145, 131, 224, 102, 113, 20, 73, 158, 30, 14, 214, 248, 252, 49, 154, 194, 179, 227, 88, 55, 186, 6, 28, 69, 68, 180, 114, 59, 182, 6, 50, 249, 226, 116, 7, 140, 237, 128, 116, 169, 152, 178, 3, 218, 5, 32, 198, 118, 192, 193, 2, 200, 191, 152, 98, 127, 177, 85, 251, 139, 41, 246, 23, 179, 237, 95, 179, 31, 180, 63, 162, 211, 170, 95, 180, 234, 23, 173, 250, 5, 98, 221, 170, 95, 116, 212, 47, 80, 173, 35, 80, 191, 221, 1, 167, 8, 75, 71, 192, 71, 69, 154, 11, 82, 51, 240, 32, 44, 9, 224, 89, 1, 41, 239, 8, 184, 200, 2, 247, 2, 242, 16, 112, 68, 73, 30, 41, 78, 187, 240, 68, 48, 172, 194, 211, 196, 148, 133, 51, 128, 108, 56, 54, 136, 147, 99, 134, 248, 245, 215, 0, 130, 93, 105, 199, 26, 168, 94, 244, 215, 64, 245, 11, 107, 160, 154, 136, 53, 176, 206, 14, 16, 71, 179, 3, 210, 129, 98, 202, 14, 40, 199, 206, 216, 1, 237, 2, 16, 7, 11, 32, 255, 168, 181, 191, 104, 23, 192, 116, 251, 99, 1, 220, 205, 246, 119, 196, 51, 247, 46, 3, 74, 210, 81, 191, 64, 253, 6, 213, 47, 86, 86, 255, 45, 83, 8, 72, 68, 216, 50, 131, 223, 223, 183, 161, 32, 47, 147, 178, 131, 7, 1, 28, 10, 207, 246, 249, 39, 219, 7, 207, 216, 1, 55, 34, 112, 167, 73, 158, 15, 142, 206, 248, 144, 5, 206, 191, 240, 140, 48, 59, 225, 201, 114, 232, 155, 94, 3, 8, 109, 37, 121, 108, 13, 100, 23, 196, 210, 29, 32, 218, 29, 32, 198, 118, 192, 95, 56, 92, 231, 129, 29, 208, 121, 91, 248, 176, 70, 86, 218, 1, 233, 46, 177, 241, 29, 144, 238, 21, 243, 118, 192, 98, 1, 228, 239, 69, 187, 0, 230, 217, 95, 236, 184, 253, 17, 130, 137, 246, 175, 156, 193, 254, 149, 72, 216, 31, 33, 110, 213, 47, 58, 234, 23, 40, 82, 71, 253, 2, 21, 117, 117, 179, 207, 194, 85, 135, 2, 172, 126, 88, 67, 216, 41, 219, 243, 62, 44, 9, 141, 14, 2, 41, 155, 127, 186, 125, 240, 140, 6, 87, 216, 130, 219, 196, 33, 36, 121, 104, 56, 207, 194, 199, 46, 48, 17, 225, 145, 97, 148, 98, 227, 107, 0, 129, 172, 148, 142, 173, 1, 68, 125, 219, 59, 64, 140, 237, 0, 172, 129, 29, 217, 1, 237, 2, 16, 83, 118, 64, 187, 0, 196, 148, 29, 112, 104, 1, 204, 179, 191, 104, 23, 192, 20, 251, 139, 118, 1, 156, 80, 251, 35, 160, 136, 239, 170, 246, 71, 121, 92, 170, 108, 218, 241, 170, 223, 246, 129, 152, 138, 244, 23, 212, 102, 96, 67, 184, 18, 64, 181, 2, 82, 222, 5, 112, 133, 2, 119, 1, 242, 246, 113, 56, 38, 79, 18, 135, 92, 120, 16, 24, 80, 225, 9, 98, 178, 179, 215, 0, 194, 38, 58, 107, 0, 49, 174, 108, 99, 13, 84, 11, 176, 6, 170, 47, 88, 3, 168, 216, 106, 59, 96, 242, 143, 6, 165, 43, 196, 6, 119, 64, 153, 109, 198, 14, 40, 151, 206, 216, 1, 237, 2, 16, 216, 1, 183, 23, 192, 20, 251, 139, 118, 1, 76, 183, 63, 22, 192, 116, 251, 99, 1, 108, 219, 254, 149, 152, 65, 251, 35, 112, 75, 237, 239, 40, 103, 190, 29, 250, 108, 130, 232, 216, 31, 5, 235, 171, 31, 223, 243, 113, 165, 81, 245, 41, 234, 135, 80, 132, 141, 3, 19, 137, 180, 21, 68, 86, 164, 242, 4, 132, 152, 192, 164, 80, 109, 135, 31, 219, 62, 120, 198, 14, 184, 11, 220, 99, 146, 199, 130, 67, 51, 62, 91, 28, 123, 225, 185, 96, 94, 194, 211, 196, 148, 151, 174, 129, 76, 81, 49, 184, 6, 42, 141, 88, 3, 149, 219, 177, 53, 128, 228, 183, 59, 64, 180, 59, 64, 100, 209, 170, 125, 88, 3, 187, 191, 3, 210, 120, 98, 250, 14, 72, 199, 138, 121, 59, 96, 173, 5, 48, 207, 254, 98, 158, 253, 197, 116, 251, 99, 1, 236, 142, 253, 17, 235, 142, 250, 97, 127, 87, 40, 123, 229, 178, 161, 132, 27, 81, 191, 77, 49, 251, 75, 126, 56, 171, 72, 187, 65, 124, 6, 174, 132, 73, 91, 32, 101, 243, 207, 182, 12, 158, 206, 224, 242, 6, 201, 27, 196, 237, 39, 62, 43, 28, 163, 241, 105, 99, 10, 194, 99, 194, 248, 132, 135, 139, 161, 175, 186, 6, 14, 146, 182, 202, 119, 132, 50, 213, 226, 142, 220, 1, 229, 165, 25, 59, 160, 76, 56, 99, 7, 140, 45, 128, 149, 118, 192, 193, 2, 88, 199, 254, 75, 23, 192, 20, 251, 139, 118, 1, 76, 177, 191, 152, 110, 127, 44, 128, 205, 218, 31, 49, 93, 213, 254, 40, 73, 171, 126, 209, 83, 255, 200, 247, 124, 80, 233, 205, 170, 223, 38, 130, 161, 10, 139, 76, 192, 113, 69, 10, 81, 64, 151, 9, 108, 43, 224, 229, 99, 7, 151, 39, 112, 11, 32, 111, 28, 199, 98, 242, 0, 113, 182, 194, 135, 47, 48, 23, 225, 169, 97, 154, 30, 52, 2, 48, 182, 6, 42, 69, 99, 107, 0, 81, 236, 236, 0, 172, 129, 202, 60, 214, 64, 181, 3, 107, 160, 122, 132, 53, 144, 189, 19, 155, 220, 1, 183, 68, 145, 246, 40, 159, 76, 220, 1, 233, 43, 49, 125, 7, 164, 33, 203, 153, 179, 119, 64, 122, 187, 93, 0, 194, 59, 96, 177, 0, 166, 216, 95, 140, 45, 128, 188, 160, 233, 246, 199, 2, 56, 181, 127, 178, 178, 253, 15, 151, 211, 165, 69, 153, 7, 213, 47, 54, 171, 254, 212, 22, 140, 86, 164, 251, 160, 197, 4, 62, 133, 112, 199, 248, 241, 45, 131, 167, 235, 128, 235, 199, 221, 37, 121, 32, 56, 171, 194, 231, 137, 163, 46, 60, 11, 204, 72, 120, 130, 152, 236, 188, 53, 144, 25, 19, 7, 217, 59, 188, 6, 42, 165, 99, 107, 0, 57, 111, 119, 128, 216, 236, 14, 192, 26, 88, 115, 7, 164, 103, 196, 148, 29, 208, 46, 0, 49, 125, 7, 164, 75, 203, 174, 27, 217, 1, 43, 47, 128, 121, 246, 23, 99, 11, 32, 111, 126, 138, 253, 69, 187, 0, 166, 216, 95, 28, 187, 253, 43, 211, 176, 127, 165, 31, 246, 175, 158, 192, 254, 46, 85, 54, 205, 245, 203, 78, 138, 65, 245, 47, 249, 194, 255, 176, 29, 132, 197, 1, 161, 216, 53, 112, 144, 176, 164, 4, 252, 85, 216, 113, 208, 95, 146, 198, 132, 79, 91, 160, 230, 226, 159, 111, 25, 60, 157, 193, 181, 129, 188, 47, 129, 187, 54, 62, 34, 129, 211, 43, 124, 194, 56, 124, 225, 209, 96, 100, 194, 211, 196, 148, 251, 107, 0, 17, 170, 92, 141, 173, 129, 76, 166, 216, 248, 14, 16, 219, 222, 1, 233, 135, 137, 59, 160, 252, 115, 104, 7, 236, 59, 106, 233, 14, 104, 23, 128, 152, 190, 3, 210, 186, 99, 11, 96, 226, 14, 216, 91, 199, 254, 75, 23, 192, 60, 251, 139, 118, 1, 76, 183, 63, 22, 192, 20, 251, 139, 99, 177, 63, 202, 208, 170, 95, 180, 234, 23, 7, 246, 63, 92, 69, 87, 20, 213, 237, 169, 191, 121, 155, 215, 178, 128, 68, 236, 23, 120, 71, 216, 74, 176, 85, 97, 163, 65, 118, 38, 205, 8, 111, 38, 16, 174, 128, 154, 103, 240, 47, 246, 193, 31, 206, 3, 215, 134, 139, 7, 121, 203, 56, 141, 194, 135, 38, 112, 158, 194, 7, 46, 48, 11, 143, 9, 227, 19, 158, 44, 38, 62, 184, 3, 68, 103, 13, 100, 234, 68, 111, 7, 28, 94, 3, 149, 112, 172, 129, 35, 216, 1, 217, 107, 177, 40, 251, 225, 250, 175, 185, 3, 210, 75, 179, 119, 64, 187, 0, 196, 58, 59, 32, 29, 222, 91, 0, 249, 167, 98, 250, 2, 200, 139, 152, 103, 127, 209, 46, 128, 121, 246, 23, 59, 107, 127, 132, 123, 35, 246, 207, 6, 138, 93, 83, 191, 253, 5, 181, 21, 105, 64, 200, 49, 129, 85, 225, 220, 65, 202, 233, 19, 249, 151, 251, 224, 15, 251, 224, 233, 198, 192, 149, 227, 190, 76, 158, 3, 142, 168, 240, 49, 10, 156, 176, 240, 249, 99, 46, 30, 25, 70, 41, 6, 119, 128, 24, 92, 3, 157, 29, 128, 53, 80, 153, 196, 26, 168, 244, 46, 214, 64, 68, 186, 179, 3, 176, 6, 142, 125, 7, 148, 61, 6, 118, 192, 97, 237, 180, 59, 160, 93, 0, 98, 222, 14, 152, 178, 0, 196, 236, 29, 192, 5, 176, 41, 251, 139, 41, 11, 96, 158, 253, 69, 187, 0, 166, 216, 95, 180, 11, 96, 55, 237, 239, 242, 100, 163, 92, 179, 236, 158, 11, 137, 162, 246, 236, 127, 184, 252, 171, 170, 223, 222, 129, 143, 68, 10, 11, 46, 19, 233, 59, 168, 208, 164, 55, 97, 85, 0, 53, 23, 229, 244, 237, 129, 167, 43, 112, 97, 32, 239, 72, 224, 126, 141, 79, 6, 135, 86, 248, 84, 113, 224, 194, 227, 192, 152, 60, 62, 140, 85, 12, 174, 129, 131, 108, 172, 178, 6, 50, 135, 162, 221, 1, 162, 221, 1, 226, 100, 237, 128, 180, 138, 152, 183, 3, 218, 5, 32, 54, 181, 3, 230, 45, 0, 177, 151, 191, 105, 237, 47, 230, 45, 128, 117, 236, 191, 116, 1, 76, 183, 63, 22, 192, 116, 251, 99, 1, 108, 207, 254, 213, 132, 65, 251, 163, 72, 173, 250, 69, 71, 253, 176, 191, 235, 141, 218, 111, 92, 253, 48, 151, 176, 218, 4, 172, 87, 164, 31, 97, 207, 4, 218, 21, 176, 243, 68, 62, 49, 2, 62, 108, 58, 184, 42, 92, 118, 146, 119, 138, 67, 48, 62, 43, 28, 163, 240, 33, 11, 156, 191, 71, 131, 145, 121, 148, 24, 113, 205, 125, 108, 13, 100, 114, 196, 17, 237, 128, 161, 111, 7, 109, 111, 7, 84, 247, 211, 6, 98, 202, 14, 40, 219, 164, 127, 4, 119, 192, 190, 181, 150, 238, 128, 41, 11, 64, 108, 111, 7, 44, 89, 0, 155, 181, 255, 196, 5, 144, 71, 54, 221, 254, 131, 11, 32, 7, 57, 197, 254, 226, 206, 176, 63, 10, 124, 96, 255, 195, 85, 183, 2, 160, 134, 109, 168, 31, 142, 43, 210, 134, 16, 165, 73, 177, 66, 187, 45, 7, 42, 63, 115, 246, 147, 103, 206, 254, 196, 253, 231, 62, 251, 200, 249, 135, 158, 184, 248, 248, 151, 94, 253, 194, 87, 94, 123, 250, 235, 111, 124, 237, 91, 111, 125, 227, 185, 183, 191, 245, 221, 119, 158, 255, 222, 229, 23, 94, 122, 183, 229, 59, 47, 92, 126, 246, 249, 183, 191, 254, 237, 183, 190, 242, 205, 55, 191, 252, 181, 215, 159, 124, 250, 210, 163, 95, 120, 245, 254, 199, 47, 124, 234, 193, 151, 245, 104, 122, 76, 61, 242, 148, 61, 145, 215, 44, 112, 71, 38, 111, 31, 39, 35, 124, 116, 2, 167, 42, 124, 230, 152, 133, 199, 132, 241, 245, 215, 64, 166, 66, 28, 164, 229, 240, 26, 168, 92, 97, 13, 84, 2, 177, 6, 42, 171, 88, 3, 71, 188, 3, 170, 179, 51, 118, 64, 89, 226, 208, 14, 184, 245, 165, 100, 234, 165, 221, 1, 92, 0, 107, 255, 47, 3, 210, 159, 235, 44, 128, 254, 14, 184, 189, 0, 166, 216, 95, 172, 179, 0, 242, 38, 231, 217, 95, 140, 45, 128, 28, 207, 116, 251, 99, 1, 28, 189, 253, 81, 137, 237, 217, 31, 37, 239, 168, 95, 64, 31, 171, 170, 63, 229, 5, 175, 9, 91, 15, 66, 52, 105, 79, 184, 53, 41, 215, 255, 228, 253, 231, 206, 60, 118, 225, 115, 95, 190, 36, 107, 63, 255, 226, 229, 243, 23, 175, 190, 241, 214, 7, 87, 222, 255, 240, 195, 15, 63, 250, 232, 163, 143, 63, 254, 248, 255, 87, 172, 250, 75, 159, 225, 207, 213, 227, 124, 112, 253, 230, 229, 119, 111, 92, 122, 253, 253, 151, 94, 126, 239, 217, 239, 188, 173, 245, 240, 200, 231, 95, 185, 247, 225, 243, 90, 12, 186, 6, 92, 88, 146, 247, 34, 112, 167, 133, 15, 68, 224, 172, 132, 79, 18, 135, 44, 124, 254, 152, 75, 127, 13, 96, 232, 149, 132, 177, 53, 128, 44, 181, 59, 64, 12, 236, 128, 161, 151, 2, 7, 59, 96, 232, 45, 129, 236, 197, 102, 119, 64, 118, 89, 76, 223, 1, 105, 143, 242, 201, 192, 14, 8, 11, 137, 177, 29, 144, 78, 155, 178, 0, 196, 102, 119, 64, 90, 125, 173, 5, 176, 61, 251, 139, 41, 11, 96, 29, 251, 15, 46, 128, 140, 194, 20, 251, 139, 12, 220, 177, 216, 191, 250, 6, 251, 87, 51, 97, 255, 234, 48, 236, 239, 194, 67, 4, 29, 245, 11, 40, 198, 234, 129, 146, 108, 43, 88, 76, 216, 113, 208, 95, 145, 150, 132, 67, 141, 140, 255, 201, 51, 231, 62, 243, 240, 249, 199, 191, 248, 234, 215, 158, 125, 75, 46, 150, 235, 175, 125, 112, 179, 68, 127, 148, 191, 106, 61, 220, 188, 249, 241, 123, 87, 110, 188, 114, 233, 253, 239, 188, 120, 89, 43, 225, 193, 39, 46, 222, 243, 192, 203, 157, 125, 144, 247, 136, 219, 47, 124, 68, 56, 58, 225, 131, 197, 129, 11, 207, 2, 51, 234, 236, 128, 177, 53, 144, 57, 17, 59, 190, 3, 170, 125, 43, 237, 128, 118, 1, 136, 133, 10, 194, 12, 98, 108, 7, 164, 103, 202, 60, 233, 34, 193, 29, 112, 220, 47, 2, 68, 127, 7, 28, 44, 128, 41, 246, 23, 219, 91, 0, 155, 178, 191, 24, 91, 0, 57, 224, 41, 246, 23, 237, 2, 200, 168, 141, 217, 31, 11, 96, 182, 253, 171, 63, 131, 246, 71, 253, 90, 245, 139, 86, 253, 162, 163, 126, 145, 166, 56, 26, 245, 167, 19, 161, 203, 66, 210, 215, 87, 217, 15, 60, 126, 241, 233, 103, 222, 248, 222, 185, 247, 222, 190, 124, 93, 95, 218, 175, 164, 251, 250, 42, 254, 22, 31, 107, 91, 72, 220, 215, 111, 124, 116, 253, 250, 205, 224, 163, 27, 7, 175, 24, 234, 215, 193, 199, 79, 255, 165, 143, 213, 167, 107, 27, 233, 85, 194, 183, 159, 127, 231, 201, 167, 46, 233, 245, 129, 214, 21, 110, 199, 248, 174, 113, 32, 133, 79, 12, 39, 41, 124, 206, 56, 255, 193, 29, 32, 58, 107, 0, 49, 232, 236, 0, 172, 129, 131, 29, 48, 244, 237, 160, 204, 234, 145, 237, 128, 108, 165, 200, 194, 78, 217, 1, 101, 131, 244, 131, 224, 14, 24, 123, 17, 48, 237, 27, 65, 105, 182, 114, 221, 145, 237, 128, 141, 45, 128, 163, 180, 191, 152, 183, 0, 230, 217, 95, 180, 11, 96, 85, 251, 139, 233, 246, 199, 2, 56, 118, 251, 67, 16, 27, 81, 191, 45, 38, 32, 56, 97, 3, 194, 140, 133, 212, 121, 223, 163, 23, 244, 101, 181, 190, 204, 127, 247, 189, 27, 82, 246, 82, 27, 235, 35, 164, 96, 153, 253, 242, 187, 55, 94, 125, 109, 241, 189, 154, 111, 61, 255, 206, 215, 190, 249, 230, 151, 190, 242, 218, 19, 95, 122, 245, 145, 39, 47, 62, 240, 216, 133, 207, 62, 124, 254, 211, 15, 156, 251, 212, 253, 231, 238, 57, 51, 128, 254, 252, 222, 7, 95, 190, 239, 145, 243, 15, 61, 126, 241, 177, 207, 191, 242, 249, 167, 46, 61, 253, 181, 215, 191, 254, 173, 183, 158, 127, 241, 242, 203, 23, 175, 188, 241, 230, 7, 87, 174, 126, 248, 225, 205, 197, 250, 89, 122, 53, 250, 0, 93, 201, 235, 111, 94, 251, 246, 119, 223, 121, 252, 75, 175, 126, 234, 193, 209, 87, 6, 62, 7, 156, 143, 240, 233, 225, 96, 197, 224, 14, 16, 131, 107, 160, 166, 137, 53, 80, 115, 199, 26, 168, 132, 140, 173, 129, 12, 216, 81, 236, 128, 253, 238, 204, 216, 1, 217, 89, 49, 111, 7, 112, 1, 28, 249, 55, 130, 54, 181, 0, 68, 103, 7, 44, 22, 192, 152, 253, 143, 113, 1, 108, 214, 254, 75, 23, 192, 170, 246, 23, 237, 2, 152, 98, 127, 177, 109, 251, 87, 87, 97, 127, 23, 59, 219, 110, 5, 164, 23, 68, 199, 254, 208, 205, 82, 245, 195, 104, 194, 190, 131, 7, 11, 125, 177, 255, 224, 19, 23, 191, 241, 237, 183, 164, 78, 125, 73, 222, 241, 172, 191, 226, 214, 71, 190, 120, 238, 221, 103, 158, 125, 243, 201, 47, 95, 146, 226, 63, 189, 144, 251, 89, 241, 147, 247, 109, 24, 61, 230, 167, 206, 156, 251, 204, 131, 47, 107, 151, 104, 169, 60, 251, 157, 183, 181, 21, 46, 191, 187, 252, 21, 137, 174, 243, 234, 251, 31, 158, 187, 112, 229, 75, 95, 125, 253, 51, 139, 151, 5, 188, 107, 225, 99, 193, 113, 9, 31, 38, 14, 217, 135, 143, 161, 212, 164, 198, 214, 0, 102, 221, 238, 0, 49, 113, 7, 136, 177, 29, 144, 107, 96, 253, 29, 144, 157, 18, 171, 238, 128, 118, 1, 136, 225, 29, 16, 150, 16, 99, 59, 32, 157, 83, 22, 74, 47, 181, 11, 224, 216, 191, 17, 52, 115, 1, 228, 67, 28, 175, 253, 197, 58, 11, 32, 135, 58, 207, 254, 34, 227, 181, 85, 251, 139, 109, 216, 31, 37, 239, 168, 31, 246, 183, 80, 32, 154, 13, 170, 127, 241, 77, 158, 207, 201, 251, 111, 235, 171, 108, 249, 244, 64, 156, 205, 47, 121, 86, 91, 225, 173, 183, 63, 120, 241, 236, 187, 79, 63, 243, 198, 195, 79, 92, 252, 244, 3, 47, 111, 195, 245, 211, 209, 74, 184, 239, 225, 243, 122, 133, 161, 165, 117, 254, 149, 171, 122, 137, 32, 221, 31, 92, 110, 243, 75, 215, 175, 141, 165, 181, 241, 197, 175, 190, 190, 255, 13, 34, 158, 131, 240, 41, 225, 244, 124, 176, 56, 240, 154, 130, 192, 116, 78, 204, 14, 136, 46, 136, 41, 59, 160, 93, 0, 98, 213, 29, 48, 188, 0, 142, 252, 27, 65, 105, 194, 211, 5, 112, 64, 187, 0, 182, 103, 127, 49, 101, 1, 100, 176, 166, 216, 95, 180, 11, 224, 104, 236, 143, 210, 174, 106, 127, 40, 163, 163, 126, 1, 25, 173, 170, 254, 79, 156, 57, 171, 175, 136, 159, 122, 230, 141, 87, 94, 123, 255, 198, 141, 209, 175, 163, 111, 222, 252, 248, 157, 203, 215, 95, 120, 233, 221, 47, 126, 229, 181, 51, 143, 156, 151, 115, 97, 225, 29, 65, 171, 232, 211, 15, 156, 123, 248, 137, 139, 95, 251, 230, 155, 23, 94, 185, 250, 254, 181, 253, 239, 22, 13, 253, 210, 159, 107, 85, 232, 142, 30, 253, 226, 171, 63, 249, 192, 192, 251, 4, 62, 49, 156, 100, 127, 13, 96, 76, 53, 59, 172, 129, 154, 50, 214, 64, 229, 1, 107, 160, 146, 131, 53, 176, 210, 14, 200, 12, 79, 220, 1, 213, 145, 220, 1, 199, 251, 102, 0, 23, 192, 42, 47, 2, 14, 237, 128, 93, 125, 17, 176, 119, 18, 237, 47, 54, 181, 0, 214, 183, 191, 104, 23, 192, 116, 251, 99, 1, 28, 139, 253, 45, 133, 52, 133, 232, 216, 31, 2, 178, 152, 32, 44, 139, 12, 130, 251, 228, 254, 151, 252, 207, 125, 247, 157, 247, 174, 220, 24, 252, 146, 121, 241, 197, 254, 141, 143, 94, 123, 227, 218, 215, 191, 245, 150, 148, 250, 233, 251, 119, 84, 250, 99, 104, 25, 124, 230, 161, 151, 63, 255, 212, 37, 89, 254, 221, 247, 134, 239, 81, 191, 62, 252, 240, 227, 75, 175, 95, 211, 10, 212, 11, 130, 246, 127, 97, 224, 211, 195, 169, 118, 118, 128, 192, 188, 218, 29, 32, 218, 29, 32, 118, 106, 7, 100, 119, 102, 239, 128, 108, 241, 216, 2, 24, 216, 1, 97, 12, 177, 206, 14, 72, 143, 157, 46, 128, 141, 45, 128, 237, 217, 95, 172, 186, 0, 230, 217, 95, 28, 189, 253, 171, 225, 83, 236, 95, 214, 128, 253, 173, 152, 244, 206, 170, 234, 255, 137, 251, 207, 61, 250, 133, 87, 95, 122, 249, 189, 15, 62, 24, 126, 99, 247, 195, 15, 63, 122, 227, 173, 107, 95, 255, 246, 91, 15, 62, 126, 241, 83, 39, 205, 251, 131, 220, 251, 224, 203, 79, 126, 249, 210, 139, 103, 223, 29, 251, 6, 145, 254, 240, 242, 187, 215, 191, 241, 237, 183, 238, 123, 100, 224, 251, 66, 62, 73, 156, 112, 103, 13, 228, 212, 196, 58, 59, 64, 108, 114, 7, 236, 39, 188, 221, 1, 51, 222, 12, 168, 222, 109, 100, 7, 164, 19, 202, 18, 233, 141, 121, 11, 64, 112, 7, 236, 228, 139, 128, 197, 2, 200, 63, 218, 77, 251, 31, 217, 2, 216, 148, 253, 151, 46, 128, 233, 246, 199, 2, 216, 134, 253, 161, 134, 86, 253, 162, 85, 191, 88, 85, 253, 143, 125, 241, 213, 115, 231, 175, 92, 191, 49, 240, 93, 254, 143, 247, 191, 43, 242, 221, 239, 93, 126, 236, 11, 175, 124, 250, 129, 59, 193, 251, 64, 175, 9, 62, 251, 240, 249, 167, 190, 246, 250, 43, 151, 22, 223, 239, 58, 184, 237, 248, 165, 19, 208, 235, 161, 111, 126, 231, 237, 251, 30, 189, 48, 182, 6, 112, 212, 157, 29, 128, 53, 80, 51, 197, 26, 56, 198, 29, 144, 201, 175, 46, 204, 222, 1, 217, 199, 254, 2, 16, 83, 119, 64, 120, 67, 204, 219, 1, 92, 0, 59, 249, 34, 224, 100, 44, 128, 60, 214, 227, 178, 191, 152, 190, 0, 50, 184, 211, 237, 63, 184, 0, 178, 78, 99, 246, 199, 2, 24, 179, 63, 170, 190, 61, 251, 67, 94, 159, 60, 115, 238, 161, 39, 46, 126, 239, 220, 123, 31, 92, 191, 121, 96, 187, 248, 117, 243, 230, 199, 111, 189, 253, 193, 51, 207, 190, 121, 230, 145, 243, 199, 251, 142, 238, 209, 240, 105, 45, 194, 207, 191, 242, 194, 75, 239, 190, 127, 109, 224, 53, 80, 189, 26, 248, 218, 179, 111, 222, 251, 16, 191, 41, 84, 103, 139, 53, 80, 83, 24, 91, 3, 152, 227, 216, 14, 192, 26, 152, 189, 3, 42, 159, 153, 88, 177, 194, 14, 136, 142, 12, 44, 128, 109, 126, 35, 40, 205, 80, 174, 72, 123, 108, 123, 1, 172, 191, 3, 78, 23, 192, 161, 241, 108, 99, 1, 108, 202, 254, 98, 108, 1, 100, 73, 166, 216, 95, 76, 183, 63, 22, 192, 68, 251, 151, 71, 96, 127, 75, 39, 77, 100, 61, 165, 179, 164, 176, 207, 62, 114, 254, 217, 239, 188, 125, 245, 234, 135, 173, 236, 164, 254, 215, 222, 184, 166, 47, 138, 63, 243, 208, 203]);
fileData4.push.apply(fileData4, [176, 228, 29, 207, 61, 103, 206, 61, 248, 248, 133, 231, 190, 251, 142, 94, 247, 140, 157, 204, 231, 127, 234, 181, 246, 45, 226, 118, 7, 136, 35, 216, 1, 149, 43, 145, 97, 155, 178, 3, 42, 201, 185, 3, 230, 191, 25, 48, 121, 1, 156, 184, 29, 144, 98, 156, 177, 0, 196, 188, 29, 176, 151, 191, 57, 181, 127, 6, 37, 3, 212, 218, 95, 204, 91, 0, 243, 236, 47, 218, 5, 176, 65, 251, 151, 23, 6, 237, 15, 173, 180, 234, 23, 173, 250, 133, 228, 37, 133, 189, 241, 214, 7, 237, 55, 190, 111, 126, 244, 177, 254, 252, 233, 103, 222, 248, 204, 131, 119, 157, 250, 147, 253, 53, 112, 241, 59, 47, 94, 126, 255, 253, 129, 53, 112, 253, 250, 205, 23, 206, 190, 251, 192, 227, 23, 241, 29, 161, 227, 221, 1, 153, 55, 49, 125, 7, 100, 194, 219, 5, 32, 22, 11, 96, 251, 223, 8, 58, 93, 0, 233, 252, 211, 5, 112, 192, 170, 11, 96, 179, 246, 95, 186, 0, 230, 217, 95, 28, 139, 253, 245, 133, 255, 125, 143, 94, 144, 215, 62, 248, 128, 223, 243, 169, 239, 116, 127, 227, 91, 111, 221, 247, 240, 121, 216, 240, 174, 229, 83, 247, 159, 123, 244, 201, 87, 206, 158, 127, 175, 125, 119, 68, 187, 243, 237, 119, 174, 127, 241, 171, 175, 227, 165, 64, 157, 57, 214, 64, 77, 7, 107, 96, 165, 29, 144, 57, 17, 83, 118, 64, 187, 0, 196, 98, 1, 204, 126, 51, 32, 250, 50, 111, 1, 136, 205, 236, 128, 112, 136, 224, 14, 216, 55, 207, 201, 218, 1, 187, 178, 0, 78, 186, 253, 197, 102, 23, 64, 22, 99, 158, 253, 69, 187, 0, 166, 216, 95, 204, 182, 191, 53, 148, 110, 170, 55, 123, 95, 125, 237, 253, 155, 55, 249, 53, 173, 4, 247, 210, 185, 247, 30, 254, 220, 69, 125, 229, 11, 9, 158, 114, 239, 3, 47, 127, 233, 43, 175, 191, 249, 246, 192, 11, 38, 237, 209, 231, 94, 184, 252, 217, 71, 134, 223, 21, 200, 137, 136, 93, 216, 1, 149, 216, 204, 240, 192, 2, 24, 217, 1, 167, 47, 2, 196, 150, 22, 128, 192, 14, 184, 189, 0, 142, 204, 254, 226, 164, 47, 128, 163, 180, 191, 152, 178, 0, 118, 196, 254, 247, 60, 248, 242, 83, 207, 188, 241, 238, 123, 55, 240, 13, 13, 125, 225, 127, 249, 221, 235, 79, 63, 243, 198, 189, 119, 247, 247, 124, 250, 220, 115, 230, 236, 3, 143, 93, 248, 238, 75, 151, 175, 55, 239, 150, 127, 120, 243, 227, 11, 175, 94, 125, 232, 201, 87, 230, 125, 59, 104, 246, 14, 104, 23, 128, 216, 216, 14, 216, 218, 139, 128, 41, 11, 96, 210, 14, 8, 147, 156, 46, 128, 211, 5, 112, 192, 81, 46, 128, 117, 236, 191, 116, 1, 172, 105, 255, 52, 145, 248, 244, 67, 47, 127, 227, 219, 111, 189, 127, 109, 72, 94, 175, 92, 125, 228, 201, 87, 78, 191, 240, 159, 130, 118, 164, 54, 101, 187, 68, 245, 202, 224, 141, 183, 62, 120, 252, 75, 175, 234, 53, 86, 30, 251, 236, 29, 80, 211, 159, 177, 3, 86, 88, 0, 221, 29, 112, 4, 239, 6, 103, 145, 179, 224, 83, 23, 192, 137, 122, 17, 112, 82, 23, 192, 169, 253, 139, 41, 246, 23, 211, 23, 64, 214, 120, 186, 253, 177, 0, 38, 218, 255, 222, 135, 95, 126, 246, 249, 183, 219, 31, 244, 188, 126, 253, 163, 239, 188, 112, 249, 204, 35, 167, 223, 241, 95, 129, 79, 221, 127, 238, 115, 95, 124, 245, 181, 55, 22, 255, 154, 196, 193, 57, 238, 255, 210, 74, 120, 231, 242, 245, 39, 159, 122, 109, 179, 59, 32, 83, 81, 57, 217, 228, 14, 136, 60, 99, 1, 136, 211, 5, 80, 108, 100, 1, 136, 85, 119, 192, 90, 11, 96, 35, 246, 23, 167, 11, 160, 152, 178, 0, 54, 101, 127, 49, 182, 0, 82, 25, 147, 237, 127, 254, 91, 207, 191, 211, 218, 95, 175, 6, 190, 241, 173, 183, 238, 194, 159, 242, 92, 159, 123, 206, 156, 125, 248, 137, 139, 231, 95, 185, 170, 215, 79, 7, 167, 185, 255, 75, 59, 224, 237, 203, 215, 159, 120, 234, 210, 210, 29, 208, 46, 0, 49, 125, 7, 100, 126, 166, 47, 128, 118, 7, 204, 123, 17, 176, 67, 239, 4, 132, 79, 4, 118, 192, 29, 178, 0, 102, 216, 95, 220, 145, 11, 32, 227, 178, 251, 246, 23, 243, 22, 192, 60, 251, 139, 118, 1, 44, 190, 243, 243, 220, 91, 215, 154, 31, 248, 121, 255, 218, 135, 95, 251, 230, 155, 119, 249, 15, 122, 174, 201, 131, 143, 95, 56, 119, 225, 10, 254, 133, 212, 143, 62, 254, 248, 205, 183, 63, 120, 236, 139, 175, 126, 114, 245, 29, 208, 46, 0, 177, 217, 29, 144, 137, 173, 12, 103, 170, 177, 0, 196, 224, 2, 88, 236, 128, 104, 208, 113, 46, 128, 109, 188, 8, 216, 55, 94, 187, 3, 210, 147, 167, 11, 224, 208, 9, 98, 1, 108, 201, 254, 34, 227, 178, 251, 11, 96, 123, 246, 23, 237, 2, 104, 237, 127, 207, 3, 231, 158, 122, 230, 141, 171, 239, 127, 120, 32, 167, 91, 191, 78, 237, 191, 17, 238, 217, 223, 1, 23, 94, 185, 138, 31, 169, 250, 232, 163, 143, 47, 189, 254, 254, 67, 79, 92, 196, 127, 103, 102, 222, 14, 56, 202, 5, 32, 176, 3, 218, 23, 1, 119, 254, 2, 216, 232, 139, 128, 116, 242, 201, 91, 0, 51, 236, 47, 78, 23, 64, 177, 189, 5, 48, 197, 254, 159, 60, 179, 248, 137, 207, 183, 47, 95, 199, 219, 149, 31, 92, 191, 249, 173, 231, 223, 249, 236, 195, 167, 246, 223, 0, 247, 156, 57, 251, 200, 147, 175, 188, 246, 250, 53, 252, 120, 232, 141, 15, 63, 122, 241, 220, 187, 159, 121, 228, 124, 78, 164, 93, 0, 98, 215, 118, 0, 22, 128, 192, 2, 16, 199, 184, 3, 210, 24, 39, 98, 1, 172, 186, 3, 182, 187, 0, 242, 114, 151, 218, 95, 156, 184, 5, 144, 129, 187, 219, 236, 143, 5, 112, 223, 99, 23, 94, 190, 120, 5, 223, 164, 254, 240, 195, 143, 206, 158, 191, 114, 255, 163, 23, 32, 178, 83, 102, 243, 169, 251, 207, 61, 249, 229, 75, 151, 223, 229, 162, 125, 255, 218, 205, 175, 124, 227, 205, 79, 61, 248, 114, 14, 165, 221, 1, 167, 11, 32, 75, 157, 101, 31, 92, 0, 43, 239, 128, 147, 182, 0, 132, 119, 192, 252, 5, 48, 104, 255, 147, 181, 0, 102, 216, 255, 46, 95, 0, 41, 26, 121, 231, 107, 207, 190, 137, 111, 253, 127, 92, 223, 158, 254, 252, 43, 119, 195, 63, 235, 118, 148, 124, 230, 161, 151, 191, 254, 45, 190, 209, 162, 211, 126, 235, 237, 15, 30, 126, 242, 149, 221, 255, 70, 208, 170, 111, 5, 159, 164, 5, 48, 235, 69, 192, 9, 88, 0, 249, 16, 176, 191, 216, 193, 5, 144, 67, 90, 106, 127, 113, 162, 23, 192, 241, 218, 95, 198, 145, 119, 228, 122, 57, 232, 192, 70, 251, 191, 244, 53, 233, 87, 191, 241, 230, 233, 255, 218, 107, 27, 60, 240, 216, 133, 243, 175, 240, 245, 214, 245, 27, 31, 125, 231, 197, 203, 247, 62, 188, 228, 27, 65, 199, 190, 0, 22, 59, 32, 226, 141, 5, 32, 176, 0, 196, 210, 29, 48, 246, 239, 131, 102, 103, 119, 118, 1, 136, 165, 59, 224, 136, 22, 192, 160, 253, 119, 121, 1, 12, 218, 255, 164, 44, 128, 141, 216, 95, 28, 239, 2, 248, 244, 67, 47, 127, 243, 59, 252, 169, 255, 155, 55, 63, 190, 248, 234, 85, 121, 10, 230, 58, 101, 35, 124, 234, 254, 115, 95, 120, 250, 181, 43, 87, 15, 189, 223, 190, 248, 95, 6, 188, 123, 253, 209, 47, 28, 122, 17, 80, 243, 106, 119, 64, 78, 249, 14, 88, 0, 98, 112, 1, 76, 223, 1, 59, 190, 0, 4, 118, 192, 221, 178, 0, 242, 224, 96, 127, 177, 179, 11, 96, 169, 253, 197, 29, 176, 0, 62, 161, 175, 70, 63, 119, 241, 245, 55, 249, 182, 228, 251, 215, 62, 252, 169, 103, 222, 184, 247, 78, 252, 207, 185, 236, 8, 247, 63, 122, 190, 253, 169, 208, 122, 203, 253, 211, 15, 239, 214, 59, 1, 153, 222, 157, 93, 0, 98, 112, 7, 164, 55, 118, 106, 1, 8, 236, 128, 59, 97, 1, 228, 161, 212, 49, 229, 193, 237, 200, 2, 88, 106, 127, 177, 227, 11, 96, 35, 246, 23, 139, 31, 253, 252, 218, 235, 248, 209, 79, 45, 131, 215, 223, 184, 246, 224, 227, 23, 225, 172, 83, 54, 200, 167, 31, 56, 247, 244, 215, 222, 120, 191, 57, 249, 215, 222, 184, 118, 230, 241, 11, 57, 163, 99, 95, 0, 171, 238, 128, 157, 90, 0, 3, 59, 32, 220, 178, 83, 11, 64, 96, 7, 236, 250, 2, 200, 27, 174, 35, 200, 67, 217, 145, 5, 0, 251, 139, 29, 95, 0, 75, 237, 47, 54, 181, 0, 238, 125, 228, 252, 243, 223, 187, 140, 127, 187, 248, 250, 245, 143, 158, 123, 225, 157, 211, 127, 228, 121, 219, 60, 244, 185, 139, 111, 53, 111, 189, 92, 185, 250, 225, 147, 67, 255, 219, 224, 156, 227, 142, 47, 0, 129, 29, 176, 91, 11, 160, 251, 34, 96, 167, 22, 128, 192, 14, 216, 149, 5, 80, 183, 151, 55, 188, 83, 11, 32, 35, 178, 83, 11, 96, 169, 253, 197, 81, 46, 128, 51, 143, 93, 88, 252, 107, 207, 135, 191, 255, 163, 23, 4, 122, 89, 112, 34, 254, 115, 190, 247, 156, 57, 123, 239, 3, 139, 255, 32, 215, 231, 190, 248, 234, 19, 95, 190, 244, 216, 23, 94, 57, 243, 232, 133, 147, 242, 31, 160, 63, 243, 232, 249, 151, 94, 126, 15, 223, 5, 186, 246, 193, 205, 175, 127, 251, 173, 79, 63, 180, 238, 119, 129, 118, 106, 1, 8, 236, 128, 157, 93, 0, 39, 226, 39, 65, 211, 240, 183, 23, 128, 213, 95, 210, 79, 245, 215, 163, 20, 245, 184, 245, 76, 69, 61, 119, 93, 77, 81, 215, 87, 87, 92, 88, 250, 69, 221, 100, 221, 118, 81, 7, 81, 71, 83, 212, 97, 213, 241, 21, 117, 160, 37, 253, 84, 127, 205, 160, 168, 169, 212, 156, 138, 154, 92, 205, 178, 168, 233, 214, 188, 23, 222, 223, 87, 127, 198, 162, 130, 82, 84, 116, 42, 76, 69, 197, 171, 2, 87, 84, 4, 43, 148, 69, 74, 191, 248, 59, 251, 246, 255, 187, 183, 188, 191, 80, 255, 190, 253, 255, 222, 45, 239, 47, 212, 191, 111, 255, 191, 127, 203, 251, 11, 245, 239, 219, 255, 31, 88, 253, 251, 246, 255, 135, 70, 234, 223, 183, 255, 63, 50, 82, 255, 190, 253, 171, 174, 69, 21, 184, 42, 109, 210, 251, 69, 137, 160, 212, 80, 148, 44, 74, 31, 69, 9, 229, 19, 197, 153, 179, 15, 61, 113, 241, 242, 187, 215, 15, 220, 115, 235, 215, 123, 87, 110, 236, 254, 79, 127, 222, 251, 224, 203, 95, 252, 169, 215, 206, 191, 114, 85, 198, 252, 232, 163, 197, 151, 209, 197, 205, 155, 31, 191, 251, 222, 141, 239, 190, 116, 89, 183, 176, 227, 155, 224, 179, 15, 189, 252, 108, 243, 246, 251, 141, 27, 31, 233, 226, 63, 179, 255, 31, 12, 40, 114, 7, 20, 185, 3, 138, 220, 1, 69, 174, 129, 34, 215, 64, 177, 88, 3, 251, 59, 192, 241, 91, 172, 129, 253, 29, 224, 136, 46, 214, 192, 126, 116, 15, 168, 53, 112, 43, 222, 11, 106, 13, 220, 170, 192, 130, 90, 3, 183, 106, 178, 160, 214, 64, 180, 233, 111, 31, 222, 4, 34, 215, 64, 145, 107, 160, 200, 53, 80, 100, 235, 115, 13, 20, 185, 6, 138, 92, 3, 69, 174, 129, 162, 164, 100, 71, 229, 26, 40, 114, 13, 20, 185, 6, 138, 92, 3, 69, 174, 129, 34, 215, 64, 145, 107, 160, 200, 53, 80, 120, 13, 20, 94, 3, 123, 207, 60, 127, 229, 235, 224, 187, 87, 190, 1, 94, 184, 242, 77, 240, 226, 149, 103, 193, 247, 174, 124, 235, 48, 223, 126, 233, 48, 103, 175, 60, 7, 206, 93, 249, 14, 120, 249, 202, 243, 224, 252, 149, 239, 54, 188, 208, 240, 98, 195, 247, 26, 94, 58, 204, 217, 109, 114, 110, 35, 92, 216, 81, 244, 229, 63, 190, 2, 173, 31, 255, 127, 232, 115, 59, 253, 243, 63, 15, 60, 118, 225, 236, 249, 247, 110, 28, 190, 242, 252, 165, 77, 160, 215, 49, 95, 223, 237, 127, 189, 78, 59, 236, 43, 95, 127, 3, 255, 230, 182, 118, 217, 149, 171, 31, 94, 120, 245, 42, 38, 181, 43, 32, 216, 115, 65, 203, 54, 8, 228, 32, 96, 15, 1, 195, 8, 88, 72, 192, 84, 210, 23, 132, 38, 197, 65, 122, 210, 32, 196, 40, 85, 66, 158, 223, 18, 135, 237, 42, 223, 194, 192, 114, 50, 44, 45, 111, 195, 228, 114, 123, 170, 94, 242, 223, 59, 72, 208, 233, 175, 211, 95, 107, 252, 210, 87, 211, 151, 94, 127, 255, 129, 199, 119, 119, 1, 232, 11, 231, 111, 62, 247, 118, 251, 159, 168, 108, 127, 233, 165, 204, 147, 95, 190, 180, 179, 175, 3, 62, 253, 192, 185, 47, 127, 149, 239, 192, 159, 254, 58, 253, 53, 239, 215, 233, 2, 56, 253, 181, 129, 95, 90, 0, 175, 238, 246, 2, 184, 239, 145, 243, 223, 125, 233, 221, 27, 205, 127, 116, 183, 253, 181, 255, 102, 198, 27, 59, 251, 102, 134, 46, 236, 75, 95, 121, 237, 116, 1, 156, 254, 218, 200, 175, 189, 247, 174, 124, 120, 215, 114, 101, 10, 87, 79, 33, 215, 22, 255, 157, 146, 67, 239, 0, 47, 126, 6, 244, 205, 107, 15, 238, 240, 2, 88, 252, 115, 58, 79, 13, 252, 115, 58, 248, 181, 248, 223, 178, 93, 186, 186, 203, 63, 204, 122, 111, 253, 36, 232, 181, 195, 255, 115, 176, 253, 127, 130, 73, 91, 1, 147, 58, 133, 117, 30, 2, 90, 184, 171, 216, 251, 189, 251, 111, 255, 254, 190, 253, 55, 126, 127, 191, 249, 139, 103, 255, 192, 254, 27, 191, 127, 208, 252, 165, 179, 127, 40, 126, 230, 231, 15, 239, 191, 253, 251, 71, 226, 103, 126, 254, 232, 254, 219, 191, 127, 44, 127, 230, 231, 240, 15, 125, 254, 201, 99, 249, 153, 159, 248, 177, 159, 191, 188, 255, 14, 112, 189, 247, 187, 120, 251, 119, 255, 29, 224, 191, 18, 239, 253, 254, 213, 252, 169, 255, 253, 119, 128, 255, 90, 252, 216, 207, 95, 223, 127, 7, 248, 111, 152, 31, 59, 251, 55, 247, 223, 1, 254, 91, 230, 199, 23, 111, 82, 29, 188, 241, 123, 248, 237, 223, 197, 27, 191, 183, 88, 188, 253, 251, 137, 253, 55, 126, 111, 177, 120, 251, 247, 39, 246, 223, 248, 61, 252, 246, 239, 226, 189, 223, 124, 7, 184, 222, 251, 205, 119, 128, 235, 189, 223, 124, 7, 248, 204, 217, 127, 28, 252, 147, 224, 159, 238, 243, 99, 193, 63, 219, 231, 199, 131, 127, 190, 207, 191, 56, 204, 191, 220, 231, 19, 183, 248, 228, 253, 231, 30, 253, 194, 171, 239, 93, 185, 113, 224, 158, 91, 191, 46, 191, 119, 253, 145, 39, 94, 129, 173, 118, 10, 237, 128, 207, 125, 241, 213, 11, 175, 92, 29, 124, 29, 160, 197, 32, 171, 62, 255, 226, 229, 7, 30, 187, 176, 203, 111, 101, 127, 102, 255, 191, 187, 137, 127, 20, 232, 198, 135, 31, 125, 239, 220, 123, 159, 125, 244, 130, 199, 36, 106, 112, 152, 102, 141, 56, 135, 94, 49, 200, 96, 84, 84, 156, 156, 76, 148, 2, 230, 247, 129, 139, 122, 55, 184, 222, 7, 46, 234, 221, 224, 122, 31, 184, 200, 247, 129, 77, 197, 62, 139, 80, 213, 200, 178, 228, 91, 193, 197, 237, 183, 130, 247, 75, 183, 120, 43, 184, 126, 34, 232, 86, 49, 23, 111, 5, 223, 234, 236, 130, 122, 43, 248, 86, 175, 23, 196, 187, 193, 170, 255, 226, 173, 224, 248, 161, 32, 249, 97, 241, 86, 240, 45, 105, 44, 56, 252, 86, 112, 145, 111, 5, 23, 249, 86, 176, 200, 183, 130, 139, 124, 43, 184, 200, 183, 130, 139, 131, 119, 131, 111, 57, 115, 65, 189, 27, 124, 75, 170, 11, 234, 221, 224, 91, 226, 93, 80, 239, 6, 223, 146, 243, 130, 122, 55, 248, 150, 189, 23, 239, 9, 215, 187, 193, 251, 122, 95, 188, 33, 92, 239, 6, 255, 249, 187, 254, 199, 64, 111, 15, 254, 244, 199, 64, 247, 169, 159, 15, 169, 159, 24, 41, 234, 103, 72, 234, 167, 74, 138, 251, 31, 191, 240, 198, 91, 215, 240, 34, 64, 95, 109, 125, 225, 233, 215, 118, 255, 135, 41, 117, 133, 15, 63, 113, 241, 171, 223, 120, 243, 133, 151, 222, 61, 255, 202, 213, 139, 175, 94, 125, 249, 194, 149, 231, 94, 120, 231, 75, 95, 121, 253, 204, 35, 231, 119, 255, 191, 90, 124, 223, 35, 231, 117, 229, 216, 97, 155, 250, 31, 3, 231, 79, 254, 20, 149, 162, 204, 85, 37, 45, 179, 87, 105, 204, 124, 86, 98, 29, 96, 81, 145, 206, 144, 87, 236, 179, 8, 85, 141, 44, 75, 213, 39, 11, 229, 159, 252, 41, 170, 131, 217, 202, 234, 105, 54, 183, 186, 156, 237, 206, 214, 231, 79, 254, 20, 51, 116, 47, 96, 252, 233, 186, 79, 31, 150, 33, 45, 76, 81, 10, 77, 169, 150, 102, 83, 188, 165, 226, 148, 115, 233, 58, 5, 238, 159, 252, 41, 202, 249, 71, 253, 191, 3, 16, 187, 182, 0, 198, 118, 192, 78, 45, 0, 129, 29, 112, 188, 11, 224, 179, 143, 158, 255, 222, 203, 252, 113, 154, 15, 62, 184, 249, 205, 111, 191, 125, 178, 254, 235, 143, 247, 236, 255, 111, 2, 240, 135, 59, 206, 131, 143, 95, 184, 244, 250, 251, 31, 53, 255, 35, 140, 47, 125, 245, 245, 159, 124, 160, 247, 31, 8, 91, 106, 127, 177, 131, 11, 32, 219, 84, 253, 202, 198, 237, 200, 2, 128, 253, 197, 78, 45, 128, 242, 121, 26, 254, 56, 23, 64, 238, 128, 157, 93, 0, 2, 59, 96, 167, 22, 128, 152, 184, 3, 178, 204, 155, 90, 0, 131, 255, 16, 244, 205, 155, 31, 95, 120, 229, 244, 95, 130, 219, 46, 122, 249, 242, 249, 167, 46, 233, 197, 214, 193, 161, 239, 255, 210, 43, 177, 183, 222, 185, 190, 248, 175, 131, 197, 140, 96, 127, 177, 227, 11, 96, 208, 254, 187, 185, 0, 96, 127, 177, 131, 11, 32, 237, 189, 187, 11, 64, 96, 7, 236, 236, 2, 16, 131, 59, 32, 227, 184, 131, 11, 96, 27, 59, 224, 19, 103, 206, 62, 252, 249, 87, 222, 121, 247, 58, 222, 79, 93, 252, 0, 229, 83, 187, 251, 3, 148, 119, 0, 247, 61, 124, 254, 249, 23, 249, 143, 112, 220, 184, 241, 209, 11, 103, 151, 255, 167, 193, 142, 113, 1, 44, 181, 191, 216, 217, 5, 0, 251, 139, 29, 92, 0, 105, 230, 114, 117, 218, 251, 36, 45, 0, 49, 184, 3, 242, 112, 119, 106, 1, 76, 217, 1, 25, 235, 59, 96, 1, 8, 233, 70, 210, 193, 119, 162, 245, 219, 23, 207, 190, 123, 230, 145, 211, 127, 14, 104, 43, 220, 115, 230, 236, 99, 218, 187, 205, 127, 128, 243, 234, 251, 31, 126, 225, 167, 94, 251, 201, 77, 252, 7, 226, 7, 23, 64, 38, 106, 134, 253, 197, 142, 47, 128, 116, 2, 236, 47, 118, 112, 1, 164, 117, 203, 195, 105, 230, 149, 23, 64, 187, 3, 118, 112, 1, 244, 119, 192, 142, 47, 128, 245, 119, 192, 174, 45, 128, 159, 216, 255, 169, 202, 246, 103, 129, 244, 39, 159, 127, 234, 4, 188, 21, 124, 18, 25, 252, 242, 255, 195, 155, 31, 191, 124, 241, 202, 125, 143, 158, 236, 127, 10, 84, 108, 105, 1, 44, 181, 255, 46, 47, 128, 65, 251, 31, 197, 2, 16, 131, 59, 32, 159, 102, 167, 22, 128, 88, 186, 3, 78, 244, 2, 16, 187, 182, 3, 244, 34, 160, 253, 55, 65, 229, 163, 243, 175, 92, 57, 125, 39, 96, 227, 104, 167, 126, 225, 167, 94, 27, 222, 184, 79, 191, 214, 254, 59, 160, 119, 222, 2, 152, 97, 127, 177, 227, 11, 32, 77, 8, 251, 139, 157, 91, 0, 253, 29, 176, 227, 11, 64, 204, 216, 1, 25, 166, 211, 5, 144, 150, 249, 228, 254, 59, 1, 111, 190, 253, 1, 126, 30, 116, 241, 227, 64, 207, 189, 253, 217, 19, 245, 227, 64, 59, 206, 61, 251, 255, 10, 116, 251, 47, 176, 222, 205, 255, 61, 72, 177, 179, 11, 96, 162, 253, 239, 180, 5, 32, 150, 238, 128, 19, 183, 0, 142, 119, 7, 100, 145, 198, 22, 192, 49, 238, 128, 123, 30, 56, 247, 244, 51, 111, 180, 255, 44, 193, 149, 171, 55, 190, 252, 213, 147, 241, 79, 67, 159, 8, 206, 60, 114, 254, 197, 230, 29, 151, 197, 191, 191, 244, 198, 181, 7, 135, 126, 248, 231, 116, 1, 152, 141, 44, 128, 180, 202, 82, 251, 139, 29, 95, 0, 182, 255, 49, 44, 0, 49, 99, 7, 220, 181, 11, 96, 226, 14, 200, 78, 110, 111, 1, 136, 118, 7, 232, 203, 207, 231, 94, 120, 231, 250, 245, 67, 110, 250, 248, 227, 143, 223, 190, 124, 253, 137, 29, 254, 39, 213, 78, 16, 159, 125, 248, 229, 111, 61, 207, 127, 255, 89, 47, 186, 46, 191, 119, 227, 201, 167, 142, 250, 155, 63, 187, 188, 0, 182, 100, 255, 147, 181, 0, 150, 218, 95, 156, 188, 5, 32, 54, 184, 3, 114, 228, 119, 234, 2, 16, 217, 222, 77, 237, 128, 118, 1, 232, 203, 207, 51, 143, 93, 56, 215, 252, 135, 106, 245, 245, 233, 27, 111, 93, 123, 252, 139, 175, 126, 234, 204, 233, 14, 152, 207, 224, 63, 252, 160, 95, 122, 213, 245, 149, 175, 191, 121, 207, 131, 43, 255, 79, 127, 197, 58, 11, 32, 147, 182, 83, 246, 23, 119, 228, 2, 72, 151, 46, 181, 191, 152, 185, 0, 166, 236, 128, 59, 102, 1, 220, 37, 59, 32, 219, 59, 101, 1, 136, 153, 59, 224, 204, 226, 191, 17, 127, 241, 213, 171, 55, 111, 30, 250, 14, 245, 254, 14, 248, 224, 137, 47, 189, 122, 250, 58, 96, 30, 245, 79, 88, 183, 246, 191, 118, 237, 230, 215, 191, 245, 214, 167, 150, 253, 247, 191, 68, 187, 0, 54, 101, 127, 113, 186, 0, 138, 193, 5, 144, 238, 154, 109, 255, 221, 90, 0, 98, 35, 59, 224, 116, 1, 20, 155, 93, 0, 27, 217, 1, 237, 2, 16, 19, 119, 192, 67, 79, 92, 124, 229, 181, 247, 177, 3, 22, 223, 169, 120, 247, 250, 151, 190, 242, 218, 233, 251, 1, 171, 114, 230, 145, 253, 31, 250, 60, 252, 189, 53, 253, 210, 62, 24, 251, 175, 63, 98, 1, 204, 179, 191, 152, 178, 0, 78, 237, 95, 12, 218, 255, 116, 1, 28, 186, 110, 44, 0, 177, 83, 59, 96, 213, 5, 32, 118, 115, 7, 100, 63, 199, 22, 192, 140, 29, 80, 30, 153, 178, 3, 30, 252, 220, 197, 243, 23, 175, 226, 123, 65, 250, 245, 254, 251, 31, 126, 227, 219, 111, 157, 254, 92, 208, 68, 238, 57, 115, 246, 225, 39, 46, 158, 127, 133, 223, 85, 211, 175, 171, 239, 127, 248, 204, 179, 195, 95, 251, 207, 176, 191, 104, 23, 192, 60, 251, 139, 211, 5, 80, 236, 212, 2, 232, 219, 95, 156, 46, 128, 5, 171, 238, 128, 227, 93, 0, 98, 157, 29, 144, 109, 23, 155, 220, 1, 247, 157, 189, 239, 209, 11, 237, 207, 171, 232, 215, 141, 15, 63, 58, 119, 254, 138, 188, 118, 226, 254, 241, 181, 35, 230, 222, 7, 206, 125, 249, 43, 175, 191, 253, 206, 7, 248, 231, 222, 244, 90, 234, 221, 247, 110, 60, 245, 181, 215, 239, 121, 96, 254, 119, 126, 68, 14, 122, 186, 253, 151, 46, 128, 163, 180, 191, 56, 209, 11, 224, 200, 236, 47, 86, 88, 0, 98, 246, 14, 200, 203, 58, 93, 0, 102, 123, 59, 96, 202, 2, 16, 83, 118, 64, 187, 0, 68, 201, 34, 13, 50, 113, 7, 8, 125, 125, 250, 204, 179, 111, 234, 107, 85, 252, 139, 5, 31, 125, 252, 241, 59, 151, 175, 63, 253, 181, 55, 238, 125, 240, 244, 165, 192, 0, 90, 141, 15, 60, 118, 225, 187, 223, 187, 140, 31, 248, 209, 175, 155, 31, 125, 252, 218, 27, 215, 30, 255, 210, 171, 75, 127, 230, 71, 180, 246, 23, 211, 237, 63, 184, 0, 50, 84, 243, 236, 47, 54, 181, 0, 78, 180, 253, 197, 29, 184, 0, 78, 119, 128, 104, 119, 192, 58, 11, 96, 35, 59, 160, 218, 187, 169, 29, 32, 198, 118, 0, 214, 128, 60, 245, 196, 151, 47, 189, 254, 230, 226, 191, 28, 118, 224, 176, 91, 191, 22, 47, 5, 46, 92, 121, 236, 243, 175, 156, 190, 51, 156, 124, 230, 193, 151, 127, 234, 153, 55, 222, 126, 231, 58, 190, 240, 215, 175, 235, 215, 111, 126, 247, 165, 203, 103, 30, 91, 252, 199, 94, 242, 144, 39, 218, 191, 230, 184, 212, 254, 98, 158, 253, 197, 148, 5, 176, 89, 251, 159, 46, 0, 113, 186, 0, 22, 236, 206, 2, 16, 155, 221, 1, 217, 159, 118, 1, 136, 233, 59, 32, 91, 45, 54, 187, 3, 68, 187, 3, 100, 43, 57, 235, 249, 161, 175, 103, 245, 202, 224, 253, 107, 31, 62, 247, 194, 59, 59, 254, 223, 222, 58, 26, 62, 253, 192, 226, 95, 85, 122, 229, 210, 251, 31, 30, 126, 255, 92, 191, 180, 12, 180, 18, 190, 252, 213, 215, 7, 127, 220, 19, 246, 175, 185, 28, 129, 253, 177, 0, 230, 217, 95, 172, 179, 0, 178, 116, 167, 246, 47, 102, 216, 95, 236, 253, 206, 63, 119, 232, 247, 91, 218, 1, 235, 44, 128, 19, 180, 3, 230, 45, 0, 49, 111, 7, 180, 11, 64, 172, 185, 3, 176, 6, 214, 217, 1, 226, 39, 31, 56, 247, 196, 83, 151, 46, 189, 113, 13, 63, 29, 164, 95, 31, 127, 252, 241, 123, 87, 110, 60, 251, 220, 219, 247, 63, 122, 151, 174, 1, 169, 255, 137, 47, 189, 250, 242, 133, 43, 237, 91, 38, 250, 245, 193, 7, 55, 181, 62, 103, 127, 225, 47, 90, 245, 139, 217, 246, 23, 243, 236, 47, 218, 5, 176, 89, 251, 159, 46, 0, 177, 211, 11, 64, 172, 179, 3, 242, 76, 119, 103, 1, 136, 77, 237, 128, 118, 1, 136, 157, 218, 1, 88, 3, 101, 156, 41, 107, 224, 19, 247, 157, 189, 247, 161, 243, 95, 251, 230, 155, 151, 223, 189, 129, 127, 53, 72, 191, 244, 7, 87, 174, 46, 94, 13, 60, 244, 185, 139, 119, 207, 55, 133, 238, 125, 224, 220, 23, 158, 190, 116, 225, 213, 171, 248, 175, 170, 213, 175, 15, 63, 252, 72, 127, 213, 126, 199, 95, 236, 184, 253, 69, 187, 0, 230, 217, 95, 76, 95, 0, 89, 201, 163, 180, 255, 233, 2, 56, 96, 215, 22, 128, 56, 154, 29, 48, 101, 1, 136, 121, 59, 160, 93, 0, 98, 202, 14, 168, 174, 206, 219, 1, 162, 221, 1, 162, 221, 1, 98, 226, 14, 16, 250, 50, 246, 190, 71, 47, 60, 251, 157, 183, 165, 251, 102, 11, 44, 214, 128, 190, 224, 61, 123, 254, 189, 39, 191, 124, 73, 114, 132, 46, 239, 24, 244, 66, 231, 204, 35, 139, 93, 248, 198, 91, 31, 180, 47, 137, 244, 75, 127, 120, 233, 245, 107, 95, 248, 169, 215, 238, 57, 252, 31, 119, 20, 117, 170, 176, 127, 157, 255, 108, 251, 215, 244, 143, 221, 254, 162, 93, 0, 235, 216, 255, 200, 22, 64, 90, 232, 36, 218, 95, 242, 95, 44, 128, 211, 23, 1, 166, 93, 0, 34, 195, 52, 111, 7, 140, 45, 128, 25, 59, 160, 58, 182, 107, 59, 64, 164, 152, 196, 224, 26, 248, 228, 153, 179, 247, 63, 182, 88, 3, 239, 93, 25, 120, 53, 160, 95, 50, 224, 91, 239, 124, 240, 236, 115, 111, 223, 97, 47, 8, 238, 125, 240, 229, 207, 63, 117, 233, 123, 231, 222, 123, 255, 154, 246, 223, 192, 141, 235, 171, 254, 87, 95, 123, 255, 139, 95, 225, 183, 251, 197, 160, 250, 69, 71, 253, 176, 127, 77, 115, 227, 246, 199, 2, 152, 98, 127, 209, 46, 128, 233, 246, 159, 184, 0, 178, 176, 89, 228, 77, 217, 95, 156, 46, 128, 93, 92, 0, 91, 218, 1, 153, 167, 177, 5, 48, 123, 7, 100, 19, 196, 6, 119, 128, 24, 219, 1, 88, 3, 118, 65, 10, 194, 214, 72, 149, 216, 47, 240, 206, 224, 14, 16, 99, 107, 224, 179, 143, 156, 127, 230, 217, 183, 222, 122, 123, 248, 11, 97, 253, 209, 141, 27, 31, 233, 107, 225, 175, 63, 251, 214, 201, 221, 4, 250, 122, 255, 51, 15, 190, 172, 215, 52, 223, 253, 222, 229, 203, 239, 221, 104, 127, 188, 71, 191, 180, 11, 174, 95, 191, 121, 238, 194, 149, 39, 158, 186, 132, 255, 164, 187, 232, 171, 127, 204, 254, 57, 47, 209, 170, 95, 180, 234, 23, 219, 176, 63, 22, 192, 116, 251, 15, 46, 128, 172, 216, 60, 251, 111, 100, 1, 220, 49, 246, 31, 94, 0, 226, 228, 238, 128, 156, 211, 188, 5, 32, 230, 237, 128, 76, 103, 187, 0, 196, 148, 29, 80, 13, 153, 184, 3, 178, 129, 162, 106, 153, 93, 21, 235, 236, 0, 209, 238, 0, 49, 184, 6, 108, 37, 216, 74, 12, 174, 129, 79, 236, 255, 199, 229, 63, 255, 244, 107, 47, 95, 188, 242, 193, 245, 155, 67, 95, 22, 47, 252, 168, 47, 141, 223, 124, 251, 131, 231, 94, 120, 231, 137, 47, 95, 250, 204, 67, 47, 239, 254, 219, 197, 90, 87, 247, 63, 122, 225, 233, 175, 189, 126, 238, 252, 149, 43, 87, 63, 28, 244, 190, 126, 233, 207, 47, 191, 119, 253, 219, 223, 125, 231, 193, 39, 46, 142, 125, 175, 191, 85, 191, 232, 168, 95, 96, 82, 199, 101, 127, 49, 207, 254, 98, 158, 253, 197, 148, 5, 144, 53, 223, 148, 253, 197, 9, 94, 0, 191, 227, 207, 30, 252, 127, 249, 119, 39, 101, 1, 108, 105, 7, 244, 23, 128, 152, 183, 3, 42, 217, 19, 119, 64, 54, 71, 140, 237, 0, 172, 129, 137, 59, 64, 180, 59, 64, 172, 185, 3, 196, 170, 107, 64, 124, 242, 204, 185, 251, 31, 187, 160, 23, 4, 175, 191, 121, 173, 253, 199, 15, 252, 235, 227, 143, 63, 254, 224, 131, 155, 175, 190, 254, 254, 179, 223, 121, 91, 95, 86, 127, 246, 225, 243, 247, 236, 198, 191, 51, 170, 157, 244, 233, 251, 207, 61, 248, 248, 66, 250, 47, 158, 125, 247, 237, 119, 174, 235, 46, 6, 247, 153, 126, 233, 46, 174, 93, 251, 240, 236, 249, 247, 62, 255, 83, 175, 105, 255, 229, 63, 229, 95, 44, 85, 191, 192, 153, 119, 212, 15, 251, 215, 124, 97, 255, 74, 2, 236, 95, 153, 25, 180, 127, 230, 77, 204, 182, 191, 104, 23, 192, 20, 251, 139, 118, 1, 172, 111, 127, 49, 111, 1, 236, 130, 253, 119, 98, 1, 136, 163, 223, 1, 57, 137, 41, 11, 64, 172, 191, 3, 218, 5, 32, 166, 239, 128, 76, 188, 216, 193, 29, 32, 82, 28, 98, 179, 107, 64, 64, 124, 66, 95, 8, 63, 244, 228, 43, 223, 124, 238, 237, 55, 222, 250, 160, 227, 80, 253, 210, 95, 221, 248, 240, 163, 119, 46, 95, 151, 73, 191, 254, 173, 183, 62, 255, 212, 165, 7, 30, 187, 32, 11, 31, 193, 235, 3, 61, 133, 22, 207, 189, 15, 190, 252, 240, 19, 23, 191, 252, 213, 215, 245, 37, 252, 43, 151, 222, 215, 87, 250, 55, 123, 215, 187, 240, 254, 251, 215, 110, 234, 181, 206, 151, 191, 246, 250, 103, 30, 62, 255, 201, 195, 63, 217, 89, 248, 100, 112, 98, 194, 231, 137, 115, 246, 249, 99, 46, 173, 250, 69, 171, 126, 209, 170, 95, 180, 234, 23, 199, 104, 127, 44, 128, 85, 237, 47, 166, 44, 128, 77, 217, 95, 28, 253, 2, 72, 51, 79, 183, 191, 228, 191, 88, 0, 39, 226, 69, 128, 216, 212, 14, 152, 178, 0, 196, 170, 59, 160, 114, 121, 196, 59, 64, 140, 237, 0, 172, 129, 106, 53, 214, 64, 245, 127, 108, 13, 192, 32, 131, 59, 64, 88, 67, 208, 147, 181, 5, 157, 21, 99, 107, 64, 104, 19, 220, 255, 248, 197, 175, 124, 227, 205, 11, 175, 92, 125, 255, 218, 232, 119, 81, 252, 75, 234, 213, 199, 92, 251, 224, 166, 54, 199, 185, 11, 87, 158, 251, 238, 59, 95, 253, 198, 155, 159, 127, 250, 210, 35, 79, 92, 188, 239, 145, 243, 159, 90, 44, 134, 197, 110, 184, 77, 163, 245, 226, 208, 199, 156, 57, 251, 169, 125, 209, 235, 213, 201, 227, 95, 120, 85, 174, 215, 166, 121, 225, 165, 119, 165, 251, 203, 239, 222, 184, 177, 120, 15, 91, 191, 14, 46, 96, 240, 151, 254, 242, 230, 205, 197, 127, 24, 231, 249, 239, 93, 126, 242, 169, 75, 247, 62, 244, 114, 223, 251, 2, 71, 36, 124, 134, 56, 91, 159, 57, 102, 81, 51, 58, 46, 251, 87, 62, 55, 101, 127, 49, 207, 254, 34, 107, 187, 142, 253, 103, 44, 128, 163, 180, 191, 216, 173, 5, 32, 182, 183, 3, 166, 47, 128, 141, 236, 128, 118, 1, 136, 12, 217, 216, 14, 200, 188, 138, 99, 217, 1, 162, 221, 1, 162, 221, 1, 162, 179, 3, 38, 174, 1, 251, 72, 64, 85, 86, 24, 212, 86, 216, 125, 208, 98, 241, 9, 89, 248, 193, 151, 31, 253, 194, 43, 95, 255, 246, 91, 23, 95, 189, 122, 245, 253, 229, 203, 192, 191, 100, 231, 90, 12, 122, 49, 161, 175, 190, 223, 125, 239, 198, 155, 111, 127, 240, 218, 27, 215, 94, 185, 116, 245, 252, 43, 87, 180, 39, 206, 158, 191, 242, 189, 115, 239, 189, 120, 246, 221, 151, 94, 126, 239, 220, 249, 43, 47, 95, 184, 162, 167, 120, 245, 181, 247, 95, 127, 243, 154, 172, 253, 222, 213, 15, 63, 184, 126, 83, 159, 94, 143, 211, 119, 189, 127, 233, 195, 244, 116, 250, 116, 61, 242, 83, 207, 188, 126, 230, 241, 11, 237, 247, 247, 11, 223, 184, 192, 153, 8, 31, 26, 14, 83, 248, 156, 49, 130, 25, 234, 135, 253, 43, 27, 39, 203, 254, 162, 93, 0, 89, 216, 41, 246, 23, 99, 11, 32, 53, 178, 142, 253, 183, 180, 0, 214, 180, 255, 237, 5, 176, 193, 29, 176, 169, 5, 32, 214, 217, 1, 57, 185, 118, 1, 136, 121, 59, 32, 115, 38, 142, 102, 7, 96, 13, 108, 111, 7, 8, 152, 98, 112, 7, 136, 193, 53, 32, 172, 39, 104, 75, 88, 106, 144, 93, 97, 27, 66, 148, 70, 203, 224, 39, 31, 56, 247, 224, 19, 23, 159, 126, 230, 141, 239, 126, 239, 178, 84, 174, 47, 249, 75, 208, 199, 248, 171, 140, 175, 237, 162, 23, 43, 139, 55, 39, 158, 126, 237, 179, 143, 156, 255, 228, 253, 231, 218, 111, 238, 23, 190, 77, 129, 19, 40, 124, 74, 56, 61, 225, 179, 197, 153, 247, 213, 63, 102, 127, 4, 160, 163, 126, 216, 191, 146, 54, 104, 255, 76, 169, 216, 65, 251, 139, 118, 1, 204, 179, 191, 152, 190, 0, 82, 107, 155, 181, 255, 49, 47, 0, 177, 189, 29, 48, 101, 1, 136, 121, 59, 160, 93, 0, 98, 75, 59, 160, 210, 188, 241, 29, 128, 53, 224, 102, 102, 93, 221, 97, 116, 123, 250, 26, 176, 71, 224, 23, 177, 116, 13, 8, 88, 204, 130, 19, 112, 95, 145, 138, 132, 61, 19, 237, 3, 125, 113, 125, 230, 177, 11, 79, 62, 125, 233, 153, 111, 189, 165, 47, 228, 47, 189, 254, 254, 123, 87, 110, 220, 88, 188, 72, 56, 248, 178, 125, 131, 191, 234, 1, 245, 208, 218, 58, 111, 191, 115, 93, 186, 255, 206, 11, 239, 60, 253, 245, 55, 244, 234, 100, 255, 123, 59, 231, 240, 15, 54, 36, 121, 71, 184, 89, 227, 51, 193, 113, 21, 62, 76, 156, 243, 152, 250, 69, 71, 253, 2, 115, 239, 216, 63, 179, 36, 90, 245, 139, 245, 237, 143, 5, 48, 102, 127, 44, 128, 41, 246, 199, 2, 152, 103, 127, 209, 46, 128, 77, 217, 95, 172, 179, 0, 82, 197, 171, 218, 95, 220, 94, 0, 98, 222, 14, 88, 103, 1, 108, 100, 7, 140, 45, 128, 25, 59, 160, 93, 0, 162, 191, 3, 42, 133, 91, 221, 1, 98, 226, 14, 16, 237, 14, 16, 107, 238, 0, 177, 217, 53, 32, 172, 60, 1, 27, 154, 84, 39, 172, 218, 34, 5, 75, 196, 122, 149, 112, 223, 163, 23, 30, 253, 226, 171, 95, 252, 202, 107, 95, 249, 230, 155, 223, 124, 254, 237, 23, 94, 122, 247, 220, 133, 43, 23, 47, 189, 255, 218, 155, 215, 222, 122, 231, 131, 119, 222, 189, 174, 61, 113, 229, 234, 135, 87, 223, 255, 240, 131, 15, 110, 126, 112, 253, 230, 251, 215, 110, 94, 189, 250, 225, 149, 171, 55, 244, 133, 252, 219, 151, 175, 191, 241, 214, 7, 151, 94, 191, 118, 254, 149, 171, 47, 189, 252, 222, 243, 47, 94, 254, 250, 115, 111, 235, 53, 199, 147, 79, 93, 122, 232, 137, 139, 247, 62, 116, 94, 91, 231, 147, 103, 22, 63, 195, 138, 103, 7, 121, 229, 2, 247, 101, 124, 2, 56, 156, 194, 167, 135, 131, 21, 171, 170, 95, 116, 212, 127, 4, 246, 175, 84, 15, 218, 63, 27, 33, 54, 98, 127, 49, 207, 254, 162, 93, 0, 243, 236, 47, 166, 44, 128, 77, 217, 95, 28, 197, 2, 16, 155, 221, 1, 121, 22, 99, 11, 96, 246, 14, 200, 41, 138, 173, 238, 128, 76, 167, 56, 130, 29, 32, 214, 220, 1, 98, 179, 107, 64, 64, 85, 194, 34, 19, 112, 156, 176, 4, 5, 252, 152, 64, 169, 16, 110, 31, 249, 90, 235, 161, 144, 190, 3, 217, 188, 184, 253, 135, 7, 31, 217, 60, 72, 31, 92, 158, 192, 245, 155, 188, 95, 28, 69, 145, 199, 133, 147, 20, 62, 103, 156, 191, 240, 116, 48, 53, 79, 19, 83, 94, 85, 253, 176, 127, 101, 15, 246, 175, 148, 158, 8, 251, 139, 118, 1, 76, 183, 255, 210, 5, 48, 207, 254, 98, 222, 2, 152, 97, 127, 177, 247, 219, 255, 204, 161, 223, 79, 217, 1, 243, 22, 128, 88, 103, 7, 228, 201, 214, 89, 207, 216, 1, 237, 2, 16, 83, 118, 64, 229, 105, 253, 29, 32, 198, 118, 0, 214, 192, 70, 118, 128, 200, 26, 87, 183, 219, 53, 80, 34, 56, 222, 53, 80, 164, 28, 225, 77, 0, 219, 10, 24, 121, 171, 224, 169, 11, 92, 97, 146, 247, 37, 112, 215, 198, 231, 131, 163, 43, 124, 182, 56, 115, 225, 137, 96, 82, 158, 32, 38, 235, 137, 35, 9, 29, 251, 35, 96, 173, 250, 69, 171, 126, 209, 170, 95, 108, 214, 254, 34, 139, 185, 113, 251, 15, 46, 128, 148, 207, 116, 251, 47, 93, 0, 155, 181, 255, 6, 22, 128, 216, 212, 14, 152, 178, 0, 196, 244, 29, 144, 51, 168, 169, 204, 216, 1, 149, 131, 157, 221, 1, 88, 3, 213, 177, 149, 214, 0, 250, 220, 95, 3, 48, 133, 176, 68, 32, 23, 75, 7, 50, 42, 108, 43, 88, 76, 88, 115, 5, 36, 104, 210, 152, 240, 233, 32, 208, 113, 11, 36, 222, 7, 159, 11, 240, 212, 131, 228, 245, 11, 220, 157, 201, 163, 192, 65, 21, 62, 73, 156, 176, 240, 8, 48, 26, 225, 169, 97, 154, 51, 212, 127, 103, 216, 31, 11, 96, 138, 253, 197, 60, 251, 139, 177, 5, 144, 162, 155, 103, 127, 49, 125, 1, 164, 198, 91, 251, 75, 254, 139, 5, 176, 193, 23, 1, 27, 217, 1, 237, 2, 16, 211, 119, 64, 78, 75, 108, 124, 7, 100, 218, 68, 6, 177, 210, 137, 53, 48, 113, 7, 136, 118, 7, 136, 118, 7, 136, 85, 119, 128, 64, 183, 7, 119, 128, 152, 189, 6, 4, 244, 36, 44, 47, 72, 205, 164, 254, 96, 198, 4, 50, 133, 106, 39, 2, 137, 247, 193, 231, 78, 1, 23, 137, 91, 0, 121, 227, 56, 147, 194, 71, 39, 112, 170, 194, 103, 142, 113, 8, 79, 10, 19, 236, 171, 127, 204, 254, 136, 83, 101, 12, 246, 175, 52, 194, 254, 149, 219, 41, 246, 175, 46, 12, 218, 63, 123, 36, 102, 216, 95, 76, 183, 63, 22, 192, 116, 251, 99, 1, 204, 179, 191, 152, 178, 0, 54, 101, 127, 113, 123, 1, 108, 112, 7, 228, 181, 182, 11, 64, 204, 219, 1, 237, 2, 16, 83, 118, 64, 77, 113, 226, 14, 200, 148, 136, 177, 29, 128, 53, 144, 113, 60, 222, 29, 32, 166, 175, 1, 55, 31, 70, 16, 171, 174, 1, 97, 37, 65, 85, 133, 93, 6, 205, 37, 233, 68, 232, 18, 64, 181, 5, 116, 188, 85, 240, 212, 5, 46, 178, 37, 111, 16, 247, 110, 124, 80, 2, 103, 40, 124, 200, 2, 231, 47, 60, 29, 76, 109, 76, 253, 162, 163, 126, 129, 20, 181, 234, 23, 173, 250, 197, 160, 253, 43, 219, 59, 104, 127, 49, 207, 254, 98, 158, 253, 69, 187, 0, 214, 177, 255, 140, 5, 80, 218, 223, 251, 109, 127, 122, 230, 2, 16, 243, 118, 64, 187, 0, 196, 188, 29, 80, 167, 63, 113, 7, 228, 116, 197, 246, 118, 128, 24, 219, 1, 88, 3, 78, 127, 86, 194, 61, 201, 242, 184, 81, 89, 179, 234, 94, 187, 6, 166, 239, 0, 177, 206, 26, 16, 112, 80, 26, 10, 242, 42, 82, 112, 112, 95, 146, 174, 132, 70, 199, 128, 142, 91, 32, 241, 14, 248, 196, 65, 240, 236, 131, 228, 93, 8, 220, 99, 226, 51, 193, 113, 25, 159, 42, 14, 92, 228, 56, 48, 169, 85, 213, 47, 58, 234, 95, 201, 254, 153, 94, 209, 170, 95, 180, 234, 23, 19, 237, 159, 237, 19, 219, 182, 191, 104, 23, 192, 20, 251, 139, 118, 1, 204, 179, 191, 24, 91, 0, 169, 229, 233, 246, 151, 252, 23, 11, 96, 246, 14, 104, 23, 128, 152, 183, 3, 218, 5, 32, 166, 239, 128, 156, 138, 216, 205, 29, 32, 218, 29, 32, 218, 29, 32, 218, 29, 32, 218, 29, 32, 6, 119, 128, 56, 198, 53, 32, 44, 44, 1, 151, 25, 91, 79, 64, 136, 9, 52, 42, 224, 217, 137, 192, 224, 29, 240, 137, 211, 193, 117, 226, 70, 64, 222, 62, 78, 198, 248, 12, 113, 188, 133, 207, 31, 163, 17, 75, 213, 47, 144, 1, 103, 3, 153, 233, 168, 31, 246, 175, 124, 222, 229, 246, 199, 2, 152, 103, 127, 209, 46, 128, 121, 246, 23, 115, 22, 128, 152, 183, 3, 198, 22, 192, 140, 29, 80, 103, 183, 155, 59, 64, 28, 227, 14, 16, 89, 60, 183, 49, 43, 90, 108, 118, 13, 8, 136, 70, 88, 67, 2, 134, 18, 86, 152, 128, 221, 76, 170, 80, 64, 148, 45, 240, 108, 1, 23, 111, 27, 60, 123, 129, 235, 108, 201, 219, 196, 33, 152, 60, 49, 28, 102, 145, 7, 142, 89, 8, 79, 10, 19, 20, 158, 47, 230, 238, 60, 32, 39, 21, 158, 49, 251, 103, 2, 69, 71, 253, 176, 127, 165, 29, 246, 175, 94, 192, 254, 213, 160, 85, 237, 95, 109, 61, 98, 251, 139, 121, 246, 23, 237, 2, 152, 110, 255, 165, 11, 160, 99, 255, 219, 11, 96, 112, 7, 140, 45, 128, 217, 59, 32, 239, 80, 76, 223, 1, 121, 166, 226, 14, 222, 1, 34, 171, 226, 254, 160, 87, 237, 14, 16, 99, 107, 96, 112, 7, 8, 215, 30, 58, 176, 38, 160, 143, 98, 108, 13, 136, 20, 19, 156, 85, 164, 218, 96, 189, 36, 45, 41, 224, 208, 49, 224, 226, 65, 32, 241, 65, 240, 41, 99, 224, 217, 199, 192, 189, 224, 78, 147, 60, 28, 156, 91, 145, 199, 139, 147, 23, 246, 190, 192, 200, 60, 80, 129, 89, 59, 3, 200, 198, 12, 245, 143, 217, 63, 243, 44, 90, 245, 139, 86, 253, 162, 85, 191, 200, 174, 137, 147, 104, 127, 44, 128, 233, 246, 31, 92, 0, 169, 226, 85, 237, 47, 110, 47, 0, 49, 125, 7, 228, 179, 214, 117, 204, 216, 1, 237, 2, 16, 27, 220, 1, 53, 185, 117, 118, 0, 214, 192, 196, 29, 32, 50, 178, 149, 99, 172, 129, 74, 252, 216, 26, 64, 103, 58, 59, 64, 160, 141, 131, 59, 64, 108, 99, 13, 8, 104, 168, 72, 85, 193, 98, 69, 202, 78, 64, 133, 9, 4, 42, 96, 216, 149, 128, 196, 7, 193, 167, 172, 4, 46, 85, 224, 118, 64, 30, 2, 142, 200, 228, 97, 226, 156, 11, 207, 2, 51, 18, 30, 34, 134, 43, 60, 119, 228, 161, 175, 254, 49, 251, 35, 156, 149, 216, 173, 218, 191, 122, 55, 104, 255, 236, 172, 88, 201, 254, 88, 0, 99, 246, 199, 2, 152, 98, 127, 49, 207, 254, 98, 158, 253, 197, 186, 11, 64, 76, 223, 1, 121, 125, 117, 197, 219, 219, 1, 117, 226, 39, 101, 7, 136, 118, 7, 136, 233, 59, 64, 76, 95, 3, 238, 106, 22, 184, 88, 117, 13, 8, 75, 4, 114, 41, 108, 31, 88, 169, 72, 121, 193, 107, 38, 37, 40, 160, 200, 22, 24, 214, 192, 197, 219, 6, 207, 94, 224, 82, 7, 201, 155, 197, 81, 36, 121, 116, 56, 213, 194, 39, 143, 137, 20, 158, 26, 166, 41, 60, 107, 100, 96, 158, 250, 5, 50, 217, 81, 63, 236, 95, 249, 135, 253, 171, 41, 83, 236, 143, 26, 174, 111, 255, 180, 132, 88, 211, 254, 88, 0, 83, 236, 47, 218, 5, 48, 197, 254, 162, 93, 0, 75, 237, 47, 246, 126, 235, 159, 58, 244, 251, 118, 7, 180, 11, 64, 76, 223, 1, 121, 39, 98, 202, 14, 168, 147, 154, 184, 3, 114, 18, 98, 179, 59, 64, 140, 237, 0, 172, 129, 74, 36, 214, 0, 18, 220, 217, 1, 34, 139, 225, 182, 160, 69, 253, 29, 32, 178, 159, 238, 109, 150, 185, 88, 186, 6, 4, 172, 97, 161, 64, 52, 198, 62, 130, 167, 138, 212, 153, 128, 236, 146, 244, 163, 128, 61, 59, 192, 197, 29, 160, 242, 4, 31, 217, 1, 207, 222, 1, 119, 132, 251, 77, 242, 136, 112, 128, 198, 231, 140, 243, 47, 60, 38, 140, 175, 240, 112, 49, 247, 49, 245, 139, 65, 245, 139, 202, 27, 162, 88, 249, 28, 179, 127, 38, 92, 180, 234, 23, 75, 213, 47, 214, 177, 127, 117, 252, 14, 176, 63, 22, 192, 60, 251, 139, 197, 2, 152, 177, 3, 234, 249, 102, 236, 128, 186, 195, 137, 59, 32, 79, 80, 236, 206, 14, 16, 237, 14, 16, 237, 14, 16, 25, 229, 202, 247, 216, 26, 64, 67, 6, 119, 128, 232, 175, 1, 20, 117, 179, 107, 64, 88, 49, 80, 143, 177, 161, 96, 46, 147, 154, 131, 1, 91, 96, 79, 1, 189, 206, 0, 42, 79, 240, 145, 51, 192, 213, 10, 220, 17, 200, 211, 192, 65, 37, 62, 85, 156, 118, 225, 161, 8, 204, 75, 120, 154, 24, 180, 88, 170, 126, 129, 68, 13, 170, 95, 116, 212, 127, 247, 216, 95, 76, 183, 63, 22, 192, 20, 251, 139, 121, 246, 23, 237, 2, 144, 249, 7, 22, 128, 152, 190, 3, 242, 58, 196, 244, 29, 144, 119, 46, 182, 189, 3, 196, 216, 14, 192, 26, 216, 246, 14, 16, 157, 29, 128, 53, 224, 254, 160, 87, 98, 179, 107, 64, 64, 13, 194, 226, 128, 80, 68, 26, 7, 50, 50, 118, 22, 92, 150, 164, 254, 4, 228, 56, 8, 244, 106, 32, 226, 109, 131, 103, 55, 184, 218, 65, 242, 150, 113, 32, 137, 15, 80, 224, 108, 141, 167, 128, 1, 21, 158, 32, 38, 43, 60, 119, 228, 65, 56, 45, 72, 145, 211, 133, 212, 85, 20, 199, 236, 159, 121, 22, 29, 245, 247, 237, 95, 205, 130, 253, 171, 131, 176, 127, 181, 117, 208, 254, 217, 116, 113, 44, 246, 23, 211, 237, 143, 5, 48, 197, 254, 162, 93, 0, 131, 246, 95, 44, 128, 223, 242, 39, 15, 254, 191, 252, 187, 118, 1, 136, 41, 59, 160, 174, 239, 206, 216, 1, 88, 3, 157, 29, 32, 50, 148, 78, 106, 198, 23, 201, 118, 226, 209, 132, 118, 7, 136, 177, 53, 48, 184, 3, 132, 139, 138, 2, 187, 216, 217, 246, 194, 58, 128, 38, 132, 37, 34, 224, 23, 97, 1, 9, 184, 201, 164, 200, 224, 56, 144, 102, 20, 240, 102, 7, 88, 120, 10, 83, 108, 222, 1, 23, 208, 1, 55, 37, 112, 215, 73, 158, 149, 192, 73, 22, 121, 230, 24, 71, 225, 121, 97, 148, 133, 103, 141, 12, 56, 30, 2, 201, 113, 162, 144, 180, 149, 212, 47, 58, 246, 71, 65, 178, 59, 162, 85, 191, 104, 213, 47, 90, 245, 139, 19, 103, 127, 113, 4, 246, 151, 252, 23, 11, 96, 226, 14, 168, 199, 157, 184, 3, 242, 186, 197, 209, 236, 0, 172, 129, 137, 59, 64, 172, 180, 3, 198, 214, 0, 210, 217, 238, 0, 129, 148, 119, 118, 192, 216, 26, 64, 211, 196, 6, 215, 128, 24, 91, 3, 194, 90, 17, 48, 78, 97, 43, 65, 88, 73, 218, 13, 238, 107, 129, 55, 5, 220, 186, 14, 243, 108, 190, 20, 92, 112, 129, 251, 2, 121, 38, 2, 39, 102, 124, 188, 2, 39, 95, 228, 128, 48, 59, 49, 230, 125, 225, 72, 32, 42, 194, 41, 66, 186, 250, 234, 111, 237, 223, 81, 255, 142, 216, 191, 204, 48, 104, 255, 180, 138, 216, 17, 251, 139, 118, 1, 76, 177, 191, 224, 2, 88, 105, 7, 228, 243, 137, 59, 117, 7, 136, 118, 7, 136, 13, 239, 128, 109, 126, 71, 72, 184, 192, 40, 182, 59, 47, 210, 5, 133, 101, 1, 137, 20, 41, 26, 56, 168, 72, 85, 193, 98, 9, 196, 7, 45, 14, 2, 177, 26, 88, 248, 8, 192, 5, 24, 92, 240, 32, 184, 113, 28, 75, 146, 39, 137, 67, 54, 57, 14, 76, 74, 120, 148, 2, 83, 22, 206, 0, 226, 33, 156, 28, 36, 106, 158, 250, 5, 18, 62, 93, 253, 176, 127, 117, 13, 246, 175, 86, 194, 254, 213, 95, 216, 191, 154, 126, 87, 217, 31, 11, 192, 246, 31, 88, 0, 219, 219, 1, 117, 87, 91, 221, 1, 98, 108, 7, 96, 13, 108, 102, 7, 28, 94, 3, 206, 101, 134, 245, 47, 111, 226, 165, 128, 200, 70, 185, 105, 104, 160, 88, 186, 6, 4, 122, 110, 5, 164, 23, 140, 221, 1, 173, 20, 169, 30, 88, 201, 164, 194, 96, 55, 0, 45, 66, 154, 125, 96, 225, 35, 0, 23, 208, 7, 183, 38, 112, 239, 73, 158, 152, 192, 121, 154, 60, 124, 204, 165, 240, 236, 48, 83, 225, 161, 11, 228, 65, 56, 42, 72, 209, 152, 250, 197, 160, 250, 69, 165, 23, 193, 174, 180, 79, 180, 127, 182, 73, 180, 234, 23, 173, 250, 69, 171, 126, 209, 170, 95, 180, 234, 23, 19, 237, 95, 22, 90, 199, 254, 88, 0, 99, 246, 199, 2, 152, 98, 127, 209, 183, 191, 184, 189, 0, 68, 187, 0, 196, 148, 29, 80, 87, 115, 18, 119, 0, 214, 64, 229, 3, 107, 160, 146, 132, 53, 80, 153, 91, 172, 129, 195, 89, 108, 119, 128, 152, 180, 3, 102, 125, 71, 104, 227, 107, 64, 164, 41, 140, 109, 2, 203, 20, 41, 35, 120, 42, 73, 175, 193, 122, 45, 48, 102, 1, 177, 238, 38, 184, 102, 129, 91, 107, 201, 147, 17, 56, 55, 147, 231, 140, 17, 24, 79, 10, 19, 44, 60, 101, 4, 64, 56, 27, 136, 141, 216, 148, 250, 197, 116, 245, 195, 254, 213, 172, 83, 251, 139, 77, 217, 95, 236, 253, 230, 63, 113, 232, 247, 237, 14, 168, 71, 217, 157, 29, 128, 53, 48, 113, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 21, 118, 192, 49, 173, 1, 129, 50, 187, 231, 2, 10, 16, 22, 68, 90, 35, 177, 95, 224, 29, 147, 146, 130, 191, 18, 40, 15, 66, 28, 3, 98, 77, 96, 225, 109, 131, 103, 79, 112, 205, 131, 224, 246, 113, 56, 32, 143, 20, 167, 109, 60, 23, 204, 171, 240, 88, 5, 38, 46, 156, 7, 68, 69, 56, 69, 72, 151, 112, 246, 144, 73, 103, 21, 25, 30, 84, 191, 64, 35, 90, 245, 139, 142, 250, 97, 255, 234, 233, 102, 237, 95, 62, 25, 180, 127, 186, 72, 28, 163, 253, 177, 0, 166, 216, 95, 44, 22, 192, 196, 29, 144, 143, 46, 198, 118, 64, 94, 171, 184, 75, 118, 128, 64, 58, 135, 215, 192, 208, 14, 16, 168, 196, 224, 14, 16, 174, 22, 42, 231, 42, 162, 162, 194, 5, 70, 177, 133, 107, 47, 96, 4, 97, 95, 164, 71, 18, 27, 7, 38, 74, 210, 92, 144, 26, 128, 16, 5, 140, 185, 20, 88, 120, 219, 224, 217, 151, 130, 187, 19, 56, 129, 36, 207, 77, 224, 84, 141, 71, 32, 48, 157, 194, 67, 20, 152, 175, 200, 0, 32, 27, 194, 201, 65, 162, 28, 54, 129, 28, 58, 159, 200, 109, 229, 185, 181, 63, 90, 80, 237, 88, 201, 254, 40, 99, 71, 253, 176, 127, 181, 30, 246, 47, 63, 236, 136, 253, 197, 20, 251, 139, 233, 246, 199, 2, 144, 249, 15, 22, 192, 9, 218, 1, 98, 108, 7, 96, 13, 120, 114, 57, 78, 207, 56, 7, 239, 52, 100, 68, 156, 155, 12, 211, 159, 95, 253, 165, 192, 196, 53, 128, 110, 136, 13, 174, 1, 49, 111, 13, 8, 27, 36, 205, 146, 164, 134, 96, 168, 36, 141, 6, 223, 13, 2, 93, 22, 176, 234, 110, 130, 107, 46, 112, 119, 45, 121, 62, 2, 167, 151, 228, 129, 99, 22, 133, 71, 38, 48, 205, 194, 19, 71, 24, 132, 189, 47, 16, 33, 7, 12, 193, 19, 206, 36, 178, 186, 61, 245, 175, 100, 255, 236, 181, 104, 213, 47, 90, 245, 139, 86, 253, 98, 162, 253, 203, 93, 131, 246, 79, 239, 137, 109, 219, 95, 12, 218, 127, 177, 0, 126, 211, 31, 31, 88, 0, 226, 196, 237, 0, 177, 206, 14, 16, 237, 14, 16, 237, 14, 16, 157, 29, 32, 144, 215, 225, 29, 176, 222, 119, 132, 132, 43, 135, 42, 186, 165, 104, 111, 225, 110, 163, 246, 194, 82, 16, 240, 69, 97, 167, 164, 107, 64, 186, 9, 218, 74, 32, 59, 168, 112, 12, 40, 21, 192, 194, 219, 6, 207, 158, 224, 178, 199, 192, 33, 224, 136, 64, 30, 44, 206, 220, 120, 64, 2, 179, 43, 60, 95, 140, 190, 112, 54, 144, 25, 225, 80, 33, 108, 194, 57, 68, 62, 39, 170, 95, 116, 212, 63, 102, 127, 84, 175, 250, 8, 251, 87, 115, 79, 162, 253, 203, 150, 71, 96, 127, 201, 127, 177, 0, 142, 107, 7, 136, 177, 29, 128, 53, 176, 206, 14, 16, 237, 14, 16, 235, 238, 128, 254, 75, 129, 195, 107, 192, 105, 70, 202, 55, 184, 6, 4, 154, 233, 210, 162, 204, 197, 216, 26, 16, 214, 132, 128, 65, 138, 20, 77, 10, 40, 73, 97, 9, 232, 12, 64, 133, 2, 174, 156, 2, 44, 188, 109, 240, 236, 75, 193, 13, 10, 28, 66, 75, 30, 32, 142, 55, 201, 113, 96, 82, 69, 14, 20, 179, 22, 246, 190, 64, 72, 132, 83, 132, 116, 9, 7, 15, 153, 28, 83, 191, 64, 206, 43, 252, 99, 246, 207, 6, 137, 106, 214, 152, 253, 81, 207, 142, 250, 97, 255, 242, 0, 236, 95, 198, 128, 253, 203, 45, 176, 127, 89, 104, 208, 254, 105, 48, 177, 131, 246, 191, 189, 0, 78, 202, 14, 192, 26, 216, 200, 14, 16, 25, 8, 167, 36, 163, 83, 121, 26, 88, 3, 171, 191, 20, 24, 88, 3, 183, 106, 128, 122, 160, 60, 219, 91, 3, 2, 82, 40, 82, 28, 112, 74, 145, 234, 17, 105, 37, 144, 46, 19, 48, 93, 11, 92, 89, 64, 169, 59, 11, 46, 187, 192, 13, 14, 130, 83, 194, 25, 38, 121, 236, 24, 138, 201, 241, 97, 178, 194, 163, 23, 72, 133, 112, 108, 16, 39, 145, 97, 67, 14, 55, 165, 126, 129, 238, 116, 212, 191, 146, 253, 179, 233, 162, 85, 191, 104, 213, 47, 90, 245, 139, 86, 253, 226, 4, 217, 95, 220, 94, 0, 162, 221, 1, 245, 249, 235, 236, 0, 172, 129, 137, 59, 64, 172, 180, 3, 176, 6, 106, 90, 88, 3, 53, 87, 172, 129, 63, 125, 180, 47, 5, 196, 224, 14, 16, 131, 59, 64, 160, 72, 94, 3, 2, 245, 203, 102, 162, 180, 194, 149, 70, 213, 11, 187, 0, 154, 40, 82, 37, 176, 140, 73, 37, 137, 180, 21, 128, 230, 4, 60, 56, 6, 148, 10, 96, 225, 109, 131, 103, 79, 112, 217, 29, 112, 14, 56, 40, 144, 199, 139, 195, 55, 57, 41, 12, 209, 120, 214, 200, 64, 225, 156, 32, 63, 194, 233, 66, 240, 132, 51, 137, 184, 10, 228, 121, 158, 250, 199, 236, 143, 50, 86, 67, 97, 255, 234, 242, 78, 217, 191, 140, 55, 104, 255, 180, 165, 216, 134, 253, 15, 45, 128, 223, 248, 199, 110, 255, 70, 236, 248, 14, 16, 237, 14, 16, 237, 14, 16, 237, 14, 16, 237, 14, 16, 157, 29, 32, 50, 76, 78, 24, 146, 87, 113, 156, 184, 6, 156, 117, 116, 96, 236, 59, 66, 2, 165, 18, 174, 28, 170, 40, 92, 84, 20, 88, 184, 222, 168, 189, 177, 29, 96, 13, 147, 138, 129, 125, 76, 170, 74, 164, 197, 90, 32, 193, 2, 162, 156, 2, 44, 188, 109, 240, 236, 83, 192, 61, 10, 28, 69, 75, 30, 35, 14, 57, 201, 161, 96, 94, 198, 147, 197, 196, 11, 7, 3, 129, 41, 156, 40, 36, 77, 56, 135, 200, 167, 64, 134, 55, 171, 126, 129, 14, 182, 234, 23, 29, 245, 195, 254, 101, 6, 216, 191, 28, 50, 219, 254, 101, 176, 157, 181, 191, 88, 44, 128, 173, 238, 0, 49, 182, 3, 176, 6, 142, 121, 7, 172, 254, 82, 96, 108, 13, 32, 175, 206, 241, 86, 214, 192, 172, 239, 11, 9, 23, 30, 34, 48, 246, 5, 60, 98, 82, 58, 2, 74, 74, 210, 98, 34, 5, 55, 6, 68, 89, 192, 167, 187, 12, 174, 188, 192, 61, 14, 130, 179, 194, 73, 38, 121, 248, 24, 141, 241, 16, 5, 230, 91, 56, 6, 2, 9, 17, 206]);
fileData4.push.apply(fileData4, [15, 162, 37, 236, 125, 129, 76, 10, 228, 246, 24, 213, 63, 102, 127, 212, 191, 85, 191, 232, 168, 31, 246, 47, 35, 77, 183, 127, 122, 79, 76, 180, 127, 217, 117, 131, 246, 151, 249, 15, 22, 192, 210, 29, 32, 142, 108, 7, 96, 13, 248, 28, 243, 112, 125, 226, 57, 6, 207, 38, 7, 86, 83, 156, 186, 6, 38, 191, 20, 16, 195, 59, 96, 211, 107, 64, 160, 78, 40, 155, 232, 172, 1, 225, 26, 11, 52, 92, 184, 255, 80, 131, 73, 137, 192, 47, 38, 101, 36, 160, 170, 4, 130, 19, 169, 191, 62, 240, 41, 128, 130, 183, 10, 158, 186, 5, 87, 62, 6, 142, 66, 224, 184, 64, 30, 50, 70, 144, 228, 200, 48, 205, 194, 67, 23, 200, 131, 200, 192, 32, 75, 98, 186, 247, 133, 51, 140, 120, 59, 246, 217, 133, 98, 80, 253, 162, 163, 254, 49, 251, 163, 200, 213, 238, 245, 237, 159, 206, 17, 173, 250, 69, 171, 126, 177, 107, 246, 95, 44, 128, 223, 240, 71, 15, 254, 191, 117, 118, 0, 214, 192, 196, 29, 32, 218, 29, 32, 38, 238, 0, 209, 238, 0, 209, 238, 0, 177, 194, 14, 232, 191, 20, 152, 248, 29, 161, 13, 173, 1, 225, 10, 161, 90, 2, 245, 19, 46, 39, 74, 43, 178, 213, 40, 124, 97, 35, 64, 22, 38, 181, 2, 227, 36, 41, 41, 1, 133, 181, 192, 128, 34, 21, 57, 29, 40, 120, 171, 224, 169, 39, 130, 219, 44, 112, 26, 45, 121, 152, 56, 234, 36, 167, 131, 193, 25, 143, 88, 96, 250, 133, 19, 130, 240, 20, 78, 23, 82, 39, 144, 76, 225, 220, 34, 207, 142, 122, 230, 191, 112, 59, 208, 154, 65, 245, 139, 142, 250, 199, 236, 143, 178, 151, 1, 96, 255, 114, 197, 113, 217, 191, 60, 57, 104, 255, 116, 172, 88, 223, 254, 146, 255, 98, 1, 156, 136, 29, 32, 54, 178, 3, 68, 14, 219, 9, 64, 50, 58, 59, 64, 32, 115, 163, 107, 96, 63, 184, 155, 89, 3, 179, 190, 47, 36, 208, 97, 225, 146, 11, 244, 191, 72, 77, 192, 32, 38, 117, 3, 19, 129, 244, 151, 128, 221, 6, 129, 34, 77, 202, 116, 199, 193, 149, 23, 184, 205, 49, 112, 98, 56, 207, 36, 167, 32, 48, 35, 147, 3, 197, 172, 11, 231, 1, 81, 41, 156, 37, 196, 172, 64, 26, 197, 198, 213, 47, 208, 44, 55, 14, 77, 236, 168, 127, 204, 254, 105, 3, 209, 81, 63, 236, 95, 230, 129, 253, 203, 81, 176, 127, 217, 12, 246, 47, 239, 29, 175, 253, 111, 47, 128, 53, 119, 128, 24, 219, 1, 88, 3, 219, 219, 1, 34, 199, 227, 153, 97, 150, 237, 14, 16, 195, 59, 96, 19, 223, 17, 18, 131, 59, 64, 56, 244, 91, 90, 3, 194, 213, 69, 165, 11, 215, 94, 192, 8, 69, 138, 3, 78, 73, 160, 33, 72, 10, 192, 110, 112, 95, 31, 248, 20, 164, 127, 183, 13, 158, 186, 5, 87, 222, 1, 7, 34, 112, 98, 0, 167, 141, 89, 152, 156, 29, 198, 106, 60, 125, 4, 163, 112, 120, 4, 114, 37, 16, 63, 49, 230, 125, 225, 72, 103, 206, 11, 183, 0, 237, 152, 167, 126, 129, 182, 118, 212, 15, 251, 151, 25, 198, 236, 159, 110, 17, 173, 250, 69, 171, 126, 209, 170, 95, 180, 234, 23, 173, 250, 197, 68, 251, 151, 147, 7, 237, 159, 62, 23, 105, 127, 113, 123, 1, 136, 141, 239, 0, 49, 182, 3, 176, 6, 234, 68, 176, 6, 234, 236, 176, 6, 234, 148, 199, 214, 0, 230, 212, 217, 1, 34, 199, 239, 76, 32, 43, 21, 160, 177, 53, 48, 241, 59, 66, 98, 246, 26, 16, 168, 147, 112, 217, 80, 66, 129, 162, 22, 110, 50, 74, 94, 88, 4, 2, 142, 48, 41, 20, 184, 38, 129, 158, 32, 175, 22, 184, 175, 128, 34, 39, 2, 5, 111, 21, 60, 245, 116, 112, 167, 2, 7, 210, 130, 35, 197, 129, 39, 57, 35, 129, 9, 22, 57, 107, 196, 160, 112, 84, 4, 82, 84, 32, 111, 194, 105, 68, 74, 133, 51, 156, 217, 46, 156, 124, 52, 98, 179, 234, 23, 104, 116, 171, 126, 209, 81, 255, 29, 108, 127, 177, 247, 163, 127, 228, 208, 239, 197, 216, 14, 192, 26, 88, 103, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 85, 119, 128, 192, 116, 219, 29, 32, 250, 107, 0, 9, 115, 242, 214, 124, 99, 64, 184, 12, 88, 3, 194, 21, 66, 181, 68, 231, 5, 129, 64, 111, 11, 119, 27, 181, 55, 41, 8, 184, 195, 164, 101, 224, 32, 0, 121, 65, 109, 99, 64, 145, 6, 50, 221, 101, 112, 229, 6, 119, 58, 8, 14, 77, 224, 84, 147, 156, 133, 192, 164, 76, 142, 21, 19, 47, 28, 12, 129, 204, 20, 72, 151, 176, 247, 5, 146, 41, 156, 91, 228, 217, 81, 23, 104, 193, 49, 170, 127, 204, 254, 144, 73, 25, 6, 246, 47, 23, 193, 254, 101, 45, 216, 191, 252, 54, 197, 254, 229, 76, 216, 191, 236, 58, 104, 255, 52, 179, 152, 104, 127, 177, 88, 0, 39, 122, 7, 136, 28, 134, 39, 132, 201, 117, 118, 128, 64, 38, 134, 119, 192, 134, 214, 128, 112, 208, 81, 0, 23, 99, 165, 53, 32, 220, 67, 84, 180, 64, 147, 11, 183, 29, 34, 48, 169, 12, 216, 36, 73, 251, 192, 77, 45, 240, 154, 128, 251, 250, 64, 166, 45, 176, 240, 246, 192, 243, 182, 224, 202, 251, 224, 76, 4, 206, 13, 228, 153, 11, 76, 196, 228, 4, 49, 92, 227, 24, 8, 36, 164, 64, 150, 10, 231, 13, 57, 20, 14, 42, 2, 44, 28, 111, 196, 94, 184, 17, 104, 138, 75, 148, 205, 42, 6, 213, 47, 58, 234, 31, 179, 63, 180, 80, 174, 24, 179, 127, 218, 70, 180, 234, 23, 173, 250, 197, 160, 253, 203, 129, 211, 237, 15, 217, 174, 99, 255, 50, 255, 222, 175, 255, 195, 7, 255, 95, 254, 157, 104, 119, 128, 24, 219, 1, 88, 3, 117, 173, 88, 3, 190, 171, 188, 85, 223, 127, 30, 138, 79, 42, 143, 175, 206, 116, 108, 13, 96, 42, 157, 29, 32, 48, 239, 131, 29, 48, 241, 59, 66, 71, 184, 6, 4, 42, 36, 92, 48, 20, 79, 116, 126, 114, 84, 160, 216, 38, 21, 0, 59, 152, 84, 9, 44, 147, 64, 76, 208, 214, 32, 16, 159, 128, 28, 87, 2, 22, 222, 30, 120, 222, 233, 224, 102, 11, 156, 73, 11, 14, 22, 199, 158, 228, 164, 4, 230, 104, 114, 232, 200, 67, 129, 240, 20, 78, 23, 130, 87, 56, 153, 72, 172, 112, 158, 17, 117, 225, 22, 160, 29, 46, 78, 182, 169, 88, 73, 253, 162, 163, 254, 49, 251, 67, 29, 229, 147, 245, 237, 159, 150, 19, 173, 250, 69, 171, 126, 177, 142, 253, 203, 228, 131, 246, 63, 88, 0, 107, 238, 0, 209, 238, 0, 209, 238, 0, 209, 238, 0, 209, 238, 0, 209, 238, 0, 177, 234, 14, 16, 152, 101, 103, 7, 8, 164, 228, 40, 214, 192, 166, 191, 47, 36, 250, 223, 26, 18, 104, 123, 145, 82, 128, 47, 146, 244, 11, 236, 3, 160, 45, 72, 109, 12, 200, 49, 129, 76, 119, 25, 92, 185, 193, 205, 142, 129, 163, 19, 56, 219, 36, 39, 34, 48, 47, 147, 243, 197, 232, 13, 114, 82, 216, 251, 2, 73, 19, 142, 34, 34, 90, 56, 195, 200, 182, 152, 173, 126, 129, 222, 85, 25, 91, 251, 15, 170, 95, 116, 212, 63, 102, 127, 232, 165, 163, 126, 216, 191, 60, 118, 4, 246, 47, 51, 79, 183, 127, 153, 255, 96, 1, 120, 7, 96, 13, 236, 236, 14, 16, 121, 244, 53, 143, 177, 53, 128, 137, 122, 210, 72, 64, 127, 13, 32, 91, 194, 177, 67, 28, 29, 211, 109, 175, 1, 225, 250, 161, 150, 133, 123, 139, 74, 27, 244, 223, 164, 44, 224, 145, 4, 234, 129, 152, 0, 140, 38, 96, 189, 165, 64, 166, 45, 176, 240, 150, 192, 147, 14, 130, 43, 239, 131, 99, 17, 56, 186, 22, 156, 60, 230, 146, 228, 40, 49, 101, 131, 84, 20, 14, 143, 64, 174, 132, 131, 39, 144, 73, 225, 208, 34, 204, 98, 204, 251, 194, 5, 201, 214, 20, 238, 20, 186, 230, 14, 162, 155, 213, 217, 214, 254, 238, 56, 186, 223, 81, 255, 74, 246, 135, 172, 58, 234, 135, 253, 203, 138, 176, 127, 249, 19, 246, 47, 211, 78, 183, 127, 250, 92, 164, 253, 197, 237, 5, 32, 58, 59, 0, 107, 96, 35, 59, 64, 228, 17, 248, 92, 242, 176, 234, 4, 199, 214, 0, 102, 208, 217, 1, 2, 211, 237, 175, 1, 124, 71, 72, 244, 215, 0, 114, 41, 28, 217, 177, 53, 32, 80, 0, 175, 1, 129, 218, 8, 151, 170, 243, 130, 64, 160, 168, 69, 150, 25, 61, 47, 96, 132, 36, 13, 2, 185, 36, 80, 18, 132, 53, 8, 172, 87, 64, 142, 43, 1, 11, 111, 9, 60, 233, 74, 224, 102, 11, 28, 203, 32, 56, 94, 28, 62, 200, 145, 97, 154, 6, 1, 48, 25, 21, 164, 168, 112, 210, 16, 194, 194, 41, 69, 122, 133, 179, 141, 216, 11, 55, 34, 155, 82, 184, 71, 232, 215, 102, 213, 47, 224, 135, 142, 250, 97, 255, 114, 209, 74, 246, 79, 239, 137, 86, 253, 162, 85, 191, 104, 213, 47, 90, 245, 139, 41, 246, 23, 123, 191, 238, 15, 29, 250, 189, 88, 105, 7, 96, 13, 212, 245, 97, 13, 212, 157, 140, 173, 1, 156, 69, 187, 3, 68, 103, 7, 136, 28, 134, 152, 177, 6, 144, 9, 103, 101, 226, 27, 3, 194, 113, 68, 76, 29, 95, 172, 1, 225, 208, 163, 12, 194, 85, 65, 133, 132, 11, 38, 208, 61, 225, 114, 10, 244, 182, 200, 122, 163, 249, 6, 166, 72, 210, 44, 144, 14, 128, 176, 4, 140, 54, 6, 228, 104, 96, 210, 29, 7, 23, 159, 224, 126, 199, 192, 233, 225, 120, 65, 206, 69, 96, 106, 9, 102, 109, 156, 10, 4, 198, 56, 87, 136, 92, 225, 76, 34, 174, 133, 243, 140, 156, 11, 183, 0, 237, 112, 113, 4, 58, 229, 174, 161, 131, 174, 103, 118, 86, 184, 206, 168, 249, 250, 234, 23, 29, 245, 195, 254, 101, 182, 157, 178, 191, 88, 44, 128, 41, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 108, 100, 7, 8, 156, 117, 103, 7, 8, 76, 177, 179, 3, 4, 242, 225, 220, 28, 219, 26, 24, 255, 190, 144, 112, 229, 250, 223, 26, 18, 104, 114, 209, 127, 199, 216, 64, 31, 9, 164, 3, 37, 1, 232, 172, 128, 242, 250, 64, 163, 99, 64, 196, 27, 7, 79, 55, 6, 46, 126, 41, 56, 25, 129, 3, 108, 193, 249, 99, 58, 9, 102, 106, 28, 0, 129, 120, 24, 167, 8, 1, 43, 28, 66, 129, 124, 138, 41, 222, 23, 104, 132, 203, 130, 18, 9, 247, 11, 189, 115, 37, 179, 167, 194, 21, 70, 181, 93, 121, 168, 160, 252, 48, 102, 127, 72, 166, 204, 51, 102, 127, 232, 171, 163, 126, 216, 191, 60, 9, 251, 151, 81, 97, 255, 114, 47, 236, 95, 150, 134, 253, 203, 231, 176, 127, 153, 127, 239, 71, 254, 224, 193, 255, 151, 127, 39, 142, 120, 7, 136, 60, 154, 58, 175, 177, 53, 128, 19, 247, 36, 48, 161, 206, 14, 16, 152, 189, 51, 129, 172, 56, 67, 71, 179, 6, 4, 170, 34, 92, 36, 20, 172, 112, 3, 231, 109, 2, 145, 34, 128, 35, 18, 104, 37, 129, 140, 4, 108, 213, 2, 223, 25, 152, 113, 85, 32, 226, 141, 131, 167, 155, 1, 238, 183, 192, 225, 12, 130, 19, 198, 8, 0, 102, 103, 114, 214, 2, 73, 40, 50, 51, 136, 83, 225, 200, 9, 164, 81, 56, 174, 2, 73, 22, 206, 57, 42, 32, 92, 16, 20, 71, 184, 83, 232, 154, 107, 152, 221, 44, 6, 213, 47, 6, 213, 47, 58, 234, 31, 179, 63, 68, 84, 118, 90, 201, 254, 144, 97, 171, 126, 209, 170, 95, 172, 106, 127, 232, 189, 156, 127, 176, 0, 188, 3, 68, 126, 80, 125, 38, 214, 128, 159, 35, 159, 216, 87, 147, 151, 88, 215, 141, 53, 80, 119, 56, 182, 6, 112, 70, 157, 29, 32, 112, 250, 157, 29, 32, 48, 215, 99, 92, 3, 194, 65, 71, 1, 132, 235, 129, 218, 136, 254, 59, 4, 194, 157, 28, 220, 4, 194, 173, 70, 225, 147, 180, 3, 220, 145, 64, 55, 0, 170, 18, 112, 89, 7, 152, 209, 64, 163, 59, 14, 46, 62, 193, 253, 118, 192, 25, 226, 144, 1, 6, 4, 114, 172, 152, 184, 113, 60, 4, 146, 83, 56, 96, 2, 217, 43, 156, 79, 68, 87, 56, 216, 2, 153, 23, 110, 4, 154, 34, 220, 35, 244, 203, 213, 203, 62, 22, 110, 43, 90, 236, 118, 163, 245, 131, 234, 23, 29, 245, 143, 217, 31, 178, 42, 131, 193, 254, 229, 186, 245, 237, 159, 6, 22, 173, 250, 69, 199, 254, 101, 254, 131, 5, 80, 180, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 116, 118, 128, 200, 195, 242, 9, 226, 100, 59, 59, 64, 96, 102, 199, 185, 6, 110, 109, 2, 196, 90, 56, 244, 43, 191, 32, 216, 220, 38, 16, 176, 64, 146, 214, 128, 80, 0, 100, 212, 2, 151, 9, 200, 110, 41, 208, 104, 7, 184, 120, 179, 224, 185, 198, 192, 197, 47, 5, 135, 83, 224, 12, 91, 48, 133, 36, 103, 39, 48, 89, 147, 73, 64, 72, 140, 227, 36, 144, 180, 194, 105, 68, 80, 11, 39, 25, 33, 23, 174, 128, 64, 59, 236, 125, 129, 78, 185, 110, 217, 193, 194, 13, 69, 115, 221, 104, 52, 221, 6, 128, 25, 6, 213, 47, 58, 234, 31, 179, 127, 218, 76, 116, 212, 15, 251, 151, 57, 183, 106, 127, 113, 104, 1, 136, 35, 222, 1, 2, 103, 209, 238, 0, 209, 217, 1, 2, 243, 232, 175, 1, 76, 90, 12, 238, 0, 225, 208, 32, 76, 14, 217, 216, 26, 16, 136, 236, 148, 53, 32, 80, 15, 225, 242, 160, 84, 197, 244, 77, 32, 208, 106, 147, 10, 128, 29, 146, 180, 9, 92, 211, 2, 79, 13, 2, 217, 21, 208, 226, 60, 224, 226, 205, 130, 231, 154, 1, 110, 217, 224, 124, 6, 193, 57, 131, 156, 145, 192, 4, 147, 28, 58, 242, 96, 50, 60, 200, 85, 225, 236, 33, 150, 133, 163, 43, 144, 106, 225, 204, 163, 14, 98, 204, 251, 194, 253, 202, 222, 21, 110, 37, 218, 234, 22, 163, 221, 125, 245, 183, 246, 31, 84, 191, 232, 168, 31, 246, 47, 179, 141, 217, 31, 122, 236, 168, 31, 246, 47, 15, 195, 254, 101, 108, 216, 191, 220, 158, 246, 23, 123, 191, 246, 15, 28, 250, 189, 232, 236, 0, 145, 79, 227, 231, 206, 11, 242, 85, 230, 165, 215, 253, 140, 173, 1, 156, 136, 79, 42, 143, 79, 204, 88, 3, 152, 162, 167, 139, 169, 59, 13, 72, 137, 112, 128, 16, 44, 7, 14, 107, 64, 56, 166, 136, 175, 112, 184, 17, 122, 225, 74, 180, 47, 8, 132, 187, 132, 154, 21, 27, 223, 4, 2, 202, 72, 32, 26, 104, 168, 5, 22, 235, 0, 39, 2, 152, 116, 151, 193, 149, 39, 184, 229, 14, 56, 198, 22, 12, 2, 99, 2, 57, 92, 140, 222, 100, 78, 16, 33, 227, 164, 33, 132, 133, 131, 42, 144, 97, 225, 144, 11, 228, 95, 184, 29, 104, 141, 112, 167, 208, 53, 215, 80, 160, 161, 110, 46, 26, 237, 178, 67, 2, 150, 3, 164, 81, 38, 105, 237, 63, 93, 253, 162, 163, 254, 149, 236, 159, 166, 21, 173, 250, 69, 171, 126, 209, 170, 95, 72, 254, 139, 5, 80, 228, 95, 212, 71, 99, 13, 12, 238, 0, 209, 238, 0, 209, 238, 0, 209, 217, 1, 2, 167, 211, 217, 1, 2, 231, 222, 217, 1, 2, 19, 245, 164, 145, 0, 39, 3, 137, 17, 14, 19, 66, 230, 240, 173, 182, 6, 230, 190, 32, 16, 110, 23, 138, 87, 44, 221, 4, 34, 75, 142, 254, 155, 148, 133, 128, 74, 0, 52, 4, 73, 141, 1, 217, 77, 1, 38, 237, 0, 29, 111, 10, 60, 75, 7, 92, 249, 20, 112, 62, 131, 224, 168, 5, 102, 1, 114, 136, 24, 113, 146, 145, 64, 90, 140, 115, 133, 200, 25, 39, 19, 137, 45, 156, 106, 4, 94, 216, 251, 2, 77, 113, 137, 4, 250, 229, 234, 161, 146, 194, 109, 69, 139, 93, 112, 20, 223, 66, 128, 40, 44, 16, 136, 165, 108, 51, 102, 127, 40, 171, 60, 54, 102, 127, 200, 176, 12, 9, 251, 151, 75, 183, 97, 255, 197, 2, 248, 53, 191, 255, 172, 104, 119, 128, 104, 119, 128, 88, 117, 7, 136, 188, 25, 223, 33, 238, 188, 179, 3, 4, 206, 180, 179, 3, 4, 166, 229, 41, 98, 186, 158, 58, 210, 224, 148, 32, 61, 194, 193, 66, 224, 156, 197, 121, 107, 64, 160, 18, 194, 133, 17, 232, 146, 112, 217, 4, 122, 88, 172, 186, 9, 4, 164, 144, 164, 71, 160, 152, 22, 24, 74, 192, 98, 29, 224, 196, 217, 64, 199, 155, 2, 207, 50, 15, 220, 114, 31, 156, 164, 192, 105, 131, 156, 148, 192, 28, 147, 28, 61, 130, 97, 28, 33, 129, 128, 21, 153, 67, 68, 180, 112, 134, 17, 239, 194, 249, 71, 53, 132, 139, 131, 66, 9, 215, 13, 53, 20, 110, 40, 154, 235, 82, 163, 236, 98, 80, 253, 98, 80, 253, 162, 163, 254, 49, 251, 67, 107, 229, 186, 49, 251, 167, 45, 69, 71, 253, 176, 127, 153, 25, 246, 47, 135, 195, 254, 101, 123, 33, 243, 31, 44, 128, 25, 59, 64, 228, 211, 251, 154, 112, 173, 237, 14, 16, 157, 29, 32, 112, 94, 157, 29, 32, 48, 137, 93, 88, 3, 2, 145, 21, 14, 52, 130, 46, 58, 47, 8, 132, 43, 212, 255, 214, 144, 64, 57, 77, 214, 24, 13, 55, 169, 3, 1, 89, 36, 80, 12, 4, 52, 8, 20, 38, 160, 185, 137, 192, 164, 187, 12, 174, 124, 10, 56, 162, 2, 39, 217, 130, 113, 96, 88, 32, 71, 140, 0, 36, 25, 24, 100, 169, 200, 212, 33, 144, 133, 67, 43, 144, 103, 209, 241, 190, 112, 83, 208, 32, 225, 126, 161, 122, 194, 173, 68, 91, 93, 100, 20, 92, 244, 213, 47, 224, 144, 65, 245, 139, 142, 250, 199, 236, 15, 245, 149, 15, 87, 178, 127, 186, 87, 180, 234, 23, 173, 250, 133, 213, 95, 220, 94, 0, 162, 254, 14, 107, 160, 30, 101, 108, 13, 224, 58, 86, 221, 1, 2, 103, 209, 217, 1, 2, 167, 188, 131, 107, 64, 56, 166, 43, 189, 32, 16, 46, 6, 10, 83, 184, 81, 131, 155, 64, 184, 147, 168, 171, 201, 151, 5, 2, 181, 55, 169, 9, 1, 137, 0, 8, 8, 122, 26, 3, 154, 51, 112, 226, 108, 160, 227, 141, 128, 167, 152, 13, 110, 217, 224, 136, 198, 192, 129, 11, 76, 4, 228, 40, 49, 232, 36, 131, 129, 216, 24, 7, 76, 32, 123, 133, 35, 42, 144, 94, 225, 120, 11, 36, 95, 184, 26, 168, 76, 225, 78, 161, 107, 174, 161, 64, 67, 93, 94, 148, 90, 184, 239, 240, 128, 253, 0, 111, 216, 39, 240, 204, 160, 250, 69, 71, 253, 99, 246, 135, 30, 59, 234, 223, 160, 253, 197, 222, 15, 255, 190, 67, 191, 23, 237, 14, 16, 171, 238, 0, 129, 171, 239, 172, 1, 156, 136, 79, 10, 39, 216, 95, 3, 152, 141, 24, 220, 1, 194, 99, 198, 248, 29, 11, 196, 197, 73, 66, 194, 132, 195, 135, 92, 10, 71, 182, 93, 3, 194, 113, 71, 13, 68, 255, 91, 67, 194, 29, 91, 186, 9, 4, 58, 108, 178, 240, 112, 1, 72, 131, 64, 46, 45, 112, 147, 128, 191, 250, 192, 137, 0, 38, 221, 101, 112, 229, 0, 119, 221, 1, 135, 41, 112, 224, 45, 57, 47, 129, 105, 38, 153, 1, 196, 35, 201, 56, 33, 105, 133, 3, 41, 144, 213, 194, 121, 70, 212, 11, 119, 1, 29, 17, 46, 17, 202, 37, 92, 61, 84, 82, 184, 176, 40, 178, 112, 199, 209, 125, 59, 1, 174, 232, 171, 191, 181, 255, 160, 250, 69, 71, 253, 43, 217, 31, 178, 45, 3, 195, 254, 229, 106, 216, 191, 172, 14, 251, 139, 197, 2, 88, 105, 7, 136, 124, 50, 95, 1, 174, 172, 179, 3, 176, 6, 124, 10, 56, 157, 254, 26, 192, 185, 139, 193, 53, 224, 249, 97, 174, 194, 35, 71, 20, 28, 17, 68, 71, 56, 88, 8, 156, 179, 40, 16, 83, 225, 16, 119, 94, 16, 8, 180, 66, 76, 223, 4, 2, 157, 44, 178, 186, 2, 197, 54, 41, 2, 1, 77, 36, 144, 11, 212, 51, 8, 252, 85, 64, 115, 19, 129, 70, 251, 192, 200, 107, 130, 7, 95, 10, 174, 124, 34, 56, 37, 129, 195, 28, 4, 67, 193, 200, 64, 14, 26, 49, 72, 50, 54, 8, 149, 201, 248, 33, 153, 133, 211, 139, 96, 23, 78, 62, 74, 81, 184, 53, 104, 147, 112, 215, 80, 67, 225, 134, 162, 185, 46, 181, 64, 223, 237, 1, 248, 193, 234, 128, 82, 250, 234, 111, 237, 63, 168, 126, 177, 170, 250, 199, 236, 159, 54, 22, 173, 250, 197, 160, 250, 203, 252, 123, 191, 250, 247, 30, 252, 127, 88, 3, 245, 57, 99, 107, 0, 207, 218, 217, 1, 2, 247, 211, 238, 0, 209, 95, 3, 56, 83, 159, 53, 102, 224, 217, 96, 102, 158, 37, 102, 44, 60, 126, 196, 194, 113, 65, 146, 132, 67, 134, 240, 9, 71, 19, 145, 21, 14, 244, 170, 47, 8, 196, 250, 155, 64, 100, 165, 209, 246, 36, 5, 33, 160, 15, 0, 245, 8, 184, 105, 12, 104, 206, 64, 136, 235, 0, 35, 175, 9, 30, 124, 77, 112, 215, 6, 167, 52, 6, 206, 28, 67, 105, 201, 129, 98, 220, 73, 38, 4, 225, 49, 153, 52, 132, 208, 56, 171, 136, 113, 225, 168, 11, 180, 64, 184, 38, 168, 79, 225, 126, 161, 119, 194, 173, 68, 91, 93, 100, 20, 92, 184, 251, 112, 130, 117, 1, 141, 88, 47, 208, 142, 117, 4, 77, 149, 187, 90, 251, 119, 212, 63, 102, 127, 168, 181, 124, 187, 190, 253, 197, 98, 1, 20, 237, 14, 16, 171, 238, 0, 129, 107, 237, 236, 0, 129, 83, 232, 236, 0, 129, 243, 245, 185, 99, 30, 158, 19, 230, 231, 185, 98, 222, 194, 81, 64, 68, 156, 30, 164, 74, 56, 112, 8, 162, 112, 76, 17, 223, 194, 17, 223, 198, 38, 16, 89, 81, 180, 215, 100, 213, 97, 1, 144, 238, 16, 48, 75, 11, 220, 36, 32, 175, 62, 16, 34, 128, 70, 119, 25, 92, 57, 192, 93, 247, 193, 121, 10, 156, 121, 11, 166, 134, 153, 38, 153, 4, 129, 156, 152, 12, 21, 242, 102, 156, 76, 132, 182, 112, 176, 5, 50, 47, 92, 10, 129, 190, 8, 23, 10, 69, 19, 174, 33, 234, 41, 92, 94, 148, 90, 184, 239, 240, 128, 21, 1, 117, 88, 41, 80, 141, 152, 161, 254, 49, 251, 67, 146, 101, 206, 49, 251, 67, 191, 229, 100, 216, 191, 236, 61, 102, 255, 210, 254, 237, 5, 32, 58, 59, 64, 228, 67, 251, 249, 112, 29, 157, 29, 32, 112, 135, 157, 29, 32, 112, 118, 62, 83, 156, 245, 81, 174, 1, 129, 144, 57, 127, 2, 209, 20, 14, 46, 2, 45, 50, 241, 40, 67, 225, 182, 160, 72, 197, 166, 54, 129, 128, 2, 32, 136, 4, 90, 17, 240, 206, 32, 144, 87, 1, 199, 77, 4, 26, 157, 2, 188, 60, 15, 60, 230, 20, 112, 229, 19, 193, 41, 21, 56, 207, 65, 48, 23, 12, 14, 96, 226, 200, 131, 201, 252, 32, 90, 198, 33, 20, 136, 104, 225, 24, 11, 36, 188, 112, 11, 80, 144, 194, 13, 66, 179, 132, 123, 135, 74, 10, 183, 21, 69, 22, 238, 56, 186, 111, 45, 64, 23, 98, 37, 245, 139, 65, 245, 139, 142, 250, 199, 236, 15, 145, 150, 93, 199, 236, 159, 126, 22, 29, 245, 219, 254, 226, 208, 2, 16, 254, 8, 124, 102, 187, 3, 68, 103, 7, 8, 92, 125, 103, 7, 8, 156, 203, 14, 174, 1, 225, 96, 33, 112, 194, 113, 68, 76, 133, 67, 44, 144, 111, 225, 2, 8, 116, 163, 112, 127, 80, 45, 147, 37, 68, 63, 77, 150, 25, 61, 79, 160, 6, 136, 3, 64, 58, 2, 86, 234, 0, 199, 25, 8, 113, 125, 224, 229, 121, 224, 49, 215, 7, 119, 109, 112, 74, 99, 224, 216, 5, 70, 211, 146, 99, 197, 208, 147, 204, 137, 64, 138, 76, 70, 14, 105, 44, 28, 90, 129, 60, 23, 206, 60, 234, 80, 184, 47, 168, 146, 112, 209, 4, 58, 40, 220, 80, 52, 87, 184, 215, 232, 187, 85, 0, 69, 8, 219, 3, 86, 177, 109, 96, 33, 219, 9, 214, 26, 84, 191, 232, 168, 127, 204, 254, 144, 109, 25, 24, 246, 47, 87, 143, 217, 31, 194, 223, 251, 85, 191, 231, 172, 192, 159, 118, 118, 128, 200, 39, 243, 21, 224, 202, 58, 59, 64, 224, 158, 251, 107, 0, 167, 41, 6, 119, 128, 240, 96, 48, 48, 15, 18, 3, 246, 236, 145, 9, 225, 184, 32, 70, 194, 33, 67, 248, 68, 166, 19, 193, 21, 142, 53, 226, 94, 184, 18, 2, 109, 41, 220, 40, 148, 205, 100, 45, 209, 216, 36, 27, 142, 254, 131, 180, 134, 128, 83, 90, 96, 37, 1, 115, 45, 5, 66, 4, 208, 232, 206, 130, 203, 110, 193, 93, 247, 193, 145, 22, 56, 249, 22, 204, 14, 147, 77, 50, 15, 2, 105, 49, 153, 46, 4, 207, 56, 162, 2, 233, 45, 156, 112, 132, 191, 112, 65, 4, 186, 35, 220, 44, 148, 78, 184, 146, 168, 170, 112, 145, 81, 112, 225, 250, 67, 11, 194, 198, 128, 73, 108, 24, 152, 167, 175, 254, 214, 254, 131, 234, 23, 29, 245, 143, 217, 63, 109, 44, 58, 234, 135, 253, 203, 252, 123, 63, 244, 187, 15, 254, 191, 252, 59, 225, 207, 193, 99, 181, 59, 64, 116, 118, 128, 192, 253, 244, 215, 0, 78, 74, 108, 123, 13, 8, 71, 1, 17, 113, 122, 144, 42, 225, 204, 9, 196, 81, 56, 172, 8, 113, 225, 148, 163, 0, 133, 75, 34, 208, 159, 34, 107, 134, 6, 154, 172, 43, 154, 156, 100, 243, 225, 5, 0, 161, 8, 24, 103, 16, 104, 171, 128, 224, 166, 3, 141, 78, 4, 118, 94, 9, 60, 212, 68, 112, 217, 211, 193, 65, 21, 56, 210, 49, 48, 29, 140, 15, 228, 220, 5, 82, 97, 50, 69, 2, 25, 51, 25, 72, 100, 181, 112, 158, 17, 245, 194, 117, 16, 104, 138, 112, 149, 4, 90, 38, 220, 65, 212, 83, 184, 188, 40, 181, 112, 223, 225, 1, 43, 66, 192, 30, 182, 10, 108, 51, 79, 253, 173, 253, 7, 213, 47, 58, 234, 135, 253, 203, 204, 99, 246, 135, 222, 203, 249, 7, 11, 192, 59, 64, 224, 227, 58, 59, 64, 228, 211, 139, 25, 107, 0, 167, 32, 6, 215, 128, 79, 19, 167, 236, 211, 199, 84, 132, 7, 134, 65, 122, 192, 152, 189, 112, 44, 16, 23, 225, 48, 33, 100, 194, 17, 68, 52, 69, 102, 23, 177, 22, 153, 123, 84, 162, 112, 109, 4, 26, 85, 100, 241, 208, 201, 36, 59, 140, 134, 39, 144, 2, 148, 209, 2, 227, 8, 40, 105, 12, 8, 46, 129, 16, 55, 2, 236, 188, 18, 120, 168, 77, 129, 187, 54, 56, 168, 14, 56, 121, 129, 233, 180, 228, 112, 49, 250, 36, 211, 34, 144, 37, 147, 217, 67, 44, 141, 211, 139, 96, 27, 231, 31, 213, 40, 220, 29, 212, 74, 184, 116, 2, 125, 20, 110, 43, 90, 44, 220, 113, 116, 223, 90, 128, 46, 132, 77, 2, 195, 88, 62, 144, 146, 101, 5, 137, 245, 213, 223, 218, 127, 186, 250, 69, 71, 253, 99, 246, 47, 243, 31, 44, 128, 162, 179, 3, 4, 30, 189, 179, 3, 4, 174, 187, 179, 3, 4, 78, 196, 39, 133, 19, 244, 201, 226, 196, 61, 9, 76, 72, 120, 120, 24, 170, 231, 141, 28, 8, 71, 4, 209, 17, 14, 22, 2, 39, 50, 145, 8, 171, 112, 148, 5, 82, 46, 92, 3, 129, 134, 20, 46, 146, 64, 199, 76, 22, 18, 93, 77, 178, 219, 104, 62, 72, 95, 8, 216, 164, 5, 62, 42, 160, 173, 165, 64, 136, 0, 26, 221, 89, 112, 217, 45, 184, 235, 165, 224, 84, 5, 14, 127, 16, 76, 16, 243, 77, 50, 21, 2, 153, 49, 153, 49, 129, 4, 22, 153, 85, 196, 216, 56, 237, 40, 66, 225, 166, 160, 68, 133, 91, 134, 2, 10, 215, 19, 181, 21, 46, 181, 64, 223, 173, 2, 40, 66, 216, 30, 176, 138, 133, 3, 17, 89, 80, 16, 151, 152, 161, 254, 49, 251, 67, 185, 229, 225, 49, 251, 67, 230, 101, 120, 219, 95, 28, 90, 0, 194, 31, 129, 207, 236, 236, 0, 129, 107, 234, 236, 0, 129, 187, 245, 41, 224, 116, 118, 127, 13, 8, 68, 80, 56, 160, 8, 110, 225, 112, 35, 244, 133, 139, 33, 208, 25, 227, 118, 13, 254, 20, 105, 145, 45, 69, 135, 147, 236, 60, 140, 208, 2, 155, 192, 53, 99, 64, 91, 5, 236, 54, 29, 104, 116, 37, 224, 232, 41, 224, 17, 166, 131, 203, 94, 9, 156, 85, 129, 83, 29, 4, 3, 18, 152, 32, 200, 233, 11, 100, 35, 201, 56, 33, 105, 198, 177, 20, 72, 108, 145, 217, 70, 236, 11, 87, 67, 160, 53, 194, 181, 18, 104, 156, 112, 31, 81, 85, 225, 34, 163, 224, 194, 245, 135, 22, 132, 141, 1, 147, 88, 50, 144, 143, 88, 73, 253, 98, 80, 253, 162, 163, 254, 49, 251, 67, 203, 229, 234, 49, 251, 67, 248, 123, 191, 242, 119, 157, 21, 248, 211, 206, 14, 16, 120, 190, 206, 14, 16, 184, 147, 29, 92, 3, 194, 81, 64, 68, 132, 3, 132, 96, 9, 199, 14, 113, 44, 156, 87, 68, 185, 112, 214, 81, 3, 227, 182, 160, 72, 38, 43, 135, 54, 154, 172, 174, 64, 177, 19, 232, 0, 178, 104, 129, 107, 4, 124, 212, 1, 118, 75, 96, 195, 13, 2, 71, 79, 1, 143, 176, 65, 112, 215, 9, 206, 170, 3, 206, 95, 96, 70, 0, 35, 70, 0, 64, 198, 6, 161, 50, 153, 64, 132, 211, 56, 198, 2, 9, 47, 92, 4, 129, 142, 8, 151, 72, 160, 95, 194, 5, 20, 232, 166, 112, 115, 209, 104, 225, 190, 195, 3, 194, 150, 128, 61, 44, 22, 8, 71, 244, 213, 47, 224, 52, 187, 14, 14, 28, 84, 191, 232, 168, 127, 204, 254, 80, 119, 249, 188, 181, 191, 204, 191, 247, 43, 126, 231, 226, 255, 140, 237, 0, 129, 199, 234, 236, 0, 129, 171, 188, 27, 214, 128, 112, 10, 17, 80, 145, 9, 70, 184, 11, 167, 31, 197, 48, 89, 33, 180, 203, 100, 21, 209, 210, 36, 91, 141, 194, 3, 200, 2, 42, 25, 4, 50, 18, 16, 214, 82, 160, 194, 65, 96, 210, 221, 4, 215, 220, 130, 27, 95, 10, 14, 182, 192, 249, 183, 96, 136, 2, 83, 78, 50, 27, 2, 201, 73, 50, 108, 200, 161, 201, 208, 34, 207, 133, 99, 47, 208, 136, 194, 173, 65, 161, 10, 55, 14, 77, 20, 174, 42, 42, 44, 92, 112, 129, 238, 91, 11, 208, 133, 176, 76, 32, 25, 97, 255, 192, 75, 246, 21, 60, 102, 191, 193, 123, 246, 33, 60, 57, 168, 126, 209, 81, 255, 152, 253, 161, 247, 114, 254, 193, 2, 40, 58, 107, 0, 143, 232, 103, 194, 21, 244, 215, 0, 238, 77, 12, 238, 0, 49, 184, 3, 132, 143, 21, 199, 237, 49, 96, 60, 194, 195, 195, 80, 61, 111, 228, 64, 56, 34, 72, 79, 225, 120, 33, 118, 194, 161, 20, 200, 171, 112, 160, 5, 178, 94, 100, 37, 208, 150, 34, 75, 133, 190, 153, 44, 167, 64, 117, 147, 108, 59, 92, 208, 2, 143, 64, 52, 99, 64, 88, 6, 118, 91, 9, 152, 116, 6, 144, 117, 11, 62, 126, 6, 184, 230, 149, 192, 89, 21, 56, 216, 49, 48, 38, 129, 57, 130, 204, 128, 64, 66, 146, 12, 21, 34, 103, 50, 159, 136, 174, 201, 144, 35, 255, 133, 59, 130, 250, 20, 238, 23, 170, 87, 184, 155, 232, 172, 112, 169, 81, 118, 97, 21, 64, 17, 194, 246, 128, 85, 44, 28, 1, 23, 217, 81, 112, 215, 60, 245, 183, 246, 159, 161, 254, 49, 251, 151, 246, 111, 47, 0, 81, 127, 177, 145, 53, 128, 235, 22, 131, 107, 192, 247, 143, 115, 241, 121, 225, 28, 133, 143, 24, 71, 239, 145, 96, 90, 194, 131, 196, 128, 133, 199, 143, 88, 8, 135, 6, 97, 18, 142, 26, 34, 88, 56, 166, 136, 111, 225, 136, 11, 164, 191, 200, 146, 160, 63, 38, 203, 134, 30, 154, 44, 173, 64, 165, 19, 136, 0, 154, 104, 129, 101, 4, 76, 212, 7, 118, 51, 80, 225, 150, 128, 172, 91, 240, 241, 219, 0, 55, 158, 224, 172, 58, 96, 4, 2, 99, 106, 193, 160, 17, 3, 144, 225, 65, 180, 146, 140, 34, 82, 106, 156, 103, 68, 221, 184, 17, 40, 75, 225, 66, 9, 116, 77, 184, 140, 40, 105, 225, 22, 163, 221, 194, 221, 135, 19, 132, 141, 1, 147, 88, 50, 144, 143, 176, 151, 224, 43, 171, 12, 138, 179, 250, 160, 196, 190, 250, 199, 236, 15, 57, 79, 81, 127, 113, 104, 1, 20, 157, 29, 32, 240, 76, 157, 29, 32, 112, 15, 190, 55, 220, 179, 207, 2, 103, 228, 179, 195, 153, 10, 31, 55, 198, 224, 9, 97, 114, 194, 67, 197, 176, 133, 163, 128, 136, 8, 7, 8, 193, 42, 28, 62, 132, 178, 112, 106, 17, 232, 194, 161, 23, 232, 67, 225, 218, 8, 52, 202, 100, 253, 4, 202, 105, 178, 204, 2, 85, 7, 208, 4, 36, 50, 8, 76, 84, 64, 88, 75, 129, 10, 7, 129, 73, 119, 16, 92, 240, 32, 184, 241, 41, 224, 108, 5, 70, 48, 8, 70, 41, 48, 235, 4, 33, 65, 132, 146, 140, 28, 2, 105, 50, 189, 8, 182, 113, 254, 81, 141, 194, 245, 17, 104, 150, 112, 245, 4, 90, 41, 92, 91, 212, 89, 184, 236, 2, 30, 176, 34, 4, 236, 97, 177, 64, 56, 194, 46, 130, 163, 172, 47, 104, 205, 186, 131, 6, 173, 71, 104, 211, 58, 133, 102, 203, 189, 99, 246, 135, 192, 203, 234, 176, 191, 216, 251, 193, 223, 113, 86, 224, 79, 253, 209, 120, 148, 206, 14, 16, 184, 62, 95, 55, 238, 199, 247, 137, 251, 247, 185, 224, 188, 124, 142, 56, 95, 225, 163, 199, 72, 60, 45, 76, 81, 120, 192, 152, 189, 112, 44, 144, 152, 194, 145, 66, 212, 68, 102, 17, 49, 45, 156, 99, 68, 188, 112, 13, 4, 26, 98, 178, 78, 104, 154, 201, 90, 10, 148, 54, 65, 213, 33, 2, 0, 131, 8, 88, 102, 12, 8, 171, 128, 215, 86, 5, 38, 93, 159, 137, 202, 158, 14, 46, 120, 85, 112, 92, 6, 103, 59, 6, 38, 133, 81, 182, 32, 9, 200, 73, 146, 209, 66, 240, 146, 12, 42, 50, 92, 100, 218, 81, 132, 194, 101, 17, 232, 81, 225, 174, 161, 134, 133, 123, 138, 254, 10, 23, 28, 197, 23, 214, 2, 116, 33, 44, 19, 72, 70, 216, 63, 240, 146, 149, 5, 149, 89, 113, 80, 159, 24, 84, 191, 152, 161, 254, 49, 251, 67, 242, 101, 254, 189, 95, 254, 219, 15, 254, 191, 177, 53, 128, 199, 242, 115, 224, 185, 125, 77, 184, 214, 99, 92, 3, 194, 195, 195, 80, 61, 111, 129, 40, 8, 7, 5, 1, 18, 142, 151, 64, 242, 132, 163, 41, 144, 218, 194, 201, 70, 232, 141, 187, 129, 218, 152, 44, 152, 64, 253, 76, 214, 85, 160, 204, 9, 20, 0, 65, 12, 2, 203, 8, 104, 168, 3, 188, 150, 64, 133, 71, 195, 250, 202, 158, 1, 110, 60, 193, 113, 245, 193, 20, 4, 38, 213, 130, 113, 35, 12, 32, 35, 132, 128, 37, 25, 72, 196, 213, 56, 216, 2, 153, 47, 92, 13, 129, 214, 20, 110, 22, 74, 87, 184, 149, 40, 108, 225, 70, 163, 233, 194, 30, 128, 34, 132, 237, 1, 171, 8, 59, 7, 46, 178, 166, 160, 47, 107, 13, 186, 19, 54, 33, 12, 57, 168, 126, 49, 67, 253, 99, 246, 151, 252, 23, 11, 160, 232, 236, 0, 129, 199, 245, 243, 225, 58, 78, 214, 26, 16, 30, 63, 98, 33, 28, 26, 132, 169, 112, 224, 16, 196, 194, 97, 21, 200, 113, 225, 172, 163, 6, 38, 11, 131, 46, 153, 44, 30, 58, 153, 100, 141, 5, 74, 14, 32, 8, 232, 99, 12, 104, 72, 64, 85, 83, 128, 10, 199, 128, 76, 119, 13, 92, 237, 32, 184, 241, 41, 224, 120, 11, 76, 97, 16, 12, 20, 227, 110, 201, 168, 32, 72, 73, 102, 15, 177, 76, 50, 198, 72, 120, 225, 34, 8, 116, 164, 112, 143, 80, 177, 194, 53, 20, 104, 168, 112, 133, 81, 109, 225, 226, 11, 56, 65, 216, 24, 48, 137, 37, 35, 224, 31, 171, 9, 202, 178, 202, 160, 56, 97, 251, 193, 138, 182, 37, 44, 106, 187, 194, 186, 51, 212, 95, 246, 63, 180, 0, 132, 255, 14, 159, 227, 199, 194, 115, 12, 238, 0, 49, 184, 3, 196, 224, 14, 16, 62, 8, 28, 144, 207, 14, 103, 42, 124, 220, 24, 131, 199, 131, 201, 9, 15, 21, 195, 22, 153, 6, 4, 69, 56, 70, 136, 87, 225, 252, 33, 154, 133, 227, 43, 144, 236, 34, 11, 128, 110, 20, 89, 33, 129, 130, 153, 44, 36, 186, 10, 178, 225, 2, 253, 7, 208, 135, 128, 95, 198, 128, 170, 12, 188, 54, 3, 200, 116, 215, 192, 213, 174, 10, 142, 203, 224, 120, 199, 192, 176, 4, 6, 218, 130, 60, 32, 45, 73, 102, 12, 241, 75, 50, 174, 8, 179, 201, 216, 163, 17, 69, 22, 7, 157, 18, 46, 157, 64, 31, 133, 11, 43, 208, 101, 225, 166, 67, 2, 194, 138, 128, 58, 132, 197, 2, 225, 8, 187, 8, 142, 178, 190, 160, 53, 97, 227, 193, 132, 243, 212, 63, 102, 127, 104, 220, 122, 79, 231, 239, 253, 178, 223, 118, 232, 247, 194, 31, 135, 207, 31, 220, 1, 98, 151, 215, 128, 192, 32, 61, 99, 129, 241, 11, 135, 3, 161, 17, 153, 42, 4, 78, 100, 34, 17, 214, 34, 3, 141, 172, 23, 89, 9, 180, 197, 100, 181, 208, 186, 36, 139, 42, 80, 227, 4, 229, 135, 26, 6, 129, 95, 4, 28, 212, 7, 94, 3, 176, 225, 157, 10, 238, 58, 193, 113, 245, 193, 32, 10, 204, 171, 5, 67, 71, 36, 64, 6, 9, 49, 75, 50, 153, 8, 173, 201, 132, 35, 252, 198, 29, 65, 125, 140, 91, 134, 2, 22, 110, 40, 202, 43, 92, 109, 129, 214, 11, 59, 1, 186, 16, 54, 9, 36, 35, 236, 31, 120, 201, 202, 130, 202, 132, 45, 7, 251, 109, 86, 253, 99, 246, 135, 234, 197, 98, 1, 20, 248, 139, 193, 29, 32, 6, 215, 128, 175, 6, 87, 233, 171, 199, 93, 249, 110, 113, 10, 194, 7, 132, 131, 243, 153, 226, 172, 133, 199, 128, 241, 8, 15, 15, 67, 21, 30, 57, 162, 32, 50, 43, 136, 145, 112, 200, 4, 242, 39, 28, 80, 129, 236, 22, 142, 184, 64, 250, 77, 86, 5, 45, 50, 89, 57, 180, 49, 201, 2, 11, 212, 27, 64, 13, 2, 238, 24, 4, 2, 42, 160, 170, 137, 192, 134, 131, 64, 166, 59, 5, 46, 117, 12, 220, 245, 20, 112, 188, 5, 6, 49, 6, 102, 138, 161, 3, 4, 6, 113, 74, 50, 129, 2, 249, 52, 25, 102, 228, 220, 184, 17, 40, 139, 113, 167, 80, 183, 194, 125, 68, 85, 11, 119, 25, 53, 23, 150, 128, 128, 31, 132, 237, 1, 171, 8, 59, 7, 46, 178, 166, 160, 47, 97, 179, 193, 120, 150, 33, 36, 105, 121, 66, 170, 150, 45, 36, 220, 87, 127, 107, 255, 210, 254, 222, 15, 252, 214, 179, 162, 179, 3, 4, 30, 209, 207, 132, 43, 240, 149, 225, 138, 125, 39, 184, 67, 223, 57, 78, 68, 248, 176, 112, 136, 62, 95, 156, 187, 240, 72, 48, 42, 225, 65, 98, 192, 34, 19, 128, 112, 8, 71, 7, 145, 42, 28, 59, 196, 177, 112, 100, 5, 210, 92, 56, 244, 2, 125, 48, 89, 30, 244, 42, 201, 30, 162, 165, 0, 245, 70, 249, 91, 224, 14, 152, 165, 3, 84, 101, 224, 181, 25, 64, 166, 59, 5, 46, 117, 6, 56, 46, 131, 227, 237, 128, 145, 9, 204, 180, 5, 169, 64, 102, 146, 76, 154, 64, 14, 77, 230, 22, 145, 54, 153, 127, 84, 195, 184, 65, 40, 87, 225, 2, 10, 116, 83, 184, 188, 2, 189, 22, 110, 61, 132, 32, 172, 11, 104, 68, 88, 50, 144, 143, 176, 154, 160, 44, 97, 155, 193, 114, 22, 32, 196, 104, 97, 66, 164, 98, 80, 253, 98, 134, 250, 133, 204, 127, 176, 0, 188, 3, 4, 62, 218, 143, 130, 71, 223, 133, 53, 32, 48, 6, 79, 72, 96, 120, 158, 171, 192, 200, 133, 3, 129, 160, 20, 78, 18, 66, 86, 56, 133, 8, 104, 225, 16, 11, 228, 219, 100, 25, 208, 19, 147, 165, 66, 223, 18, 84, 20, 5, 78, 80, 123, 1, 47, 180, 192, 44, 5, 4, 212, 7, 94, 3, 176, 225, 157, 10, 238, 26, 224, 196, 250, 96, 22, 2, 35, 27, 4, 115, 71, 48, 0, 18, 133, 188, 153, 204, 167, 64, 122, 77, 70, 29, 45, 40, 178, 47, 168, 82, 225, 186, 9, 52, 81, 184, 170, 2, 45, 22, 174, 185, 128, 1, 132, 253, 0, 117, 8, 91, 5, 194, 17, 118, 17, 52, 37, 108, 48, 152, 205, 210, 131, 12, 45, 73, 200, 83, 172, 164, 126, 177, 84, 253, 197, 237, 5, 80, 248, 35, 240, 153, 59, 184, 6, 132, 143, 30, 35, 17, 30, 24, 6, 41, 60, 102, 140, 95, 100, 62, 16, 29, 145, 217, 66, 236, 10, 231, 18, 145, 53, 78, 54, 66, 111, 178, 30, 104, 78, 146, 77, 67, 15, 19, 84, 23, 197, 6, 144, 130, 128, 53, 198, 128, 128, 10, 120, 106, 34, 80, 225, 24, 240, 233, 238, 128, 235, 28, 3, 119, 61, 17, 156, 112, 129, 89, 12, 130, 177, 10, 140, 30, 32, 54, 8, 85, 146, 57, 20, 72, 169, 201, 84, 35, 240, 198, 213, 16, 104, 77, 225, 114, 9, 244, 174, 112, 55, 81, 219, 194, 189, 70, 229, 133, 133, 32, 224, 10, 97, 147, 192, 48, 194, 254, 129, 151, 172, 44, 1, 155, 89, 116, 16, 160, 197, 8, 97, 10, 187, 20, 142, 181, 123, 225, 100, 187, 26, 14, 135, 250, 139, 189, 95, 250, 91, 94, 18, 248, 211, 254, 26, 192, 243, 9, 95, 10, 46, 209, 151, 142, 91, 242, 221, 226, 20, 132, 15, 8, 7, 231, 3, 197, 89, 11, 143, 1, 227, 17, 30, 30, 134, 42, 114, 234, 8, 132, 112, 92, 4, 146, 36, 28, 53, 129, 20, 22, 78, 42, 66, 108, 50, 238, 104, 130, 201, 218, 160, 81, 73, 54, 16, 253, 4, 40, 54, 106, 223, 2, 107, 8, 152, 165, 3, 60, 101, 32, 181, 121, 192, 167, 187, 3, 174, 115, 30, 56, 49, 131, 19, 238, 128, 169, 9, 76, 182, 5, 217, 64, 114, 146, 204, 155, 64, 26, 77, 166, 87, 32, 219, 38, 139, 128, 142, 20, 174, 146, 64, 203, 10, 55, 17, 37, 45, 220, 98, 20, 188, 176, 1, 32, 7, 97, 117, 64, 41, 194, 194, 17, 112, 145, 53, 5, 125, 9, 155, 13, 198, 179, 12, 33, 73, 97, 127, 194, 171, 246, 45, 60, 220, 87, 191, 128, 231, 101, 254, 131, 5, 208, 238, 0, 49, 184, 3, 68, 127, 13, 224, 90, 133, 111, 3, 183, 231, 59, 199, 137, 8, 31, 22, 14, 209, 231, 139, 115, 23, 30, 9, 166, 85, 120, 156, 24, 179, 112, 8, 16, 142, 194, 1, 66, 176, 10, 135, 79, 32, 151, 69, 198, 23, 201, 46, 178, 0, 232, 70, 146, 93, 66, 211, 18, 148, 19, 213, 5, 232, 60, 140, 48, 8, 180, 34, 160, 158, 165, 64, 106, 0, 42, 188, 83, 193, 93, 3, 156, 88, 31, 140, 163, 192, 212, 6, 193, 244, 145, 13, 128, 92, 33, 117, 73, 6, 21, 25, 54, 153, 121, 212, 193, 100, 113, 208, 169, 194, 189, 67, 37, 11, 215, 86, 160, 209, 194, 149, 135, 10, 10, 187, 2, 14, 17, 150, 12, 228, 35, 172, 38, 40, 75, 216, 102, 176, 156, 5, 8, 49, 10, 59, 19, 46, 221, 160, 250, 139, 219, 11, 160, 192, 199, 249, 243, 241, 184, 126, 62, 92, 135, 175, 15, 215, 45, 124, 75, 184, 85, 159, 2, 78, 71, 248, 224, 112, 160, 194, 199, 141, 49, 8, 15, 9, 195, 19, 30, 45, 70, 94, 56, 22, 136, 75, 225, 60, 33, 106, 133, 227, 40, 144, 212, 34, 3, 141, 172, 155, 44, 6, 58, 147, 100, 199, 80, 191, 4, 165, 69, 165, 91, 96, 4, 248, 98, 12, 168, 167, 128, 164, 166, 3, 21, 142, 1, 159, 238, 8, 184, 200, 14, 184, 235, 137, 224, 144, 11, 140, 99, 12, 12, 87, 96, 250, 0, 225, 65, 180, 64, 6, 18, 89, 53, 153, 109, 129, 228, 23, 217, 17, 212, 199, 184, 101, 40, 96, 225, 146, 10, 244, 87, 184, 224, 2, 221, 23, 150, 3, 164, 81, 216, 42, 176, 141, 176, 139, 224, 40, 97, 131, 193, 108, 150, 30, 100, 40, 236, 73, 248, 211, 106, 133, 114, 173, 98, 40, 218, 234, 134, 210, 33, 252, 189, 95, 242, 155, 191, 39, 240, 167, 248, 28, 63, 22, 158, 195, 207, 141, 107, 242, 181, 226, 30, 132, 111, 15, 183, 237, 19, 193, 73, 9, 31, 34, 14, 87, 248, 232, 49, 18, 225, 129, 97, 144, 133, 135, 141, 16, 136, 76, 9, 2, 84, 56, 97, 8, 95, 225, 128, 10, 100, 215, 56, 229, 40, 64, 146, 109, 65, 151, 146, 236, 30, 106, 9, 80, 105, 20, 190, 5, 190, 16, 112, 74, 7, 72, 42, 129, 212, 230, 1, 159, 238, 8, 184, 200, 217, 224, 196, 12, 14, 185, 3, 6, 39, 48, 220, 65, 144, 16, 228, 39, 201, 212, 9, 100, 50, 201, 24, 35, 225, 198, 117, 16, 104, 138, 113, 167, 80, 183, 194, 149, 20, 104, 107, 225, 70, 163, 236, 133, 109, 0, 75, 8, 107, 4, 122, 17, 150, 143, 128, 151, 172, 44, 168, 76, 88, 116, 16, 160, 176, 27, 225, 76, 235, 20, 154, 181, 126, 161, 101, 235, 26, 26, 23, 240, 188, 204, 191, 247, 253, 191, 233, 197, 218, 1, 59, 181, 6, 4, 14, 206, 103, 138, 179, 22, 57, 9, 12, 73, 120, 132, 24, 173, 240, 224, 5, 50, 33, 28, 26, 129, 60, 21, 206, 28, 226, 88, 56, 178, 2, 105, 54, 25, 125, 180, 194, 100, 133, 4, 10, 150, 160, 150, 40, 45, 64, 219, 225, 130, 65, 224, 148, 2, 234, 89, 10, 164, 6, 160, 194, 59, 21, 220, 53, 192, 137, 45, 5, 19, 17, 24, 220, 32, 8, 128, 64, 66, 0, 210, 133, 236, 37, 25, 87, 132, 217, 100, 242, 81, 10, 147, 13, 66, 185, 10, 23, 80, 160, 155, 133, 251, 139, 106, 23, 238, 62, 180, 80, 216, 27, 240, 137, 176, 109, 32, 34, 97, 77, 65, 95, 194, 102, 131, 244, 132, 125, 8, 79, 90, 161, 80, 171, 149, 11, 21, 139, 233, 234, 47, 22, 11, 160, 24, 220, 1, 2, 15, 116, 4, 107, 64, 248, 176, 112, 136, 194, 71, 140, 163, 23, 30, 12, 6, 38, 60, 78, 140, 185, 112, 20, 16, 145, 194, 49, 66, 188, 140, 83, 136, 128, 154, 140, 50, 82, 110, 178, 18, 104, 139, 201, 106, 9, 20, 47, 65, 93, 81, 230, 22, 184, 64, 192, 23, 99, 64, 61, 5, 12, 53, 29, 168, 176, 3, 148, 186, 11, 224, 10, 59, 224, 174, 39, 130, 67, 54, 152, 200, 24, 152, 175, 64, 6, 0, 34, 132, 128, 129, 140, 37, 66, 155, 100, 200, 145, 127, 147, 101, 65, 143, 10, 215, 77, 160, 137, 133, 11, 139, 34, 23, 46, 187, 128, 7, 132, 69, 1, 129, 20, 54, 12, 204, 35, 236, 37, 248, 74, 216, 102, 176, 156, 5, 40, 224, 70, 107, 19, 58, 181, 102, 161, 95, 97, 51, 195, 216, 240, 185, 213, 95, 218, 191, 189, 0, 132, 255, 14, 159, 131, 71, 20, 126, 50, 92, 132, 175, 15, 215, 45, 124, 75, 184, 85, 31, 1, 78, 71, 248, 224, 112, 160, 194, 199, 141, 49, 8, 15, 9, 195, 43, 60, 96, 12, 190, 112, 50, 16, 154, 194, 193, 66, 224, 140, 115, 137, 200, 154, 12, 55, 114, 111, 178, 36, 2, 21, 50, 89, 57, 129, 66, 2, 148, 25, 85, 111, 129, 41, 10, 8, 165, 3, 12, 149, 64, 106, 179, 129, 82, 119, 1, 92, 225, 108, 112, 98, 6, 135, 220, 7, 179, 19, 24, 113, 11, 66, 34, 144, 162, 4, 241, 67, 56, 147, 12, 51, 162, 110, 178, 23, 168, 140, 113, 185, 4, 122, 87, 184, 158, 2, 205, 21, 174, 182, 64, 235, 133, 181, 32, 96, 12, 97, 165, 64, 53, 194, 34, 18, 112, 148, 245, 37, 96, 54, 75, 15, 50, 20, 246, 36, 252, 105, 181, 66, 185, 194, 54, 134, 165, 161, 113, 235, 61, 157, 191, 247, 139, 127, 227, 11, 249, 123, 225, 143, 195, 231, 227, 209, 133, 159, 24, 23, 228, 107, 197, 61, 8, 223, 30, 110, 219, 39, 130, 147, 18, 62, 68, 156, 175, 200, 211, 199, 96, 132, 199, 134, 113, 138, 156, 55, 162, 32, 50, 43, 136, 81, 145, 81, 67, 10, 139, 12, 43, 114, 108, 50, 244, 232, 131, 201, 242, 8, 84, 43, 65, 33, 81, 87, 128, 158, 67, 4, 99, 64, 40, 2, 210, 153, 2, 164, 6, 160, 194, 59, 18, 220, 114, 11, 78, 108, 41, 24, 74, 129, 217, 13, 130, 24, 8, 228, 4, 32, 99, 72, 96, 146, 161, 69, 164, 147, 172, 0, 218, 97, 178, 74, 104, 89, 145, 101, 68, 79, 11, 119, 25, 53, 47, 236, 1, 40, 162, 176, 67, 224, 22, 97, 243, 64, 74, 194, 202, 130, 202, 132, 69, 7, 1, 10, 187, 17, 206, 180, 78, 161, 89, 97, 3, 195, 204, 80, 183, 149, 14, 213, 139, 197, 2, 40, 240, 23, 254, 28, 60, 22, 158, 73, 248, 34, 112, 113, 190, 110, 220, 143, 240, 173, 226, 8, 132, 15, 8, 7, 39, 124, 172, 56, 110, 225, 97, 96, 72, 194, 35, 20, 152, 174, 240, 248, 5, 146, 33, 28, 29, 129, 84, 21, 25, 62, 228, 178, 200, 248, 34, 217, 38, 107, 32, 80, 18, 147, 165, 18, 168, 92, 130, 162, 162, 198, 45, 176, 128, 128, 41, 198, 128, 116, 12, 12, 53, 29, 168, 176, 15, 196, 122, 188, 224, 218, 58, 224, 150, 87, 2, 231, 92, 96, 40, 99, 96, 196, 2, 49, 104, 65, 144, 16, 51, 144, 225, 68, 116, 147, 140, 58, 138, 96, 178, 53, 40, 148, 113, 239, 80, 73, 227, 230, 162, 212, 133, 91, 15, 33, 20, 54, 6, 100, 34, 172, 26, 1, 11, 9, 59, 10, 238, 18, 54, 27, 140, 39, 236, 67, 120, 210, 10, 133, 90, 133, 173, 11, 27, 67, 215, 98, 76, 253, 165, 253, 189, 95, 244, 27, 190, 43, 238, 176, 53, 32, 48, 54, 225, 161, 98, 216, 133, 3, 129, 160, 20, 14, 147, 64, 206, 10, 199, 81, 32, 169, 38, 99, 141, 196, 155, 172, 7, 154, 147, 100, 217, 4, 170, 8, 80, 99, 148, 124, 16, 152, 66, 192, 38, 125, 96, 168, 4, 70, 91, 7, 136, 245, 120, 193, 181, 173, 3, 78, 44, 193, 57, 119, 192, 248, 10, 76, 185, 5, 81, 65, 144, 0, 66, 136, 136, 38, 153, 106, 4, 62, 201, 130, 160, 59, 69, 182, 12, 5, 52, 238, 41, 42, 92, 184, 230, 2, 6, 16, 86, 132, 128, 61, 132, 221, 2, 237, 8, 75, 73, 192, 87, 194, 54, 131, 229, 44, 64, 1, 55, 90, 155, 208, 169, 176, 105, 97, 96, 40, 90, 244, 213, 47, 100, 254, 131, 5, 112, 100, 107, 64, 224, 86, 125, 4, 56, 29, 225, 131, 195, 129, 138, 60, 113, 12, 67, 120, 84, 24, 97, 225, 25, 99, 252, 133, 243, 129, 232, 20, 142, 151, 64, 242, 140, 51, 138, 248, 154, 12, 58, 58, 144, 100, 109, 208, 40, 128, 42, 162, 168, 0, 37, 23, 176, 192, 32, 80, 73, 1, 233, 76, 1, 70, 3, 80, 225, 29, 9, 110, 185, 5, 39, 54, 5, 204, 69, 96, 124, 99, 32, 9, 136, 74, 11, 146, 134, 28, 38, 153, 94, 4, 59, 201, 46, 160, 38, 198, 133, 18, 232, 90, 145, 173, 68, 97, 11, 151, 90, 160, 239, 133, 157, 0, 87, 8, 203, 68, 192, 51, 194, 22, 130, 160, 132, 245, 5, 173, 9, 75, 15, 50, 20, 246, 36, 20, 42, 108, 87, 88, 23, 90, 22, 54, 54, 76, 110, 195, 219, 249, 135, 22, 64, 225, 15, 194, 39, 251, 65, 241, 100, 184, 26, 225, 11, 197, 13, 8, 223, 30, 110, 219, 39, 34, 112, 88, 194, 71, 137, 35, 22, 30, 0, 6, 35, 114, 114, 24, 170, 240, 200, 5, 210, 80, 56, 49, 8, 147, 113, 230, 16, 71, 147, 193, 69, 166, 77, 22, 0, 221, 72, 178, 78, 2, 101, 75, 80, 81, 20, 184, 5, 10, 16, 112, 68, 7, 72, 199, 64, 79, 211, 129, 10, 251, 64, 172, 199, 8, 46, 172, 15, 110, 121, 37, 112, 206, 6, 115, 25, 3, 131, 22, 8, 67, 11, 226, 132, 176, 129, 140, 40, 2, 156, 100, 230, 81, 135, 36, 235, 131, 102, 21, 46, 160, 64, 55, 11, 87, 88, 160, 221, 133, 13, 0, 57, 20, 182, 7, 196, 34, 172, 29, 1, 35, 9, 251, 10, 30, 19, 182, 28, 4, 40, 236, 70, 56, 211, 58, 21, 48, 45, 84, 44, 108, 105, 216, 219, 86, 135, 237, 247, 190, 239, 71, 159, 23, 248, 83, 225, 79, 192, 3, 249, 9, 240, 196, 184, 50, 225, 139, 198, 253, 8, 223, 42, 142, 64, 248, 128, 112, 112, 194, 199, 138, 227, 22, 57, 15, 140, 74, 120, 144, 24, 112, 225, 16, 8, 228, 163, 112, 134, 16, 47, 147, 65, 68, 70, 139, 140, 178, 64, 208, 77, 22, 3, 157, 73, 178, 102, 2, 37, 4, 40, 176, 64, 195, 91, 224, 136, 2, 42, 233, 3, 61, 25, 232, 108, 77, 32, 214, 99, 4, 23, 182, 38, 56, 180, 4, 231, 220, 7, 19, 20, 24, 244, 32, 72, 11, 226, 4, 16, 69, 4, 53, 201, 108, 11, 36, 223, 100, 77, 80, 34, 147, 117, 67, 19, 11, 23, 86, 160, 203, 133, 251, 14, 21, 20, 214, 5, 52, 82, 216, 51, 80, 144, 176, 160, 4, 220, 37, 108, 54, 24, 79, 216, 135, 240, 164, 21, 10, 181, 10, 232, 87, 216, 204, 48, 182, 77, 14, 195, 151, 249, 247, 126, 225, 175, 255, 78, 253, 127, 39, 110, 13, 8, 12, 64, 120, 60, 24, 91, 225, 209, 98, 228, 133, 99, 33, 144, 152, 34, 131, 133, 204, 21, 25, 77, 164, 214, 100, 196, 145, 254, 36, 219, 130, 46, 1, 148, 16, 21, 5, 168, 183, 64, 255, 199, 128, 74, 10, 24, 103, 41, 208, 89, 11, 84, 120, 71, 130, 91, 110, 193, 161, 77, 1, 115, 41, 48, 193, 49, 144, 7, 4, 166, 5, 121, 67, 26, 147, 204, 176, 64, 194, 77, 54, 2, 101, 49, 217, 44, 148, 206, 100, 61, 209, 220, 194, 237, 70, 241, 11, 203, 65, 192, 27, 194, 98, 17, 112, 142, 176, 145, 32, 43, 97, 149, 65, 113, 194, 2, 132, 24, 133, 181, 9, 157, 10, 40, 87, 216, 198, 176, 180, 237, 13, 171, 91, 248, 146, 255, 98, 1, 20, 254, 83, 124, 180, 240, 3, 225, 9, 252, 196, 184, 32, 129, 139, 246, 253, 8, 220, 170, 79, 65, 224, 128, 132, 143, 15, 199, 42, 124, 232, 24, 70, 225, 105, 97, 144, 133, 39, 141, 16, 20, 14, 138, 64, 134, 138, 140, 26, 82, 104, 50, 178, 72, 179, 201, 232, 163, 21, 9, 138, 132, 154, 37, 40, 167, 64, 123, 91, 208, 127, 1, 65, 140, 1, 221, 24, 184, 105, 37, 160, 194, 165, 192, 173, 199, 2, 46, 105, 41, 184, 229, 149, 192, 81, 27, 140, 166, 3, 102, 45, 144, 135, 22, 36, 10, 145, 3, 25, 84, 196, 56, 201, 228, 11, 244, 194, 100, 137, 208, 47, 227, 38, 162, 164, 198, 93, 70, 205, 11, 171, 64, 192, 18, 133, 77, 2, 195, 8, 43, 72, 192, 78, 194, 238, 130, 211, 132, 141, 7, 25, 10, 123, 18, 10, 21, 112, 172, 245, 11, 45, 11, 27, 27, 38, 183, 228, 173, 253, 219, 11, 160, 240, 71, 224, 51, 133, 31, 20, 79, 230, 235, 192, 245, 9, 220, 128, 240, 237, 225, 182, 133, 15, 5, 135, 37, 124, 148, 56, 226, 194, 51, 192, 120, 132, 135, 39, 48, 215, 194, 179, 71, 44, 10, 71, 71, 32, 85, 133, 195, 39, 144, 75, 147, 33, 70, 190, 147, 236, 3, 218, 146, 100, 193, 4, 234, 7, 80, 93, 129, 110, 15, 2, 65, 8, 72, 164, 15, 220, 148, 64, 103, 235, 3, 183, 30, 11, 184, 164, 245, 193, 161, 37, 56, 234, 62, 24, 98, 129, 89, 15, 130, 204, 32, 84, 0, 129, 68, 92, 147, 76, 184, 64, 254, 77, 246, 5, 85, 50, 217, 59, 84, 210, 184, 185, 40, 117, 225, 226, 11, 56, 161, 176, 55, 160, 148, 194, 206, 129, 139, 132, 101, 5, 137, 21, 182, 28, 236, 39, 236, 70, 56, 83, 192, 171, 86, 46, 84, 44, 108, 105, 216, 219, 98, 135, 240, 247, 126, 193, 175, 123, 78, 224, 79, 253, 209, 120, 20, 225, 39, 192, 19, 251, 154, 112, 173, 2, 55, 35, 124, 171, 56, 2, 225, 3, 194, 193, 21, 62, 92, 28, 186, 240, 72, 4, 166, 37, 60, 78, 129, 73, 23, 78, 3, 130, 82, 56, 76, 2, 57, 51, 25, 74, 228, 213, 100, 184, 145, 251, 36, 123, 130, 22, 1, 212, 15, 229, 108, 65, 183, 209, 252, 49, 32, 145, 2, 186, 153, 2, 116, 54, 8, 108, 120, 231, 129]);
fileData4.push.apply(fileData4, [251, 109, 193, 161, 77, 1, 163, 41, 48, 196, 49, 16, 9, 129, 204, 180, 32, 117, 200, 100, 146, 73, 22, 200, 185, 201, 94, 136, 255, 127, 187, 118, 222, 110, 217, 218, 95, 5, 121, 127, 17, 81, 20, 53, 54, 160, 38, 16, 120, 33, 33, 33, 64, 128, 132, 23, 65, 81, 84, 84, 208, 111, 135, 98, 223, 68, 69, 176, 67, 177, 239, 219, 111, 227, 175, 234, 57, 103, 236, 81, 247, 156, 107, 174, 185, 214, 94, 187, 186, 179, 174, 235, 254, 35, 111, 157, 218, 123, 175, 249, 60, 99, 140, 121, 170, 78, 104, 77, 116, 197, 104, 223, 210, 61, 165, 194, 75, 106, 62, 88, 128, 37, 43, 193, 128, 44, 89, 24, 198, 103, 201, 58, 177, 90, 35, 179, 198, 220, 141, 140, 33, 35, 57, 24, 210, 145, 153, 101, 126, 71, 150, 153, 197, 206, 152, 51, 242, 63, 31, 255, 234, 255, 247, 242, 103, 255, 149, 255, 119, 189, 3, 30, 251, 26, 24, 124, 116, 158, 109, 228, 201, 7, 135, 50, 114, 100, 28, 229, 200, 65, 115, 1, 75, 46, 137, 203, 91, 114, 193, 92, 124, 36, 31, 68, 39, 146, 48, 194, 23, 29, 83, 18, 220, 58, 241, 244, 161, 81, 33, 10, 6, 154, 73, 111, 183, 104, 254, 96, 29, 14, 48, 55, 193, 54, 221, 138, 53, 188, 138, 121, 253, 204, 248, 48, 103, 240, 188, 55, 225, 168, 131, 171, 57, 192, 117, 15, 34, 177, 139, 92, 145, 58, 144, 88, 242, 220, 186, 2, 180, 35, 186, 77, 20, 45, 82, 201, 65, 91, 151, 148, 122, 208, 247, 37, 179, 48, 88, 140, 145, 73, 25, 172, 205, 200, 28, 49, 83, 75, 118, 140, 125, 27, 89, 63, 134, 113, 48, 158, 35, 187, 202, 228, 142, 172, 49, 43, 157, 1, 103, 216, 215, 244, 47, 31, 94, 0, 75, 126, 137, 223, 157, 239, 194, 119, 31, 249, 193, 124, 160, 145, 143, 203, 99, 12, 30, 117, 228, 32, 56, 160, 145, 227, 227, 88, 151, 28, 61, 87, 178, 228, 206, 184, 206, 37, 247, 77, 20, 34, 137, 33, 76, 209, 177, 35, 145, 209, 241, 37, 217, 173, 155, 64, 73, 26, 213, 162, 120, 160, 180, 131, 86, 239, 98, 29, 22, 70, 228, 24, 219, 212, 152, 179, 135, 96, 94, 63, 51, 62, 204, 67, 112, 104, 141, 163, 190, 138, 123, 28, 92, 247, 46, 98, 51, 136, 22, 136, 37, 161, 109, 157, 243, 65, 11, 90, 23, 135, 78, 69, 23, 144, 110, 46, 169, 240, 160, 221, 75, 70, 96, 176, 15, 35, 3, 50, 216, 150, 145, 241, 25, 236, 210, 200, 112, 49, 104, 75, 22, 143, 37, 28, 172, 229, 200, 150, 178, 177, 153, 223, 193, 50, 103, 180, 25, 243, 158, 254, 53, 251, 175, 47, 128, 37, 255, 152, 175, 204, 119, 28, 252, 176, 124, 8, 62, 223, 200, 71, 231, 145, 6, 143, 61, 114, 40, 28, 214, 146, 3, 229, 160, 71, 223, 4, 151, 52, 250, 22, 185, 224, 37, 9, 32, 28, 209, 49, 34, 97, 75, 7, 145, 140, 182, 206, 52, 113, 111, 221, 16, 250, 3, 138, 71, 45, 183, 104, 245, 160, 249, 151, 48, 34, 11, 91, 115, 6, 115, 182, 139, 53, 252, 206, 240, 176, 187, 56, 180, 147, 184, 157, 133, 123, 188, 132, 84, 12, 146, 179, 69, 246, 72, 102, 235, 60, 15, 210, 222, 186, 32, 116, 39, 186, 107, 212, 48, 186, 176, 116, 121, 73, 229, 7, 107, 176, 100, 49, 24, 147, 37, 107, 195, 16, 45, 89, 42, 22, 108, 100, 226, 152, 190, 193, 60, 142, 140, 231, 96, 87, 51, 185, 76, 241, 200, 74, 51, 224, 219, 233, 95, 94, 126, 251, 175, 254, 63, 163, 127, 105, 228, 183, 242, 93, 70, 126, 0, 63, 56, 159, 137, 207, 58, 242, 24, 60, 225, 224, 20, 150, 28, 19, 199, 55, 114, 184, 131, 115, 31, 185, 24, 46, 108, 201, 165, 14, 238, 123, 233, 88, 144, 152, 165, 131, 69, 230, 162, 3, 74, 118, 163, 131, 62, 168, 65, 163, 60, 84, 11, 116, 146, 198, 110, 209, 249, 133, 105, 56, 192, 214, 4, 195, 116, 43, 214, 240, 36, 118, 246, 243, 224, 51, 156, 193, 195, 222, 138, 163, 110, 220, 206, 1, 110, 124, 16, 140, 93, 164, 139, 236, 129, 220, 146, 234, 214, 69, 160, 38, 173, 107, 69, 227, 34, 221, 164, 182, 209, 5, 167, 251, 75, 246, 129, 233, 88, 50, 47, 204, 206, 146, 93, 98, 178, 150, 108, 26, 91, 55, 152, 196, 145, 193, 100, 72, 71, 102, 150, 249, 29, 89, 102, 22, 59, 99, 206, 200, 143, 89, 254, 151, 223, 250, 43, 255, 247, 122, 7, 60, 228, 53, 48, 242, 17, 249, 232, 35, 15, 198, 3, 15, 14, 101, 228, 200, 56, 202, 37, 199, 205, 53, 44, 185, 42, 174, 112, 201, 53, 15, 18, 176, 116, 80, 200, 80, 36, 109, 164, 176, 117, 106, 9, 116, 116, 1, 6, 245, 104, 148, 138, 202, 109, 209, 88, 250, 124, 9, 211, 48, 152, 143, 171, 24, 166, 198, 156, 61, 16, 59, 251, 121, 240, 25, 30, 133, 67, 3, 167, 125, 140, 171, 92, 184, 241, 93, 132, 103, 144, 46, 16, 78, 162, 139, 14, 60, 117, 104, 93, 31, 154, 21, 169, 225, 160, 161, 145, 46, 83, 243, 200, 26, 48, 20, 75, 198, 100, 176, 51, 35, 67, 52, 216, 168, 145, 17, 99, 220, 22, 54, 112, 100, 33, 89, 206, 145, 93, 101, 111, 71, 214, 152, 149, 206, 128, 51, 236, 35, 155, 255, 225, 5, 176, 228, 151, 248, 173, 249, 46, 124, 247, 145, 31, 204, 7, 26, 249, 184, 60, 198, 200, 67, 242, 240, 131, 3, 90, 114, 136, 28, 238, 146, 211, 231, 98, 150, 220, 28, 151, 186, 228, 226, 7, 153, 88, 18, 157, 65, 170, 162, 35, 72, 58, 163, 163, 60, 8, 122, 235, 110, 80, 27, 80, 57, 10, 185, 69, 159, 7, 157, 191, 132, 249, 8, 182, 230, 12, 182, 108, 23, 107, 248, 157, 225, 97, 119, 113, 104, 39, 113, 59, 11, 87, 121, 9, 193, 24, 132, 103, 139, 248, 13, 242, 217, 58, 213, 131, 204, 183, 174, 9, 37, 138, 110, 220, 160, 143, 75, 55, 151, 82, 71, 186, 207, 44, 44, 153, 142, 193, 170, 44, 89, 30, 22, 105, 100, 178, 6, 107, 54, 24, 189, 145, 73, 100, 42, 71, 134, 116, 176, 177, 153, 95, 102, 249, 210, 223, 246, 44, 217, 249, 53, 251, 175, 47, 128, 37, 255, 152, 47, 203, 119, 28, 252, 188, 124, 14, 62, 223, 200, 71, 231, 169, 70, 158, 121, 112, 28, 131, 35, 27, 125, 166, 28, 247, 200, 101, 12, 238, 105, 201, 93, 114, 205, 75, 162, 48, 72, 73, 116, 164, 72, 91, 116, 46, 73, 109, 116, 196, 7, 5, 104, 212, 134, 82, 129, 54, 82, 215, 93, 116, 126, 176, 11, 199, 216, 154, 96, 152, 110, 197, 26, 158, 199, 212, 190, 55, 126, 250, 73, 60, 236, 29, 56, 237, 224, 118, 14, 112, 233, 11, 217, 216, 34, 96, 131, 4, 130, 244, 146, 237, 214, 117, 160, 44, 173, 203, 69, 239, 162, 75, 74, 127, 151, 110, 58, 35, 176, 100, 40, 6, 27, 178, 100, 103, 152, 160, 37, 27, 197, 124, 45, 172, 220, 200, 6, 50, 143, 35, 227, 201, 168, 142, 76, 46, 83, 124, 211, 244, 47, 47, 127, 230, 95, 254, 191, 250, 127, 47, 249, 173, 124, 139, 145, 31, 192, 207, 30, 249, 88, 124, 220, 145, 135, 225, 33, 71, 142, 128, 163, 89, 56, 193, 145, 35, 230, 232, 151, 92, 207, 224, 230, 150, 220, 46, 23, 31, 201, 7, 209, 137, 14, 25, 249, 139, 14, 235, 32, 202, 209, 209, 31, 20, 163, 81, 39, 202, 182, 69, 87, 7, 125, 222, 197, 40, 44, 204, 199, 85, 12, 19, 152, 179, 7, 98, 106, 223, 27, 63, 253, 129, 56, 49, 112, 218, 87, 113, 155, 131, 75, 191, 132, 252, 12, 50, 6, 34, 74, 128, 209, 177, 167, 20, 173, 75, 68, 197, 162, 251, 72, 85, 35, 165, 30, 244, 125, 201, 44, 12, 22, 99, 201, 170, 48, 56, 75, 70, 137, 177, 90, 216, 180, 145, 209, 27, 236, 225, 200, 90, 178, 162, 35, 27, 203, 246, 30, 76, 127, 198, 124, 176, 243, 51, 254, 31, 94, 0, 193, 63, 206, 151, 241, 29, 71, 126, 24, 159, 99, 228, 35, 242, 209, 71, 30, 140, 7, 94, 114, 34, 28, 214, 224, 64, 151, 28, 58, 151, 177, 228, 194, 6, 119, 185, 228, 190, 137, 66, 116, 104, 200, 83, 116, 248, 200, 101, 116, 136, 7, 17, 143, 174, 196, 160, 48, 160, 108, 84, 113, 139, 38, 15, 218, 126, 128, 249, 88, 88, 153, 243, 152, 179, 93, 12, 226, 247, 132, 39, 221, 197, 137, 157, 196, 5, 5, 183, 121, 9, 241, 24, 68, 104, 139, 16, 18, 81, 16, 111, 194, 223, 186, 44, 84, 169, 117, 245, 104, 101, 116, 133, 105, 247, 146, 17, 24, 236, 195, 146, 13, 97, 94, 150, 76, 208, 96, 157, 6, 35, 182, 100, 229, 88, 191, 145, 121, 100, 54, 71, 70, 117, 176, 183, 153, 226, 193, 74, 103, 192, 25, 246, 145, 205, 127, 249, 211, 255, 210, 255, 185, 228, 151, 248, 173, 249, 46, 124, 247, 145, 31, 204, 103, 26, 249, 184, 60, 201, 146, 71, 229, 8, 70, 14, 136, 131, 91, 56, 226, 37, 119, 192, 245, 44, 185, 194, 193, 237, 46, 29, 2, 242, 177, 116, 140, 72, 88, 116, 28, 73, 106, 235, 112, 15, 162, 223, 40, 12, 117, 2, 85, 164, 168, 187, 104, 251, 194, 40, 28, 96, 101, 26, 195, 116, 7, 6, 241, 60, 214, 246, 157, 240, 67, 111, 194, 147, 222, 129, 211, 14, 46, 232, 24, 247, 62, 136, 199, 46, 98, 54, 200, 33, 200, 48, 9, 111, 93, 10, 42, 211, 186, 101, 20, 48, 186, 173, 20, 57, 186, 242, 172, 193, 146, 197, 96, 76, 150, 12, 206, 96, 139, 22, 86, 107, 100, 214, 152, 187, 37, 123, 200, 78, 142, 12, 41, 3, 123, 199, 223, 246, 44, 217, 249, 53, 251, 175, 47, 128, 37, 255, 152, 47, 27, 249, 166, 252, 176, 145, 143, 194, 167, 28, 121, 0, 30, 108, 228, 177, 57, 142, 37, 71, 198, 81, 46, 156, 248, 146, 91, 225, 194, 150, 92, 234, 224, 190, 151, 142, 5, 137, 137, 142, 23, 201, 139, 142, 41, 9, 110, 29, 250, 65, 37, 26, 69, 162, 102, 91, 180, 116, 208, 228, 75, 24, 133, 193, 112, 156, 193, 48, 129, 57, 123, 44, 214, 246, 157, 240, 67, 31, 142, 19, 3, 167, 125, 21, 23, 186, 112, 239, 151, 144, 34, 98, 182, 69, 80, 137, 49, 58, 252, 84, 163, 117, 155, 40, 90, 235, 98, 210, 217, 72, 187, 41, 126, 100, 31, 152, 142, 37, 243, 50, 88, 158, 133, 141, 26, 25, 177, 193, 190, 141, 12, 32, 195, 184, 100, 57, 89, 212, 71, 77, 255, 242, 242, 167, 254, 197, 255, 163, 255, 247, 146, 223, 202, 183, 24, 249, 1, 252, 224, 145, 143, 197, 39, 30, 121, 24, 30, 114, 201, 65, 112, 64, 163, 79, 144, 195, 93, 184, 131, 209, 247, 196, 21, 46, 185, 230, 65, 2, 150, 4, 101, 144, 161, 232, 192, 145, 197, 214, 241, 37, 217, 173, 203, 48, 168, 10, 168, 25, 37, 220, 69, 147, 7, 85, 191, 132, 225, 8, 86, 230, 60, 230, 108, 23, 131, 248, 221, 224, 49, 47, 225, 196, 78, 226, 130, 130, 11, 61, 64, 66, 6, 41, 218, 34, 138, 4, 21, 132, 156, 10, 180, 110, 205, 160, 83, 209, 29, 164, 158, 209, 93, 166, 230, 145, 53, 96, 40, 150, 222, 19, 166, 102, 97, 145, 150, 172, 22, 131, 182, 100, 241, 88, 194, 145, 169, 100, 66, 71, 6, 118, 176, 189, 35, 203, 204, 98, 103, 204, 7, 59, 63, 227, 255, 225, 5, 16, 252, 227, 124, 25, 223, 113, 228, 135, 241, 33, 70, 62, 34, 159, 126, 201, 227, 241, 216, 35, 135, 50, 56, 175, 145, 3, 29, 156, 245, 224, 74, 150, 190, 57, 46, 117, 201, 197, 15, 50, 17, 29, 32, 178, 21, 29, 68, 50, 218, 58, 211, 36, 30, 84, 133, 34, 129, 18, 14, 90, 186, 139, 170, 15, 230, 224, 24, 43, 211, 24, 166, 59, 48, 136, 183, 98, 118, 31, 139, 159, 117, 19, 30, 243, 62, 156, 118, 227, 142, 14, 112, 245, 11, 9, 217, 69, 210, 136, 226, 22, 73, 38, 231, 173, 219, 49, 232, 78, 116, 215, 168, 97, 235, 218, 210, 232, 165, 187, 207, 44, 44, 189, 30, 12, 203, 194, 4, 45, 217, 40, 230, 107, 201, 190, 49, 125, 75, 182, 145, 205, 124, 236, 191, 242, 47, 217, 252, 151, 223, 252, 203, 255, 251, 146, 95, 226, 183, 230, 187, 12, 126, 64, 126, 246, 224, 99, 141, 124, 104, 158, 103, 228, 81, 57, 130, 37, 199, 196, 241, 45, 57, 98, 142, 126, 225, 146, 34, 119, 201, 53, 71, 7, 130, 172, 44, 29, 41, 210, 214, 58, 160, 100, 183, 17, 119, 202, 208, 168, 208, 160, 99, 160, 162, 131, 14, 95, 194, 28, 44, 12, 199, 25, 172, 18, 152, 179, 247, 192, 236, 62, 22, 63, 235, 61, 112, 98, 224, 180, 175, 226, 66, 23, 174, 254, 18, 130, 52, 8, 219, 22, 89, 37, 204, 232, 10, 80, 144, 214, 157, 26, 52, 46, 186, 161, 148, 55, 186, 230, 44, 192, 146, 161, 24, 108, 200, 194, 224, 44, 25, 165, 193, 94, 141, 12, 218, 96, 235, 70, 198, 144, 145, 28, 239, 58, 253, 107, 246, 95, 95, 0, 75, 254, 49, 95, 54, 242, 77, 249, 97, 35, 31, 133, 143, 56, 242, 0, 60, 219, 146, 135, 231, 80, 150, 156, 26, 7, 186, 228, 196, 185, 140, 133, 107, 139, 220, 46, 23, 31, 29, 17, 210, 19, 29, 53, 82, 216, 58, 181, 100, 186, 117, 13, 6, 37, 1, 5, 27, 52, 112, 139, 14, 15, 122, 126, 128, 225, 8, 86, 230, 60, 230, 236, 18, 54, 241, 251, 192, 51, 94, 194, 137, 157, 199, 29, 5, 119, 122, 9, 33, 25, 4, 105, 23, 105, 36, 174, 32, 234, 20, 161, 117, 119, 6, 205, 138, 110, 34, 37, 141, 110, 52, 101, 143, 204, 194, 96, 49, 22, 230, 101, 201, 4, 13, 214, 105, 100, 190, 6, 203, 54, 50, 125, 131, 85, 60, 185, 251, 131, 29, 30, 89, 105, 214, 123, 100, 219, 123, 240, 95, 254, 228, 191, 240, 191, 245, 255, 94, 242, 91, 249, 22, 35, 63, 128, 31, 60, 250, 147, 241, 161, 71, 30, 137, 167, 29, 125, 22, 28, 211, 232, 115, 228, 136, 151, 220, 1, 215, 19, 220, 229, 210, 87, 78, 26, 162, 163, 67, 170, 162, 35, 72, 58, 91, 167, 153, 172, 131, 146, 80, 33, 80, 191, 65, 63, 119, 209, 243, 133, 57, 56, 198, 196, 52, 86, 233, 62, 108, 226, 29, 24, 223, 183, 227, 251, 223, 129, 103, 188, 15, 167, 221, 184, 163, 99, 220, 254, 32, 36, 151, 144, 55, 2, 185, 69, 158, 73, 123, 235, 142, 12, 26, 20, 221, 184, 65, 31, 163, 203, 75, 175, 163, 71, 128, 125, 88, 88, 146, 37, 131, 51, 216, 162, 37, 123, 197, 148, 45, 217, 58, 102, 112, 100, 36, 7, 251, 57, 178, 174, 12, 239, 200, 44, 51, 215, 35, 99, 206, 200, 143, 25, 255, 15, 47, 128, 224, 31, 231, 43, 7, 223, 52, 63, 111, 240, 81, 70, 62, 40, 15, 48, 250, 9, 121, 248, 145, 163, 25, 156, 218, 200, 177, 14, 78, 124, 201, 173, 112, 97, 193, 237, 46, 29, 2, 242, 17, 29, 38, 114, 214, 58, 151, 164, 182, 17, 116, 106, 0, 250, 67, 187, 182, 232, 231, 160, 192, 151, 48, 7, 11, 171, 113, 6, 171, 4, 230, 236, 253, 48, 190, 111, 199, 247, 127, 63, 156, 24, 56, 237, 51, 184, 211, 133, 219, 191, 132, 44, 13, 242, 182, 69, 98, 201, 51, 186, 8, 212, 164, 117, 179, 6, 189, 139, 238, 41, 21, 142, 238, 59, 83, 16, 236, 198, 146, 121, 25, 44, 207, 146, 117, 98, 184, 150, 44, 27, 163, 55, 62, 231, 191, 242, 47, 217, 252, 151, 63, 241, 207, 255, 175, 75, 126, 137, 223, 58, 242, 141, 248, 1, 35, 63, 158, 143, 53, 250, 115, 243, 72, 35, 15, 204, 89, 44, 57, 44, 14, 113, 201, 65, 15, 238, 96, 233, 171, 226, 22, 23, 238, 59, 58, 28, 228, 38, 58, 100, 228, 175, 117, 94, 73, 115, 235, 2, 12, 234, 1, 170, 53, 232, 222, 22, 237, 93, 40, 249, 1, 86, 35, 152, 152, 243, 152, 179, 75, 216, 196, 239, 0, 15, 120, 128, 19, 59, 143, 59, 10, 238, 244, 0, 57, 25, 196, 105, 23, 153, 36, 180, 32, 240, 212, 161, 117, 131, 6, 253, 106, 93, 73, 218, 26, 93, 109, 90, 31, 172, 196, 210, 99, 194, 206, 44, 217, 34, 102, 106, 201, 148, 13, 86, 110, 100, 6, 7, 11, 57, 178, 159, 76, 235, 200, 240, 14, 54, 121, 100, 177, 89, 242, 145, 157, 95, 179, 255, 250, 2, 88, 242, 143, 249, 178, 145, 111, 202, 15, 27, 253, 105, 248, 160, 35, 143, 193, 227, 45, 121, 126, 142, 102, 201, 217, 113, 172, 75, 142, 126, 112, 43, 75, 95, 30, 247, 186, 144, 128, 232, 184, 144, 164, 214, 201, 35, 148, 173, 115, 76, 202, 65, 61, 40, 207, 22, 221, 163, 153, 151, 80, 242, 193, 16, 92, 197, 196, 4, 147, 116, 55, 54, 241, 110, 172, 240, 29, 248, 134, 119, 227, 1, 239, 198, 129, 55, 238, 232, 24, 1, 88, 200, 201, 46, 34, 55, 200, 228, 22, 169, 38, 243, 173, 155, 50, 232, 81, 235, 234, 209, 202, 232, 22, 83, 240, 96, 16, 34, 187, 193, 164, 68, 150, 135, 81, 90, 50, 92, 131, 77, 27, 25, 189, 193, 30, 142, 12, 230, 96, 75, 71, 150, 150, 17, 30, 153, 104, 166, 123, 100, 216, 25, 252, 151, 63, 254, 207, 253, 47, 131, 95, 205, 239, 30, 124, 163, 145, 31, 195, 143, 31, 249, 112, 124, 232, 37, 79, 197, 3, 143, 62, 17, 14, 107, 201, 105, 114, 208, 75, 46, 99, 112, 79, 75, 174, 115, 112, 211, 65, 50, 162, 99, 68, 194, 90, 39, 146, 176, 54, 34, 78, 1, 64, 115, 232, 213, 22, 205, 28, 180, 247, 18, 134, 96, 97, 50, 206, 96, 146, 182, 152, 179, 247, 198, 10, 223, 129, 111, 248, 222, 56, 174, 45, 14, 252, 12, 174, 117, 33, 0, 7, 72, 20, 145, 219, 69, 110, 73, 53, 104, 4, 125, 105, 93, 49, 218, 215, 186, 176, 116, 57, 232, 254, 210, 43, 193, 128, 68, 118, 134, 9, 90, 50, 83, 131, 5, 27, 199, 127, 213, 51, 178, 144, 44, 231, 200, 180, 14, 86, 119, 100, 147, 217, 234, 145, 37, 103, 228, 199, 44, 255, 203, 111, 252, 165, 255, 121, 189, 3, 182, 175, 129, 145, 47, 230, 155, 142, 252, 72, 62, 202, 232, 207, 202, 99, 140, 60, 228, 224, 249, 71, 14, 104, 112, 124, 75, 206, 151, 163, 95, 114, 61, 131, 155, 139, 220, 49, 215, 31, 100, 165, 117, 182, 136, 93, 235, 164, 18, 226, 70, 244, 41, 198, 22, 189, 162, 117, 187, 104, 239, 160, 222, 7, 152, 140, 96, 95, 110, 194, 156, 29, 96, 25, 191, 117, 60, 221, 37, 28, 215, 77, 184, 166, 224, 90, 15, 16, 149, 133, 68, 109, 17, 203, 65, 110, 65, 236, 41, 69, 235, 30, 13, 90, 214, 186, 152, 116, 54, 168, 121, 100, 16, 6, 91, 177, 244, 170, 48, 56, 75, 70, 105, 176, 87, 227, 45, 187, 63, 178, 165, 204, 236, 200, 8, 15, 246, 121, 100, 189, 89, 245, 145, 205, 255, 240, 2, 88, 242, 75, 252, 214, 145, 111, 196, 15, 24, 253, 9, 248, 112, 35, 31, 157, 71, 90, 242, 216, 28, 199, 146, 35, 27, 28, 232, 146, 19, 231, 50, 34, 119, 198, 117, 70, 95, 60, 153, 8, 50, 20, 29, 184, 65, 28, 91, 39, 152, 124, 131, 98, 80, 155, 45, 90, 55, 104, 230, 46, 234, 189, 48, 4, 199, 216, 151, 198, 36, 189, 5, 203, 248, 70, 204, 241, 85, 124, 249, 219, 241, 116, 119, 227, 192, 27, 215, 116, 21, 25, 88, 72, 203, 46, 82, 55, 72, 38, 8, 246, 32, 249, 173, 251, 50, 104, 83, 235, 2, 82, 207, 70, 163, 163, 235, 207, 50, 44, 25, 144, 193, 182, 44, 153, 160, 193, 58, 141, 243, 187, 63, 216, 198, 145, 241, 100, 84, 151, 172, 46, 131, 60, 50, 215, 204, 248, 200, 200, 143, 53, 251, 175, 47, 128, 165, 127, 7, 95, 60, 242, 173, 249, 145, 35, 31, 136, 15, 186, 228, 97, 120, 200, 37, 167, 192, 1, 45, 57, 196, 193, 17, 47, 185, 3, 174, 39, 250, 34, 185, 227, 165, 163, 64, 74, 26, 193, 138, 14, 226, 32, 166, 141, 112, 19, 125, 208, 25, 74, 181, 69, 39, 7, 189, 61, 192, 10, 44, 236, 197, 25, 76, 210, 22, 115, 246, 217, 48, 199, 87, 241, 229, 159, 13, 199, 181, 197, 129, 159, 193, 181, 6, 25, 184, 132, 80, 13, 130, 183, 69, 116, 7, 217, 6, 189, 160, 53, 173, 139, 70, 13, 27, 205, 141, 110, 58, 35, 16, 61, 23, 44, 201, 146, 193, 25, 108, 209, 232, 221, 31, 172, 217, 200, 220, 13, 150, 112, 100, 42, 7, 43, 58, 50, 179, 204, 239, 146, 125, 102, 183, 71, 86, 157, 193, 127, 249, 99, 255, 236, 255, 52, 248, 213, 145, 47, 224, 27, 141, 252, 24, 126, 252, 146, 143, 200, 71, 31, 253, 108, 60, 246, 146, 115, 225, 200, 150, 62, 86, 14, 125, 233, 139, 225, 206, 150, 190, 90, 110, 61, 58, 34, 164, 167, 17, 184, 232, 128, 14, 226, 219, 8, 61, 149, 216, 162, 81, 84, 110, 23, 189, 93, 168, 247, 1, 246, 34, 216, 151, 155, 48, 103, 199, 24, 199, 111, 23, 207, 117, 128, 227, 186, 9, 215, 212, 184, 217, 3, 164, 101, 16, 170, 93, 132, 115, 144, 94, 16, 126, 170, 129, 46, 20, 117, 107, 52, 52, 186, 209, 148, 61, 122, 25, 24, 141, 232, 121, 97, 121, 198, 213, 221, 31, 217, 55, 118, 111, 201, 54, 50, 155, 75, 118, 149, 189, 29, 25, 100, 134, 122, 201, 146, 179, 240, 191, 241, 151, 62, 44, 255, 203, 175, 255, 51, 255, 227, 122, 7, 124, 124, 13, 248, 38, 200, 23, 243, 77, 151, 252, 96, 62, 208, 200, 199, 29, 60, 201, 200, 163, 14, 78, 97, 228, 152, 6, 39, 184, 244, 65, 115, 13, 75, 95, 21, 183, 24, 125, 229, 164, 33, 58, 58, 164, 170, 17, 196, 214, 217, 37, 214, 160, 18, 20, 102, 139, 190, 13, 58, 185, 139, 110, 47, 76, 192, 85, 140, 75, 99, 146, 222, 136, 113, 124, 32, 6, 122, 240, 27, 30, 139, 231, 122, 11, 14, 188, 113, 77, 87, 17, 131, 133, 192, 92, 66, 246, 8, 231, 22, 241, 38, 252, 232, 214, 12, 58, 213, 104, 98, 235, 242, 210, 235, 232, 17, 96, 31, 34, 75, 194, 200, 44, 87, 255, 158, 103, 100, 205, 24, 186, 37, 75, 200, 72, 46, 89, 81, 6, 118, 201, 2, 179, 204, 35, 211, 205, 164, 143, 12, 254, 248, 240, 2, 88, 250, 87, 249, 130, 145, 111, 199, 143, 25, 249, 16, 124, 184, 37, 15, 192, 131, 45, 121, 120, 14, 101, 201, 193, 13, 206, 116, 201, 209, 15, 46, 102, 201, 229, 13, 238, 53, 58, 4, 228, 163, 117, 158, 136, 90, 35, 160, 141, 88, 19, 122, 80, 24, 234, 180, 139, 78, 14, 74, 123, 9, 19, 16, 236, 197, 25, 76, 210, 46, 22, 237, 139, 96, 160, 7, 191, 225, 75, 225, 172, 182, 56, 240, 147, 184, 217, 133, 24, 28, 32, 87, 131, 236, 109, 17, 224, 65, 194, 65, 59, 232, 78, 163, 113, 173, 75, 74, 127, 163, 251, 206, 20, 68, 239, 6, 147, 178, 60, 112, 247, 7, 171, 56, 50, 155, 131, 69, 29, 153, 92, 166, 120, 201, 86, 179, 225, 235, 95, 249, 151, 204, 254, 235, 11, 32, 242, 155, 30, 248, 7, 130, 145, 231, 225, 81, 151, 156, 5, 199, 180, 228, 40, 7, 167, 188, 228, 50, 6, 87, 21, 125, 169, 220, 119, 116, 56, 200, 77, 116, 200, 6, 17, 108, 4, 183, 17, 119, 202, 176, 69, 151, 6, 125, 219, 69, 105, 7, 197, 62, 198, 94, 4, 227, 114, 43, 22, 237, 0, 227, 248, 141, 226, 161, 142, 113, 86, 55, 225, 154, 26, 55, 123, 128, 192, 44, 228, 106, 23, 249, 28, 100, 24, 84, 128, 130, 128, 102, 181, 46, 35, 85, 109, 93, 109, 90, 31, 61, 17, 172, 199, 210, 59, 195, 4, 69, 150, 138, 17, 91, 50, 116, 131, 13, 28, 25, 201, 193, 126, 142, 12, 236, 96, 123, 71, 198, 153, 209, 254, 104, 103, 250, 151, 151, 95, 251, 139, 255, 195, 224, 87, 71, 190, 96, 251, 26, 24, 249, 97, 124, 136, 209, 159, 146, 7, 24, 253, 132, 60, 252, 146, 211, 225, 224, 150, 28, 238, 224, 220, 35, 55, 196, 229, 69, 95, 51, 9, 136, 142, 203, 32, 76, 209, 225, 27, 68, 179, 17, 104, 80, 6, 170, 178, 69, 211, 6, 109, 188, 132, 98, 47, 76, 192, 85, 140, 75, 99, 146, 222, 136, 113, 252, 70, 241, 80, 111, 196, 129, 131, 155, 186, 138, 36, 44, 100, 102, 23, 241, 27, 68, 116, 139, 144, 83, 1, 80, 31, 116, 233, 168, 100, 235, 10, 83, 240, 232, 53, 96, 40, 34, 147, 50, 88, 155, 165, 119, 137, 201, 90, 50, 107, 131, 197, 91, 178, 138, 12, 230, 146, 69, 101, 108, 151, 172, 49, 43, 125, 176, 251, 99, 45, 255, 203, 31, 253, 167, 255, 251, 95, 251, 139, 227, 195, 255, 184, 245, 77, 144, 31, 60, 248, 76, 35, 31, 122, 240, 60, 35, 15, 60, 56, 139, 37, 231, 197, 81, 70, 78, 156, 203, 136, 190, 54, 110, 52, 250, 250, 73, 70, 116, 140, 6, 33, 107, 157, 75, 34, 11, 226, 14, 170, 66, 145, 118, 209, 198, 65, 99, 15, 208, 255, 96, 44, 206, 96, 143, 118, 177, 104, 79, 141, 179, 218, 226, 192, 79, 226, 102, 131, 36, 92, 66, 180, 6, 241, 219, 69, 140, 9, 249, 22, 29, 105, 221, 172, 65, 239, 90, 87, 149, 34, 183, 46, 62, 155, 176, 220, 244, 31, 117, 7, 235, 180, 100, 196, 6, 251, 182, 100, 3, 153, 199, 37, 251, 201, 180, 46, 217, 94, 102, 249, 163, 235, 211, 63, 179, 63, 227, 255, 225, 5, 16, 103, 94, 3, 99, 243, 195, 30, 243, 87, 67, 131, 211, 89, 114, 130, 28, 110, 244, 53, 112, 67, 75, 95, 36, 215, 28, 29, 136, 65, 92, 162, 227, 53, 8, 95, 35, 178, 4, 26, 52, 1, 20, 105, 208, 180, 93, 52, 118, 161, 216, 7, 88, 138, 198, 184, 220, 138, 69, 59, 198, 62, 126, 139, 120, 162, 99, 156, 213, 173, 184, 169, 224, 114, 143, 145, 153, 65, 180, 46, 33, 165, 196, 120, 139, 22, 128, 6, 209, 175, 214, 149, 164, 176, 173, 11, 78, 253, 163, 183, 130, 25, 137, 30, 28, 182, 104, 201, 100, 13, 214, 108, 201, 226, 49, 134, 75, 6, 115, 176, 165, 35, 99, 59, 216, 225, 115, 187, 255, 195, 244, 47, 159, 188, 0, 150, 187, 255, 64, 48, 242, 201, 248, 208, 75, 158, 138, 7, 94, 114, 40, 131, 243, 90, 250, 88, 57, 241, 165, 47, 134, 59, 139, 190, 96, 238, 62, 58, 40, 131, 24, 69, 199, 110, 16, 202, 70, 148, 9, 58, 40, 201, 46, 154, 54, 168, 226, 46, 90, 29, 244, 255, 42, 198, 165, 177, 71, 111, 199, 62, 126, 139, 120, 162, 55, 226, 192, 193, 77, 93, 69, 18, 22, 98, 115, 9, 9, 28, 164, 116, 139, 168, 131, 154, 80, 34, 116, 245, 40, 102, 235, 34, 83, 243, 56, 243, 47, 251, 35, 219, 194, 236, 68, 15, 20, 219, 181, 100, 223, 152, 190, 37, 243, 56, 88, 206, 145, 105, 29, 172, 238, 200, 44, 15, 22, 123, 100, 207, 153, 250, 241, 242, 171, 255, 212, 127, 183, 240, 15, 70, 190, 140, 111, 55, 250, 231, 241, 81, 70, 127, 86, 30, 99, 201, 115, 114, 4, 75, 142, 105, 112, 130, 75, 31, 52, 119, 16, 185, 45, 110, 49, 250, 202, 7, 153, 136, 14, 208, 32, 94, 209, 113, 28, 132, 21, 4, 157, 26, 108, 209, 162, 45, 122, 184, 80, 215, 75, 40, 127, 176, 20, 39, 177, 71, 187, 88, 180, 167, 224, 160, 118, 113, 224, 39, 113, 185, 65, 24, 14, 144, 174, 65, 8, 119, 145, 228, 45, 186, 64, 83, 26, 21, 163, 128, 173, 11, 75, 157, 91, 215, 159, 113, 136, 204, 200, 96, 97, 34, 91, 196, 76, 69, 214, 140, 161, 91, 50, 134, 131, 157, 92, 178, 165, 204, 236, 71, 175, 59, 204, 68, 143, 12, 120, 255, 43, 127, 172, 217, 127, 249, 149, 191, 240, 223, 142, 195, 215, 192, 119, 242, 38, 24, 220, 110, 116, 20, 72, 73, 235, 96, 13, 98, 215, 8, 43, 81, 6, 29, 160, 33, 91, 116, 108, 23, 93, 93, 168, 244, 49, 150, 162, 49, 46, 183, 98, 209, 174, 98, 37, 191, 45, 60, 203, 49, 14, 234, 14, 220, 84, 112, 185, 199, 136, 205, 66, 192, 118, 17, 212, 93, 164, 157, 46, 128, 30, 209, 178, 214, 197, 164, 182, 173, 155, 206, 8, 180, 30, 13, 246, 100, 233, 229, 97, 148, 34, 219, 197, 172, 45, 153, 190, 193, 42, 46, 89, 78, 70, 245, 163, 215, 213, 101, 144, 151, 171, 187, 191, 204, 242, 255, 240, 2, 224, 53, 48, 248, 178, 145, 55, 1, 63, 108, 201, 7, 58, 254, 171, 161, 193, 115, 46, 57, 11, 142, 105, 201, 81, 14, 78, 57, 250, 74, 184, 173, 232, 123, 229, 202, 163, 35, 66, 122, 90, 7, 110, 16, 199, 70, 136, 137, 248, 22, 13, 161, 63, 187, 232, 225, 37, 84, 122, 161, 252, 103, 48, 46, 96, 146, 222, 142, 149, 252, 182, 240, 44, 111, 199, 105, 131, 155, 186, 138, 48, 44, 196, 230, 0, 57, 220, 34, 204, 131, 180, 131, 178, 80, 37, 116, 1, 169, 103, 235, 70, 83, 246, 214, 227, 192, 110, 68, 143, 12, 251, 179, 244, 82, 49, 98, 75, 134, 110, 176, 129, 75, 118, 146, 9, 93, 50, 179, 131, 5, 30, 63, 238, 254, 206, 95, 245, 140, 108, 123, 111, 254, 203, 175, 252, 249, 191, 211, 255, 123, 201, 111, 229, 91, 44, 249, 49, 252, 248, 37, 159, 239, 142, 255, 72, 48, 114, 58, 28, 92, 228, 124, 57, 250, 232, 75, 226, 254, 162, 47, 155, 28, 180, 142, 14, 169, 106, 29, 196, 65, 76, 65, 196, 41, 192, 22, 253, 25, 116, 108, 23, 69, 61, 64, 249, 131, 165, 56, 143, 73, 218, 98, 209, 158, 130, 131, 218, 197, 105, 159, 199, 253, 46, 132, 225, 0, 1, 187, 132, 172, 14, 242, 12, 234, 48, 232, 75, 163, 104, 212, 176, 117, 115, 7, 189, 142, 222, 1, 38, 34, 122, 79, 152, 154, 200, 40, 13, 246, 106, 201, 172, 13, 22, 111, 201, 48, 14, 54, 115, 100, 84, 7, 123, 59, 50, 200, 103, 254, 149, 31, 47, 127, 228, 207, 255, 157, 229, 87, 254, 194, 109, 111, 130, 227, 191, 26, 26, 249, 196, 239, 253, 38, 24, 220, 71, 244, 229, 113, 175, 209, 33, 32, 31, 237, 147, 72, 109, 2, 215, 136, 41, 33, 6, 233, 167, 30, 91, 180, 107, 161, 132, 151, 80, 233, 99, 44, 69, 99, 89, 110, 197, 162, 157, 193, 80, 126, 43, 120, 138, 171, 56, 168, 59, 112, 83, 141, 251, 61, 70, 114, 46, 33, 135, 131, 184, 110, 17, 248, 65, 35, 64, 155, 232, 90, 251, 164, 161, 231, 70, 127, 176, 6, 209, 211, 193, 170, 68, 79, 16, 235, 180, 100, 196, 6, 251, 182, 100, 6, 7, 11, 249, 209, 209, 238, 143, 44, 48, 227, 188, 100, 189, 89, 245, 145, 217, 127, 249, 195, 255, 228, 127, 179, 228, 151, 248, 173, 35, 223, 104, 240, 51, 198, 91, 254, 35, 193, 232, 35, 224, 116, 150, 62, 68, 206, 119, 233, 107, 224, 134, 162, 175, 147, 155, 110, 157, 12, 114, 211, 136, 26, 65, 108, 196, 151, 112, 111, 209, 13, 202, 179, 139, 6, 46, 20, 245, 0, 205, 63, 131, 101, 1, 147, 244, 16, 12, 229, 183, 130, 167, 120, 8, 78, 27, 220, 212, 25, 228, 225, 0, 25, 27, 68, 113, 23, 145, 30, 100, 30, 84, 134, 66, 161, 107, 72, 73, 91, 247, 122, 208, 250, 232, 149, 96, 64, 162, 215, 134, 33, 138, 158, 44, 214, 108, 233, 209, 99, 15, 63, 122, 221, 76, 230, 116, 201, 222, 50, 197, 75, 182, 154, 25, 95, 178, 243, 107, 246, 95, 95, 0, 75, 254, 241, 173, 127, 32, 24, 39, 255, 35, 193, 216, 60, 240, 7, 125, 40, 156, 215, 210, 199, 202, 137, 71, 95, 15, 55, 23, 125, 205, 36, 160, 117, 98, 200, 83, 235, 8, 14, 2, 10, 194, 77, 244, 183, 104, 206, 160, 93, 151, 80, 212, 65, 153, 175, 98, 38, 206, 99, 146, 118, 49, 106, 79, 11, 167, 180, 139, 211, 62, 143, 251, 61, 70, 120, 22, 50, 182, 139, 184, 14, 34, 189, 69, 41, 168, 12, 168, 27, 101, 108, 221, 223, 65, 187, 163, 215, 96, 176, 21, 209, 195, 194, 230, 68, 214, 137, 225, 138, 236, 27, 211, 247, 163, 215, 133, 100, 60, 151, 236, 254, 29, 127, 213, 147, 97, 103, 240, 95, 126, 246, 231, 254, 107, 126, 105, 201, 23, 220, 245, 38, 248, 225, 131, 242, 0, 75, 30, 114, 108, 142, 224, 131, 28, 211, 224, 4, 35, 103, 205, 29, 68, 95, 24, 119, 217, 250, 238, 73, 70, 235, 36, 145, 51, 16, 80, 226, 11, 162, 79, 49, 118, 209, 174, 65, 3, 47, 161, 204, 65, 243, 207, 96, 89, 238, 192, 168, 157, 193, 86, 126, 253, 248, 252, 103, 112, 74, 119, 224, 166, 206, 32, 15, 11, 225, 57, 64, 26, 7, 137, 221, 34, 246, 131, 94, 52, 254, 159, 244, 7, 141, 107, 221, 211, 65, 139, 163, 91, 63, 216, 132, 232, 13, 97, 94, 34, 67, 52, 216, 168, 200, 154, 49, 116, 63, 122, 221, 67, 166, 114, 201, 156, 190, 101, 247, 7, 11, 191, 188, 252, 236, 231, 127, 123, 222, 1, 11, 255, 108, 244, 215, 243, 173, 71, 255, 108, 62, 214, 146, 143, 206, 35, 45, 121, 236, 177, 57, 148, 15, 114, 112, 131, 51, 141, 190, 0, 238, 38, 250, 34, 185, 227, 214, 153, 32, 49, 141, 144, 17, 193, 70, 112, 143, 255, 203, 193, 160, 21, 131, 230, 236, 162, 126, 131, 138, 30, 163, 249, 193, 76, 156, 199, 36, 61, 10, 91, 249, 245, 227, 243, 63, 10, 167, 125, 30, 247, 27, 228, 225, 0, 49, 91, 72, 227, 46, 82, 77, 236, 183, 40, 14, 181, 66, 151, 145, 170, 182, 110, 247, 160, 251, 209, 91, 49, 88, 146, 232, 217, 97, 145, 150, 222, 46, 102, 109, 233, 245, 99, 24, 151, 140, 231, 238, 238, 143, 108, 47, 179, 188, 100, 183, 153, 244, 37, 155, 255, 242, 135, 126, 254, 183, 151, 159, 253, 185, 47, 246, 38, 24, 57, 139, 221, 255, 98, 60, 250, 64, 57, 235, 165, 175, 132, 219, 106, 125, 187, 220, 125, 235, 172, 144, 164, 79, 84, 248, 6, 209, 4, 177, 126, 167, 247, 193, 160, 162, 11, 101, 190, 138, 153, 104, 44, 203, 29, 24, 181, 167, 193, 17, 221, 135, 155, 106, 220, 239, 49, 194, 179, 16, 179, 75, 8, 237, 32, 216, 91, 84, 131, 226, 160, 27, 55, 172, 100, 233, 22, 15, 58, 222, 122, 22, 88, 140, 232, 133, 97, 124, 162, 103, 138, 5, 91, 50, 116, 131, 13, 92, 50, 149, 239, 186, 251, 153, 253, 215, 23, 64, 228, 77, 192, 23, 47, 249, 1, 199, 127, 53, 52, 248, 220, 75, 30, 143, 199, 142, 156, 206, 221, 111, 130, 209, 87, 197, 45, 182, 190, 117, 2, 209, 58, 67, 36, 12, 68, 147, 224, 130, 208, 15, 90, 177, 69, 175, 6, 221, 59, 64, 153, 23, 106, 127, 18, 203, 2, 38, 233, 81, 152, 203, 175, 28, 31, 254, 129, 56, 109, 112, 83, 103, 16, 137, 32, 63, 151, 16, 200, 65, 104, 183, 110, 250, 91, 157, 165, 107, 53, 255, 214, 69, 239, 90, 183, 117, 208, 229, 214, 245, 103, 25, 162, 151, 132, 145, 137, 94, 36, 198, 42, 50, 107, 131, 197, 91, 50, 140, 111, 220, 253, 193, 98, 143, 236, 254, 207, 126, 254, 58, 253, 203, 203, 31, 252, 179, 255, 213, 224, 87, 151, 124, 25, 223, 110, 201, 207, 123, 227, 155, 96, 112, 22, 75, 31, 25, 167, 25, 125, 244, 220, 74, 244, 21, 114, 187, 209, 81, 24, 4, 165, 17, 47, 194, 247, 137, 138, 236, 66, 166, 65, 37, 62, 216, 52, 103, 139, 238, 45, 84, 244, 0, 157, 15, 54, 226, 38, 76, 210, 46, 70, 237, 105, 112, 68, 151, 112, 218, 231, 113, 197, 65, 36, 142, 145, 180, 65, 32, 119, 25, 236, 27, 23, 127, 88, 174, 79, 209, 74, 58, 219, 186, 230, 140, 64, 235, 209, 96, 79, 162, 199, 135, 93, 250, 209, 235, 130, 13, 246, 109, 169, 25, 116, 33, 151, 172, 40, 3, 187, 100, 132, 7, 251, 60, 50, 224, 219, 221, 31, 107, 249, 95, 126, 249, 183, 255, 203, 245, 127, 45, 252, 166, 113, 252, 87, 67, 35, 159, 224, 27, 122, 19, 12, 174, 188, 117, 74, 8, 80, 35, 118, 132, 82, 159, 6, 122, 144, 248, 45, 58, 243, 193, 166, 90, 187, 168, 232, 66, 147, 143, 177, 17, 141, 89, 185, 15, 163, 118, 18, 139, 249, 213, 226, 99, 159, 196, 17, 221, 135, 203, 106, 92, 241, 85, 228, 103, 33, 105, 187, 182, 255, 130, 63, 200, 246, 22, 237, 176, 62, 159, 162, 122, 20, 179, 117, 151, 7, 77, 111, 61, 14, 76, 71, 244, 206, 48, 65, 209, 123, 197, 148, 69, 22, 143, 49, 140, 108, 38, 115, 186, 100, 114, 7, 107, 188, 100, 177, 25, 243, 37, 107, 63, 227, 255, 225, 5, 16, 249, 7, 131, 175, 25, 239, 255, 38, 184, 225, 47, 136, 6, 231, 30, 125, 73, 220, 95, 244, 101, 15, 162, 208, 58, 61, 100, 11, 132, 146, 200, 234, 211, 184, 15, 250, 176, 139, 82, 125, 176, 169, 223, 46, 106, 28, 116, 254, 12, 102, 101, 139, 73, 122, 32, 22, 243, 171, 197, 199, 126, 44, 78, 27, 92, 214, 25, 68, 34, 136, 208, 174, 15, 91, 127, 215, 220, 15, 242, 111, 65, 54, 232, 23, 237, 107, 221, 217, 65, 163, 91, 143, 0, 19, 209, 122, 82, 88, 155, 232, 105, 98, 181, 150, 140, 219, 96, 250, 34, 11, 201, 120, 46, 25, 216, 193, 246, 46, 217, 103, 166, 123, 201, 182, 247, 230, 127, 242, 2, 136, 252, 86, 190, 197, 114, 252, 31, 9, 70, 62, 229, 125, 111, 130, 145, 147, 226, 16, 163, 143, 155, 155, 136, 190, 182, 193, 165, 70, 135, 96, 16, 145, 70, 176, 136, 29, 200, 43, 105, 222, 162, 15, 180, 229, 18, 138, 247, 193, 199, 78, 82, 212, 75, 232, 124, 176, 17, 55, 97, 146, 46, 97, 215, 158, 56, 159, 75, 56, 237, 243, 184, 226, 70, 42, 46, 217, 221, 250, 65, 38, 119, 17, 239, 227, 191, 199, 95, 104, 16, 253, 2, 221, 164, 185, 173, 203, 206, 20, 180, 158, 14, 134, 37, 122, 133, 24, 168, 200, 148, 13, 86, 110, 233, 61, 100, 42, 151, 204, 233, 96, 105, 151, 147, 187, 63, 216, 249, 241, 242, 7, 126, 235, 191, 88, 126, 249, 183, 135, 255, 56, 95, 201, 55, 93, 242, 131, 249, 64, 145, 207, 189, 251, 38, 24, 121, 114, 14, 37, 250, 248, 56, 217, 232, 107, 224, 134, 162, 175, 115, 112, 217, 209, 225, 24, 68, 167, 17, 56, 226, 8, 162, 60, 200, 250, 142, 79, 11, 51, 104, 212, 37, 148, 243, 7, 183, 188, 21, 6, 3, 209, 152, 149, 187, 177, 107, 39, 49, 154, 95, 33, 62, 240, 121, 156, 207, 125, 184, 172, 198, 21, 31, 123, 203, 214, 15, 162, 59, 140, 247, 30, 58, 66, 137, 64, 1, 169, 39, 186, 212, 84, 190, 245, 68, 48, 32, 229, 117, 109, 6, 91, 20, 53, 92, 110, 218, 146, 233, 27, 172, 226, 146, 241, 28, 236, 234, 146, 249, 61, 248, 43, 254, 133, 85, 31, 153, 253, 151, 223, 255, 103, 254, 243, 145, 255, 61, 248, 173, 163, 191, 23, 63, 102, 201, 71, 225, 35, 70, 158, 228, 234, 155, 96, 112, 82, 203, 173, 127, 65, 52, 54, 55, 247, 131, 190, 230, 65, 8, 90, 231, 134, 72, 129, 56, 18, 214, 45, 178, 78, 19, 246, 109, 74, 69, 235, 14, 80, 227, 87, 55, 190, 24, 6, 179, 178, 197, 36, 61, 22, 163, 249, 21, 226, 3, 63, 22, 71, 189, 197, 101, 93, 181, 2, 96, 42, 62, 34, 66, 7, 136, 229, 184, 227, 95, 240, 7, 29, 217, 162, 101, 116, 176, 117, 115, 7, 189, 110, 61, 5, 12, 69, 235, 97, 97, 118, 34, 3, 53, 152, 175, 232, 161, 99, 3, 151, 76, 229, 96, 69, 151, 140, 237, 238, 238, 143, 108, 53, 51, 190, 100, 231, 215, 242, 255, 240, 2, 136, 252, 227, 193, 87, 142, 124, 235, 193, 79, 93, 94, 63, 220, 181, 255, 78, 48, 120, 242, 165, 15, 136, 179, 139, 62, 104, 238, 32, 250, 194, 46, 253, 127, 148, 142, 190, 254, 65, 56, 26, 145, 34, 112, 32, 169, 228, 120, 139, 38, 12, 218, 178, 111, 83, 188, 65, 57, 143, 209, 249, 87, 63, 78, 3, 123, 113, 6, 147, 116, 9, 211, 246, 19, 199, 225, 92, 194, 81, 159, 116, 176, 242, 11, 169, 56, 70, 222, 206, 108, 253, 66, 194, 7, 45, 216, 162, 71, 180, 12, 52, 148, 254, 182, 174, 60, 131, 208, 122, 67, 152, 151, 86, 115, 228, 82, 69, 54, 141, 185, 139, 30, 70, 54, 115, 121, 157, 214, 71, 236, 126, 188, 252, 210, 159, 254, 207, 248, 165, 37, 95, 112, 252, 87, 67, 131, 207, 177, 188, 126, 220, 247, 125, 19, 60, 236, 239, 136, 70, 199, 98, 16, 154, 70, 212, 8, 226, 22, 57, 38, 229, 91, 244, 100, 161, 78, 23, 125, 218, 207, 133, 14, 95, 197, 64, 124, 34, 131, 178, 25, 154, 155, 48, 109, 55, 97, 61, 191, 30, 124, 206, 243, 56, 156, 91, 189, 94, 10, 151, 85, 184, 226, 51, 72, 209, 135, 173, 127, 207, 185, 31, 52, 133, 30, 129, 26, 82, 82, 116, 181, 41, 126, 235, 173, 96, 70, 90, 207, 14, 163, 20, 189, 96, 140, 91, 100, 3, 153, 199, 120, 29, 210, 183, 237, 254, 96, 225, 151, 121, 1, 252, 173, 121, 7, 44, 252, 179, 37, 95, 127, 239, 155, 224, 202, 95, 16, 229, 8, 6, 167, 19, 125, 148, 156, 114, 244, 149, 112, 91, 173, 47, 152, 187, 71, 39, 134, 48, 129, 32, 18, 211, 45, 82, 78, 7, 118, 209, 165, 133, 202, 29, 249, 88, 93, 250, 60, 40, 252, 25, 204, 202, 142, 222, 163, 205, 84, 61, 4, 235, 249, 245, 224, 115, 62, 196, 39, 231, 201, 81, 111, 112, 89, 39, 145, 138, 113, 211, 214, 15, 146, 57, 8, 240, 46, 138, 48, 104, 10, 40, 218, 160, 137, 173, 251, 59, 104, 119, 235, 77, 96, 46, 90, 47, 12, 227, 211, 122, 172, 216, 177, 165, 23, 143, 49, 140, 108, 38, 115, 26, 89, 93, 6, 121, 201, 104, 15, 246, 124, 100, 240, 199, 203, 47, 254, 169, 191, 181, 124, 241, 55, 193, 232, 163, 225, 212, 162, 207, 151, 163, 143, 190, 42, 110, 177, 245, 197, 15, 98, 209, 8, 19, 81, 3, 25, 37, 196, 91, 116, 96, 208, 147, 75, 168, 220, 160, 150, 87, 252, 216, 115, 202, 63, 24, 136, 155, 48, 73, 71, 88, 183, 205, 246, 125, 151, 120, 228, 31, 112, 50, 23, 112, 212, 183, 226, 150, 199, 173, 67, 63, 136, 220, 66, 50, 47, 33, 231, 20, 97, 139, 42, 13, 186, 6, 122, 74, 139, 91, 23, 159, 89, 104, 189, 36, 103, 254, 134, 103, 176, 87, 209, 227, 198, 238, 45, 153, 199, 193, 120, 70, 54, 150, 249, 93, 50, 209, 131, 245, 94, 178, 240, 153, 253, 215, 23, 64, 188, 247, 155, 96, 228, 57, 57, 130, 232, 195, 226, 28, 163, 15, 157, 251, 104, 125, 133, 220, 110, 235, 64, 12, 226, 210, 8, 25, 17, 220, 34, 193, 68, 124, 23, 61, 25, 20, 233, 18, 106, 25, 116, 248, 186, 247, 121, 55, 128, 117, 187, 13, 3, 250, 53, 224, 19, 222, 130, 147, 185, 27, 151, 181, 228, 54, 189, 229, 107, 72, 209, 66, 228, 14, 144, 225, 65, 206, 183, 40, 203, 160, 77, 160, 140, 84, 21, 93, 112, 234, 223, 122, 49, 6, 123, 18, 189, 63, 76, 83, 244, 142, 49, 113, 145, 49, 28, 236, 228, 210, 139, 202, 216, 46, 25, 228, 193, 86, 47, 217, 115, 166, 126, 188, 252, 19, 191, 249, 55, 63, 216, 252, 131, 241, 198, 55, 193, 200, 231, 230, 145, 162, 31, 158, 115, 137, 62, 68, 206, 55, 250, 50, 184, 167, 214, 247, 202, 173, 183, 14, 202, 32, 70, 32, 130, 4, 116, 139, 124, 15, 58, 176, 139, 34, 13, 202, 118, 128, 2, 7, 109, 63, 171, 6, 133, 161, 9, 86, 233, 61, 48, 160, 95, 3, 62, 225, 123, 224, 156, 227, 245, 82, 184, 172, 115, 8, 70, 16, 164, 3, 132, 115, 33, 195, 187, 232, 194, 160, 47, 160, 110, 148, 17, 20, 153, 154, 183, 94, 134, 193, 110, 68, 239, 204, 96, 133, 162, 39, 139, 53, 139, 215, 233, 187, 246, 151, 251, 131, 93, 93, 50, 191, 131, 101, 94, 178, 222, 12, 251, 178, 150, 255, 229, 31, 255, 147, 255, 233, 248, 225, 53, 240, 254, 111, 130, 193, 115, 46, 143, 250, 11, 162, 209, 55, 196, 253, 181, 190, 111, 210, 0, 98, 68, 200, 64, 64, 137, 239, 22, 233, 31, 52, 228, 18, 202, 182, 80, 203, 99, 180, 189, 49, 16, 55, 171, 73, 98, 170, 26, 235, 246, 147, 197, 177, 160, 15, 211, 115, 190, 17, 183, 28, 4, 227, 42, 82, 55, 8, 231, 37, 68, 125, 80, 135, 45, 10, 53, 104, 220, 167, 62, 169, 234, 160, 203, 173, 23, 224, 228, 95, 239, 12, 214, 38, 122, 157, 24, 174, 200, 196, 13, 6, 48, 122, 42, 89, 209, 37, 99, 59, 216, 225, 37, 91, 205, 140, 47, 175, 83, 255, 155, 127, 115, 150, 255, 135, 23, 64, 188, 254, 227, 205, 87, 142, 243, 111, 130, 193, 231, 94, 250, 241, 120, 242, 232, 99, 226, 4, 163, 143, 155, 155, 104, 125, 115, 220, 107, 251, 52, 10, 55, 253, 225, 224, 193, 239, 131, 65, 67, 6, 45, 58, 64, 45, 23, 218, 123, 6, 3, 209, 216, 148, 55, 97, 221, 62, 98, 254, 14, 48, 163, 95, 16, 31, 236, 0, 15, 251, 3, 142, 229, 13, 184, 44, 112, 203, 87, 17, 164, 32, 117, 151, 16, 227, 65, 212, 119, 81, 153, 65, 167, 64, 37, 41, 44, 186, 230, 140, 64, 235, 221, 24, 172, 74, 244, 10, 13, 54, 42, 94, 7, 237, 194, 191, 236, 143, 172, 34, 131, 25, 61, 173, 172, 238, 146, 101, 102, 180, 151, 215, 97, 255, 184, 251, 49, 47, 128, 191, 209, 255, 59, 94, 191, 96, 243, 189, 198, 231, 122, 19, 92, 255, 99, 193, 232, 59, 224, 134, 90, 223, 40, 247, 221, 78, 254, 191, 150, 46, 132, 239, 214, 247, 193, 32, 253, 187, 104, 209, 66, 217, 14, 208, 222, 160, 237, 39, 177, 41, 187, 88, 165, 247, 194, 140, 126, 65, 124, 176, 119, 195, 57, 111, 113, 89, 39, 17, 140, 32, 72, 199, 200, 231, 32, 198, 151, 208, 8, 42, 179, 69, 233, 168, 36, 186, 203, 131, 178, 183, 222, 135, 193, 122, 180, 30, 28, 182, 40, 50, 92, 131, 89, 139, 222, 64, 230, 49, 178, 162, 12, 108, 100, 135, 153, 232, 229, 117, 198, 63, 221, 253, 120, 249, 199, 254, 196, 223, 88, 118, 223, 4, 253, 245, 239, 244, 38, 24, 125, 16, 156, 81, 244, 129, 114, 214, 173, 239, 134, 107, 107, 125, 211, 228, 0, 4, 136, 120, 129, 104, 94, 125, 31, 12, 210, 63, 168, 199, 37, 148, 109, 161, 147, 199, 104, 123, 99, 32, 110, 197, 42, 29, 96, 224, 126, 130, 56, 144, 99, 156, 243, 173, 184, 229, 70, 54, 142, 145, 186, 133, 124, 94, 66, 218, 7, 141, 216, 248, 164, 83, 131, 210, 109, 125, 218, 89, 27, 221, 122, 7, 6, 43, 209, 122, 88, 216, 156, 232, 141, 58, 243, 47, 251, 131, 37, 92, 122, 51, 153, 211, 200, 234, 50, 200, 75, 239, 54, 147, 190, 100, 246, 95, 126, 223, 31, 255, 79, 150, 252, 210, 59, 189, 9, 70, 63, 24, 207, 188, 244, 209, 112, 106, 173, 15, 154, 59, 104, 125, 103, 92, 103, 35, 4, 68, 164, 241, 135, 131, 65, 242, 64, 112, 199, 38, 220, 59, 168, 199, 160, 66, 151, 80, 200, 160, 189, 103, 176, 14, 96, 86, 222, 130, 129, 187, 3, 123, 250, 153, 241, 97, 238, 192, 129, 188, 17, 55, 5, 110, 249, 12, 178, 180, 16, 188, 3, 36, 121, 144, 246, 61, 182, 134, 90, 109, 209, 74, 106, 139, 46, 59, 83, 128, 30, 16, 182, 165, 245, 28, 177, 84, 209, 203, 198, 232, 69, 207, 35, 203, 185, 100, 96, 7, 243, 187, 244, 74, 51, 224, 75, 70, 126, 172, 217, 127, 125, 1, 68, 126, 199, 125, 127, 59, 52, 242, 41, 121, 128, 232, 71, 229, 20, 162, 143, 140, 211, 140, 254, 59, 162, 193, 197, 180, 190, 75, 174, 185, 117, 56, 6, 209, 193, 77, 127, 89, 52, 136, 245, 56, 243, 71, 132, 65, 133, 6, 53, 59, 70, 123, 131, 170, 159, 199, 172, 108, 177, 74, 239, 138, 61, 253, 204, 248, 48, 239, 138, 67, 222, 197, 77, 157, 71, 54, 130, 44, 29, 32, 162, 11, 73, 222, 99, 41, 6, 197, 217, 234, 222, 13, 138, 9, 74, 77, 229, 91, 175, 196, 96, 67, 90, 207, 14, 163, 20, 189, 96, 140, 91, 203, 18, 50, 146, 145, 57, 29, 44, 237, 242, 58, 200, 167, 119, 63, 94, 126, 239, 111, 252, 199, 131, 95, 93, 242, 53, 111, 127, 19, 12, 158, 42, 242, 252, 131, 163, 137, 62, 74, 78, 57, 250, 74, 6, 23, 214, 250, 142, 73, 0, 136, 14, 193, 194, 173, 127, 62, 24, 228, 126, 220, 253, 74, 24, 20, 242, 42, 170, 222, 88, 135, 91, 177, 74, 199, 152, 185, 159, 26, 78, 227, 0, 135, 124, 7, 110, 185, 145, 141, 99, 4, 111, 33, 162, 23, 24, 248, 65, 41, 118, 209, 44, 170, 183, 69, 115, 233, 117, 235, 53, 24, 108, 69, 235, 121, 97, 124, 90, 143, 21, 59, 22, 61, 122, 236, 97, 244, 120, 178, 171, 203, 235, 252, 222, 190, 251, 203, 44, 255, 203, 63, 250, 199, 254, 163, 223, 251, 27, 227, 195, 107, 224, 234, 155, 96, 240, 51, 150, 254, 40, 124, 202, 229, 33, 127, 65, 52, 250, 112, 7, 71, 31, 125, 85, 131, 139, 108, 92, 63, 225, 0, 169, 34, 115, 184, 227, 125, 48, 232, 198, 56, 249, 74, 24, 20, 50, 104, 239, 25, 172, 3, 152, 149, 55, 98, 230, 238, 195, 170, 126, 6, 124, 128, 187, 113, 26, 111, 196, 77, 129, 91, 62, 131, 44, 5, 217, 187, 192, 48, 47, 100, 126, 215, 167, 221, 177, 92, 91, 116, 147, 230, 162, 43, 207, 32, 160, 103, 132, 145, 105, 61, 74, 76, 86, 244, 190, 49, 125, 145, 145, 28, 76, 104, 244, 216, 178, 195, 75, 207, 53, 75, 190, 100, 237, 103, 249, 63, 188, 0, 226, 51, 188, 9, 70, 63, 36, 207, 31, 125, 88, 156, 99, 244, 161, 15, 174, 36, 126, 246, 243, 215, 43, 28, 92, 112, 235, 88, 12, 66, 3, 2, 55, 72, 228, 214, 163, 94, 9, 227, 237, 111, 133, 65, 213, 207, 99, 86, 182, 88, 165, 207, 128, 85, 253, 12, 248, 0, 159, 1, 135, 188, 139, 155, 58, 143, 108, 4, 113, 186, 236, 67, 38, 73, 233, 32, 204, 151, 208, 139, 119, 93, 252, 65, 241, 91, 111, 197, 96, 76, 90, 143, 15, 211, 212, 122, 202, 88, 185, 232, 73, 100, 45, 35, 187, 202, 228, 70, 150, 153, 209, 142, 108, 123, 111, 254, 39, 47, 128, 184, 250, 38, 248, 125, 183, 188, 9, 30, 245, 23, 68, 131, 195, 141, 190, 140, 193, 85, 181, 190, 93, 238, 30, 132, 134, 72, 129, 56, 14, 242, 186, 117, 223, 251, 96, 161, 102, 203, 249, 183, 194, 66, 213, 27, 235, 112, 43, 86, 233, 24, 51, 247, 147, 194, 81, 28, 227, 144, 239, 192, 45, 55, 178, 113, 104, 127, 235, 7, 41, 189, 132, 216, 159, 153, 251, 65, 191, 40, 224, 22, 253, 165, 221, 173, 55, 97, 176, 24, 173, 71, 134, 9, 106, 61, 89, 12, 90, 244, 250, 49, 140, 209, 43, 202, 192, 70, 118, 216, 137, 254, 81, 150, 156, 145, 95, 94, 254, 145, 95, 255, 157, 31, 108, 254, 217, 184, 241, 77, 240, 57, 255, 88, 240, 224, 151, 193, 32, 22, 32, 79, 164, 109, 139, 188, 146, 230, 93, 219, 87, 194, 160, 60, 7, 104, 227, 178, 234, 186, 233, 240, 21, 172, 3, 152, 149, 55, 98, 230, 222, 130, 121, 125, 39, 252, 208, 183, 224, 40, 222, 142, 155, 2, 183, 124, 205, 197, 161, 31, 100, 239, 0, 121, 190, 111, 238, 7, 253, 218, 162, 161, 244, 23, 159, 116, 255, 242, 255, 203, 230, 232, 49, 97, 106, 90, 175, 19, 195, 213, 122, 232, 216, 192, 232, 193, 100, 75, 151, 76, 238, 112, 144, 63, 202, 104, 15, 38, 125, 201, 236, 191, 252, 195, 191, 246, 31, 46, 249, 165, 221, 55, 193, 200, 119, 228, 135, 69, 127, 44, 62, 241, 210, 15, 118, 249, 143, 5, 15, 251, 59, 162, 209, 151, 55, 184, 218, 118, 254, 111, 138, 22, 210, 70, 22, 183, 72, 243, 32, 241, 151, 188, 229, 15, 10, 131, 222, 198, 143, 47, 134, 155, 223, 13, 131, 89, 217, 197, 48, 125, 30, 204, 235, 59, 225, 135, 126, 54, 156, 240, 46, 110, 234, 156, 199, 12, 253, 32, 168, 31, 153, 231, 75, 104, 7, 245, 217, 69, 7, 105, 40, 186, 221, 131, 250, 163, 71, 131, 73, 105, 189, 66, 12, 84, 235, 65, 99, 238, 162, 183, 145, 217, 140, 30, 88, 182, 119, 201, 68, 15, 214, 123, 121, 29, 249, 95, 255, 157, 53, 251, 175, 47, 128, 120, 253, 77, 155, 175, 95, 242, 51, 248, 241, 209, 31, 148, 103, 136, 126, 96, 206, 34, 250, 224, 56, 211, 214, 215, 48, 184, 164, 214, 247, 202, 149, 131, 184, 16, 166, 45, 178, 72, 82, 119, 145, 248, 65, 37, 46, 249, 248, 74, 120, 211, 91, 97, 208, 243, 246, 150, 119, 67, 48, 76, 199, 88, 186, 159, 8, 14, 225, 42, 78, 248, 22, 63, 92, 40, 23, 221, 136, 199, 85, 196, 239, 35, 131, 122, 128, 228, 15, 218, 177, 69, 197, 6, 29, 4, 21, 166, 224, 232, 101, 24, 236, 70, 235, 169, 97, 136, 90, 111, 23, 179, 214, 122, 6, 89, 200, 200, 150, 50, 179, 145, 65, 30, 108, 245, 242, 58, 233, 63, 238, 126, 188, 252, 67, 127, 244, 63, 24, 252, 234, 242, 250, 101, 155, 239, 184, 244, 15, 230, 51, 253, 224, 147, 55, 193, 137, 63, 22, 124, 161, 151, 193, 32, 16, 32, 76, 68, 109, 139, 164, 14, 210, 188, 139, 74, 12, 106, 115, 96, 247, 173, 48, 232, 237, 25, 76, 195, 86, 6, 229, 35, 182, 230, 30, 44, 221, 219, 49, 181, 143, 194, 79, 121, 35, 14, 225, 13, 94, 175, 131, 155, 2, 23, 125, 18, 137, 250, 200, 248, 29, 32, 210, 11, 201, 223, 69, 131, 6, 45, 219, 250, 164, 167, 135, 127, 177, 51, 88, 0, 246, 161, 245, 164, 48, 56, 173, 55, 106, 176, 96, 209, 115, 199, 24, 70, 102, 115, 56, 170, 63, 234, 249, 101, 153, 151, 215, 1, 223, 236, 254, 50, 203, 255, 242, 11, 191, 250, 239, 255, 194, 199, 119, 192, 169, 55, 193, 175, 255, 14, 63, 99, 185, 254, 159, 10, 30, 247, 199, 130, 209, 167, 204, 29, 180, 190, 182, 193, 165, 54, 162, 64, 80, 182, 62, 201, 217, 187, 189, 15, 6, 181, 89, 40, 216, 177, 7, 190, 24, 130, 89, 217, 213, 171, 244, 17, 155, 245, 190, 152, 218, 71, 225, 167, 188, 179, 79, 14, 144, 227, 189, 132, 155, 58, 143, 120, 252, 232, 67, 120, 72, 212, 49, 178, 58, 136, 244, 37, 20, 100, 80, 162, 45, 106, 248, 192, 197, 255, 229, 223, 250, 2, 163, 63, 122, 36, 217, 207, 37, 51, 59, 24, 225, 232, 185, 102, 201, 151, 172, 253, 47, 252, 234, 122, 1, 196, 155, 223, 4, 163, 63, 34, 159, 62, 250, 57, 57, 130, 232, 35, 227, 52, 91, 159, 62, 119, 131, 190, 209, 185, 96, 175, 188, 16, 20, 98, 180, 69, 16, 137, 233, 46, 178, 62, 232, 195, 1, 10, 182, 208, 195, 171, 126, 124, 49, 60, 248, 221, 16, 12, 211, 85, 236, 93, 97, 22, 191, 57, 60, 206, 43, 78, 224, 24, 199, 123, 31, 46, 250, 71, 55, 175, 252, 32, 126, 65, 86, 47, 33, 252, 131, 130, 236, 162, 104, 143, 92, 252, 79, 255, 53, 127, 176, 30, 173, 55, 103, 176, 72, 209, 11, 54, 216, 183, 232, 49, 100, 39, 163, 71, 149, 189, 141, 44, 51, 163, 29, 217, 246, 222, 252, 79, 95, 0, 113, 237, 77, 48, 242, 243, 238, 255, 11, 162, 115, 111, 130, 209, 231, 200, 41, 55, 46, 134, 107, 107, 92, 54, 81, 0, 49, 34, 100, 91, 252, 247, 228, 65, 142, 119, 209, 135, 133, 218, 28, 160, 135, 65, 111, 207, 56, 120, 55, 44, 204, 202, 67, 176, 119, 143, 194, 230, 222, 135, 239, 249, 40, 156, 192, 67, 112, 83, 63, 250, 225, 66, 185, 232, 147, 72, 84, 144, 192, 3, 164, 122, 16, 254, 75, 232]);
fileData4.push.apply(fileData4, [17, 69, 219, 162, 170, 131, 46, 127, 226, 211, 127, 205, 31, 172, 68, 235, 97, 97, 118, 90, 47, 213, 96, 199, 162, 119, 143, 73, 140, 222, 79, 166, 53, 94, 71, 248, 198, 221, 143, 151, 127, 240, 87, 254, 189, 133, 127, 240, 131, 79, 222, 4, 95, 254, 143, 5, 163, 207, 151, 211, 111, 125, 97, 131, 235, 108, 132, 224, 248, 15, 7, 131, 132, 17, 193, 93, 247, 189, 18, 6, 181, 25, 84, 235, 42, 74, 27, 148, 252, 38, 25, 148, 143, 216, 154, 31, 48, 76, 95, 10, 155, 123, 31, 190, 231, 23, 193, 241, 126, 234, 245, 58, 184, 169, 243, 136, 71, 35, 81, 199, 136, 235, 66, 170, 47, 161, 35, 87, 255, 5, 127, 80, 198, 65, 91, 65, 217, 153, 2, 244, 128, 48, 47, 173, 23, 105, 176, 87, 209, 251, 54, 88, 191, 232, 169, 100, 69, 163, 39, 151, 53, 94, 50, 218, 195, 73, 255, 40, 179, 255, 242, 15, 252, 145, 127, 119, 201, 47, 241, 91, 163, 191, 41, 63, 111, 233, 143, 197, 39, 142, 126, 60, 158, 188, 245, 73, 113, 142, 173, 207, 157, 91, 65, 223, 37, 215, 12, 34, 114, 235, 251, 96, 144, 209, 173, 237, 251, 96, 80, 134, 75, 168, 86, 208, 195, 171, 40, 121, 99, 26, 238, 211, 171, 244, 35, 102, 75, 76, 222, 247, 141, 103, 223, 243, 201, 233, 113, 188, 247, 225, 162, 27, 241, 56, 131, 4, 46, 196, 245, 0, 249, 63, 51, 247, 131, 174, 81, 198, 45, 234, 76, 217, 209, 43, 49, 216, 144, 214, 203, 51, 216, 165, 232, 29, 27, 172, 92, 244, 42, 50, 152, 209, 235, 202, 240, 70, 79, 52, 235, 189, 100, 228, 199, 154, 253, 215, 23, 64, 244, 111, 226, 235, 151, 254, 49, 124, 130, 232, 143, 203, 147, 68, 63, 54, 39, 210, 250, 4, 57, 223, 214, 247, 193, 109, 129, 107, 38, 4, 32, 64, 239, 241, 62, 88, 238, 254, 83, 194, 66, 15, 23, 26, 123, 18, 211, 176, 197, 172, 60, 10, 147, 87, 88, 198, 59, 49, 193, 199, 248, 218, 123, 241, 32, 175, 120, 246, 135, 224, 154, 182, 184, 232, 147, 8, 85, 144, 192, 3, 4, 251, 131, 187, 230, 126, 80, 183, 45, 10, 75, 157, 183, 88, 3, 182, 162, 245, 194, 12, 246, 167, 245, 100, 177, 102, 209, 235, 55, 216, 198, 232, 33, 101, 99, 35, 107, 204, 80, 71, 79, 58, 107, 255, 242, 247, 255, 225, 127, 103, 240, 171, 75, 127, 25, 223, 241, 7, 159, 188, 9, 174, 255, 177, 224, 210, 127, 45, 24, 125, 22, 156, 84, 235, 147, 229, 208, 27, 87, 197, 69, 130, 4, 144, 15, 16, 175, 65, 254, 182, 72, 240, 32, 229, 151, 188, 229, 15, 10, 11, 141, 109, 148, 252, 38, 204, 202, 37, 204, 211, 23, 199, 4, 31, 227, 107, 191, 56, 206, 118, 23, 215, 116, 43, 18, 18, 132, 234, 24, 113, 253, 224, 220, 214, 15, 106, 178, 208, 38, 221, 242, 247, 248, 11, 125, 103, 13, 208, 51, 194, 200, 180, 222, 165, 193, 106, 181, 30, 58, 54, 48, 122, 51, 153, 211, 200, 240, 14, 103, 249, 71, 89, 111, 134, 61, 102, 249, 95, 126, 207, 207, 254, 237, 245, 14, 56, 124, 19, 60, 224, 47, 136, 70, 63, 24, 207, 220, 250, 140, 56, 190, 214, 39, 206, 125, 160, 111, 145, 11, 6, 225, 32, 58, 91, 132, 111, 92, 253, 35, 194, 32, 226, 131, 38, 28, 120, 251, 91, 97, 161, 228, 141, 93, 184, 27, 243, 116, 21, 147, 247, 29, 227, 193, 207, 224, 108, 239, 195, 69, 131, 132, 92, 69, 8, 63, 152, 112, 190, 235, 220, 143, 207, 184, 248, 131, 37, 105, 189, 63, 131, 117, 106, 61, 104, 108, 93, 244, 54, 14, 150, 51, 122, 102, 89, 224, 37, 67, 61, 152, 241, 232, 193, 255, 240, 2, 136, 254, 7, 124, 77, 244, 15, 224, 103, 255, 160, 62, 226, 165, 63, 22, 140, 126, 90, 206, 34, 250, 224, 6, 199, 218, 250, 38, 184, 39, 112, 193, 92, 63, 136, 14, 193, 218, 69, 58, 135, 9, 222, 67, 13, 22, 10, 115, 96, 21, 207, 54, 222, 245, 98, 24, 236, 194, 22, 179, 242, 40, 76, 222, 119, 140, 7, 127, 20, 174, 105, 139, 139, 62, 137, 80, 125, 112, 203, 208, 47, 100, 123, 80, 129, 125, 155, 185, 31, 52, 110, 139, 218, 82, 234, 45, 54, 129, 197, 104, 189, 51, 131, 21, 106, 61, 92, 204, 90, 235, 25, 100, 33, 35, 115, 58, 28, 219, 31, 245, 44, 179, 216, 75, 111, 123, 111, 254, 39, 47, 128, 246, 250, 5, 155, 239, 181, 244, 143, 228, 211, 68, 127, 116, 158, 42, 250, 8, 6, 7, 20, 125, 160, 131, 227, 110, 92, 18, 87, 8, 238, 158, 100, 128, 96, 13, 146, 183, 69, 118, 199, 135, 63, 34, 156, 248, 83, 194, 160, 48, 11, 189, 58, 118, 233, 197, 48, 40, 249, 77, 152, 149, 75, 152, 167, 167, 187, 113, 176, 151, 112, 77, 183, 34, 33, 31, 220, 62, 244, 131, 196, 46, 100, 123, 223, 93, 115, 63, 104, 37, 181, 221, 162, 245, 108, 2, 122, 76, 152, 26, 244, 64, 49, 95, 173, 231, 142, 49, 140, 94, 206, 193, 174, 70, 22, 152, 113, 142, 215, 25, 255, 116, 247, 227, 229, 239, 251, 67, 255, 214, 242, 123, 126, 54, 252, 199, 163, 191, 5, 223, 61, 242, 57, 6, 31, 49, 250, 121, 120, 218, 232, 163, 25, 28, 92, 235, 179, 230, 26, 90, 95, 222, 224, 106, 65, 44, 6, 185, 1, 177, 27, 228, 114, 23, 249, 94, 222, 242, 74, 24, 52, 240, 140, 119, 122, 55, 52, 230, 233, 12, 134, 239, 187, 196, 35, 159, 193, 193, 222, 141, 139, 254, 193, 74, 194, 131, 134, 126, 16, 218, 139, 30, 52, 247, 131, 98, 110, 209, 107, 138, 15, 70, 131, 73, 105, 189, 66, 131, 141, 106, 61, 107, 140, 94, 235, 145, 100, 63, 163, 199, 150, 29, 142, 30, 109, 246, 124, 201, 236, 191, 252, 189, 127, 240, 223, 92, 242, 75, 131, 223, 189, 244, 55, 229, 231, 69, 127, 56, 62, 247, 171, 122, 200, 193, 17, 68, 31, 217, 224, 64, 91, 223, 1, 55, 4, 174, 150, 139, 7, 161, 25, 164, 106, 139, 92, 14, 178, 123, 9, 53, 24, 231, 255, 160, 48, 104, 96, 208, 216, 147, 178, 8, 31, 48, 22, 31, 49, 43, 15, 196, 240, 125, 151, 120, 228, 7, 226, 154, 94, 253, 120, 155, 92, 244, 121, 228, 42, 200, 225, 69, 123, 91, 63, 104, 193, 37, 116, 106, 208, 187, 45, 154, 75, 181, 183, 122, 22, 24, 13, 244, 218, 12, 182, 168, 245, 124, 49, 110, 173, 199, 208, 169, 252, 81, 239, 42, 147, 27, 189, 207, 76, 119, 244, 200, 175, 217, 127, 125, 1, 68, 255, 38, 190, 62, 250, 135, 241, 57, 162, 63, 52, 207, 19, 253, 240, 131, 163, 137, 62, 202, 193, 65, 55, 174, 135, 203, 67, 223, 250, 32, 19, 32, 82, 131, 204, 237, 34, 184, 131, 112, 95, 66, 85, 150, 155, 222, 10, 131, 186, 54, 26, 126, 147, 12, 202, 15, 152, 155, 194, 66, 61, 221, 135, 83, 253, 68, 93, 4, 215, 116, 43, 18, 210, 200, 213, 145, 183, 109, 253, 160, 47, 131, 78, 237, 162, 155, 148, 119, 139, 238, 179, 12, 232, 73, 97, 112, 208, 51, 197, 136, 181, 30, 61, 38, 177, 245, 132, 178, 174, 209, 83, 204, 74, 71, 246, 156, 169, 31, 47, 191, 251, 151, 255, 141, 193, 175, 46, 249, 178, 241, 182, 191, 32, 250, 50, 47, 131, 209, 55, 199, 165, 110, 145, 9, 18, 179, 69, 230, 6, 161, 220, 69, 184, 7, 5, 56, 64, 169, 226, 214, 23, 195, 160, 225, 141, 93, 120, 139, 158, 167, 15, 24, 175, 61, 108, 223, 119, 134, 135, 221, 199, 161, 189, 121, 217, 131, 139, 6, 9, 185, 226, 99, 228, 200, 225, 66, 104, 15, 80, 132, 133, 190, 236, 162, 119, 131, 110, 110, 209, 110, 186, 143, 222, 141, 193, 170, 52, 230, 136, 177, 106, 61, 110, 76, 95, 235, 169, 100, 72, 163, 87, 151, 65, 142, 94, 111, 134, 61, 102, 249, 95, 254, 158, 63, 240, 215, 127, 247, 47, 143, 15, 175, 129, 75, 111, 130, 209, 223, 142, 159, 20, 253, 177, 248, 196, 209, 143, 199, 147, 183, 62, 172, 193, 81, 182, 62, 125, 238, 6, 92, 42, 87, 14, 226, 50, 200, 211, 22, 137, 28, 164, 246, 18, 10, 176, 80, 149, 99, 52, 48, 238, 120, 49, 12, 118, 97, 23, 203, 242, 64, 108, 223, 14, 230, 242, 107, 195, 167, 253, 20, 15, 251, 88, 220, 209, 22, 23, 125, 221, 202, 207, 133, 161, 31, 228, 240, 24, 9, 95, 232, 194, 46, 106, 53, 168, 222, 46, 250, 75, 193, 193, 56, 48, 29, 232, 205, 25, 44, 82, 235, 17, 99, 226, 90, 175, 34, 131, 217, 122, 96, 217, 222, 232, 161, 102, 195, 151, 76, 253, 71, 127, 253, 195, 11, 160, 229, 159, 241, 101, 209, 63, 224, 204, 31, 11, 6, 143, 17, 253, 216, 156, 72, 235, 67, 28, 28, 113, 227, 98, 184, 54, 112, 229, 4, 98, 139, 60, 145, 182, 93, 164, 118, 144, 236, 3, 244, 100, 161, 81, 87, 81, 215, 118, 223, 187, 33, 88, 150, 75, 88, 168, 167, 59, 112, 164, 7, 184, 163, 179, 174, 173, 252, 32, 87, 87, 145, 219, 133, 132, 95, 66, 101, 6, 181, 218, 69, 61, 7, 253, 221, 98, 1, 216, 7, 244, 176, 48, 59, 232, 177, 98, 202, 90, 175, 31, 195, 216, 122, 72, 153, 217, 232, 77, 102, 174, 35, 195, 62, 122, 240, 125, 1, 68, 127, 1, 223, 43, 250, 7, 243, 153, 162, 31, 128, 103, 107, 125, 28, 156, 84, 235, 195, 29, 28, 61, 250, 206, 184, 206, 45, 210, 64, 86, 182, 72, 219, 32, 145, 187, 72, 246, 66, 1, 14, 208, 168, 133, 238, 157, 68, 195, 145, 81, 112, 44, 110, 196, 66, 157, 196, 2, 126, 55, 120, 204, 147, 56, 210, 123, 156, 152, 248, 65, 66, 206, 32, 138, 65, 110, 15, 208, 133, 65, 101, 46, 161, 125, 212, 115, 23, 29, 103, 1, 208, 235, 49, 216, 22, 244, 40, 49, 89, 173, 87, 110, 176, 129, 209, 155, 201, 156, 182, 158, 95, 150, 57, 178, 225, 204, 123, 188, 252, 221, 191, 255, 95, 15, 254, 217, 114, 235, 95, 16, 13, 62, 104, 244, 131, 241, 204, 173, 207, 136, 19, 68, 159, 59, 87, 2, 174, 147, 203, 222, 34, 43, 36, 105, 23, 137, 28, 68, 118, 23, 233, 95, 40, 201, 49, 186, 215, 168, 235, 121, 76, 195, 86, 54, 229, 3, 230, 230, 205, 88, 192, 239, 6, 143, 249, 0, 125, 11, 215, 246, 125, 112, 203, 231, 145, 171, 32, 138, 199, 8, 249, 66, 29, 46, 161, 89, 131, 246, 109, 81, 225, 65, 199, 193, 68, 48, 32, 232, 229, 25, 236, 82, 235, 53, 27, 108, 93, 244, 54, 14, 150, 51, 122, 102, 25, 225, 200, 92, 15, 198, 60, 178, 249, 47, 191, 235, 151, 254, 181, 37, 191, 52, 248, 221, 209, 223, 154, 159, 26, 253, 17, 249, 244, 173, 159, 150, 179, 104, 28, 31, 135, 219, 184, 18, 46, 12, 92, 54, 81, 216, 34, 73, 131, 180, 109, 145, 215, 133, 88, 95, 66, 73, 130, 70, 93, 69, 93, 27, 13, 191, 21, 203, 114, 128, 145, 250, 128, 21, 123, 106, 156, 213, 137, 89, 15, 238, 232, 86, 36, 164, 145, 171, 171, 200, 237, 66, 200, 15, 208, 154, 65, 185, 118, 209, 208, 65, 139, 193, 8, 12, 86, 2, 61, 47, 140, 15, 122, 178, 24, 180, 214, 27, 56, 88, 200, 232, 69, 101, 108, 91, 143, 51, 187, 189, 244, 194, 103, 246, 95, 95, 0, 173, 127, 43, 223, 37, 250, 231, 241, 81, 162, 63, 58, 79, 213, 250, 20, 56, 163, 214, 199, 58, 56, 116, 244, 109, 13, 238, 18, 228, 128, 160, 108, 145, 179, 65, 22, 47, 33, 214, 131, 232, 31, 160, 78, 65, 247, 78, 162, 225, 96, 26, 222, 130, 145, 58, 137, 17, 188, 136, 245, 252, 82, 248, 84, 123, 120, 192, 243, 56, 207, 183, 224, 150, 65, 66, 206, 32, 138, 65, 116, 15, 80, 135, 133, 214, 236, 162, 128, 131, 146, 110, 81, 243, 193, 14, 128, 13, 97, 97, 208, 211, 196, 112, 181, 222, 186, 193, 18, 70, 47, 231, 96, 87, 163, 71, 152, 125, 142, 30, 115, 118, 126, 188, 252, 93, 191, 248, 215, 198, 239, 250, 165, 225, 63, 27, 253, 197, 124, 223, 232, 15, 193, 231, 107, 253, 60, 60, 109, 235, 211, 225, 236, 208, 39, 206, 101, 128, 139, 228, 154, 183, 72, 9, 49, 218, 69, 22, 7, 121, 189, 132, 232, 47, 148, 228, 24, 221, 11, 186, 122, 19, 166, 97, 139, 101, 121, 56, 70, 240, 59, 192, 3, 62, 28, 23, 180, 139, 91, 62, 143, 104, 5, 81, 188, 138, 156, 47, 52, 98, 23, 229, 90, 232, 224, 22, 69, 30, 52, 29, 12, 5, 51, 130, 222, 159, 193, 58, 181, 222, 180, 193, 226, 69, 47, 228, 96, 63, 163, 247, 150, 41, 142, 222, 109, 38, 61, 214, 242, 255, 240, 2, 104, 252, 190, 232, 111, 202, 207, 139, 254, 112, 124, 238, 214, 207, 201, 41, 52, 14, 142, 99, 109, 92, 6, 87, 5, 174, 153, 16, 108, 145, 161, 65, 206, 118, 17, 214, 65, 166, 15, 208, 144, 133, 46, 93, 69, 87, 27, 245, 190, 3, 203, 114, 128, 157, 122, 186, 9, 135, 121, 128, 11, 186, 3, 33, 105, 68, 235, 42, 162, 27, 228, 252, 18, 138, 179, 208, 175, 93, 244, 148, 34, 111, 49, 5, 12, 197, 86, 143, 12, 19, 132, 30, 46, 102, 173, 245, 18, 14, 118, 50, 122, 87, 7, 171, 27, 61, 209, 172, 119, 176, 246, 59, 47, 128, 224, 43, 163, 127, 12, 159, 160, 245, 39, 230, 121, 90, 63, 63, 167, 211, 250, 64, 7, 199, 141, 190, 167, 193, 45, 130, 16, 16, 145, 93, 228, 108, 16, 196, 93, 4, 122, 33, 250, 7, 232, 82, 208, 189, 51, 168, 247, 22, 211, 240, 22, 236, 212, 77, 88, 195, 111, 23, 207, 117, 30, 135, 249, 70, 220, 50, 8, 201, 73, 164, 113, 33, 186, 199, 104, 196, 160, 56, 151, 208, 193, 65, 79, 183, 40, 251, 96, 13, 192, 146, 176, 51, 232, 129, 98, 190, 90, 47, 222, 96, 15, 91, 79, 40, 235, 26, 189, 198, 12, 117, 48, 236, 237, 232, 5, 208, 248, 142, 209, 63, 158, 79, 214, 250, 73, 120, 200, 214, 231, 194, 169, 161, 207, 154, 107, 0, 87, 200, 5, 111, 145, 143, 65, 134, 182, 72, 225, 32, 169, 7, 136, 254, 66, 67, 142, 209, 189, 160, 168, 55, 97, 26, 182, 88, 150, 119, 194, 26, 126, 187, 120, 174, 247, 192, 5, 237, 226, 150, 207, 35, 90, 141, 52, 30, 35, 231, 11, 141, 184, 132, 138, 13, 106, 184, 139, 46, 83, 246, 45, 230, 130, 49, 65, 175, 208, 96, 163, 90, 47, 219, 96, 247, 90, 79, 37, 43, 26, 189, 186, 131, 77, 14, 54, 124, 215, 217, 23, 64, 92, 250, 175, 5, 163, 63, 19, 159, 184, 245, 19, 242, 240, 141, 35, 227, 64, 27, 215, 192, 37, 129, 11, 230, 250, 183, 8, 208, 32, 97, 187, 72, 234, 66, 160, 47, 161, 30, 65, 151, 174, 162, 168, 141, 122, 223, 129, 101, 57, 198, 84, 61, 157, 199, 73, 30, 224, 130, 238, 64, 72, 26, 209, 58, 131, 244, 46, 68, 253, 0, 221, 25, 84, 108, 23, 85, 29, 212, 121, 139, 65, 96, 46, 182, 122, 106, 24, 34, 176, 96, 236, 91, 235, 73, 100, 45, 91, 15, 44, 219, 27, 204, 245, 85, 55, 191, 0, 26, 63, 59, 250, 131, 14, 30, 163, 245, 147, 115, 40, 141, 163, 228, 160, 209, 55, 52, 184, 63, 112, 253, 131, 124, 108, 145, 176, 65, 10, 119, 145, 230, 133, 208, 31, 163, 75, 65, 241, 206, 160, 222, 91, 76, 195, 27, 49, 85, 55, 97, 16, 191, 69, 60, 209, 77, 56, 201, 55, 226, 150, 65, 72, 78, 34, 141, 65, 122, 15, 80, 138, 133, 250, 92, 66, 19, 7, 109, 221, 162, 239, 12, 194, 22, 123, 194, 218, 160, 103, 138, 17, 107, 189, 123, 131, 85, 108, 61, 164, 204, 108, 48, 203, 55, 121, 211, 11, 160, 241, 153, 162, 31, 96, 240, 120, 173, 79, 132, 243, 66, 159, 50, 23, 0, 46, 111, 112, 187, 32, 28, 131, 244, 236, 34, 130, 131, 152, 94, 66, 232, 23, 234, 113, 21, 197, 11, 138, 122, 19, 166, 97, 23, 227, 242, 78, 24, 196, 111, 17, 79, 244, 78, 184, 157, 93, 220, 242, 121, 68, 171, 145, 198, 99, 68, 125, 161, 20, 7, 104, 217, 160, 137, 187, 104, 52, 149, 223, 98, 49, 152, 20, 244, 22, 13, 150, 170, 245, 190, 13, 214, 175, 245, 96, 50, 167, 141, 5, 190, 207, 195, 94, 0, 141, 15, 26, 253, 96, 131, 199, 110, 125, 82, 156, 35, 184, 0, 174, 7, 92, 237, 224, 238, 183, 72, 15, 217, 186, 132, 152, 14, 162, 124, 128, 122, 44, 20, 233, 12, 138, 218, 168, 247, 125, 24, 151, 3, 76, 213, 211, 73, 28, 227, 49, 110, 231, 14, 132, 164, 17, 173, 51, 8, 112, 144, 246, 75, 168, 207, 66, 203, 118, 81, 216, 65, 163, 183, 216, 4, 70, 3, 12, 14, 115, 132, 222, 177, 193, 202, 181, 30, 70, 102, 179, 177, 180, 111, 247, 46, 47, 128, 198, 3, 68, 63, 240, 224, 56, 26, 135, 200, 17, 131, 235, 225, 242, 192, 197, 15, 146, 177, 69, 182, 6, 249, 187, 132, 40, 47, 132, 254, 0, 45, 10, 90, 119, 18, 245, 222, 98, 26, 222, 136, 169, 186, 21, 179, 248, 13, 225, 65, 110, 197, 49, 190, 29, 183, 12, 66, 114, 18, 129, 12, 2, 124, 140, 94, 44, 52, 104, 23, 101, 28, 20, 118, 23, 173, 103, 22, 182, 88, 21, 54, 7, 61, 86, 76, 25, 122, 0, 153, 199, 198, 162, 62, 214, 187, 191, 0, 26, 15, 214, 250, 44, 56, 38, 244, 249, 114, 244, 224, 218, 6, 247, 186, 69, 50, 200, 205, 46, 242, 55, 200, 232, 1, 18, 191, 208, 141, 99, 180, 174, 81, 212, 155, 48, 13, 187, 24, 151, 247, 195, 44, 126, 67, 120, 144, 247, 195, 213, 92, 194, 45, 223, 132, 116, 5, 129, 188, 138, 180, 47, 244, 226, 18, 138, 54, 40, 227, 46, 74, 61, 104, 253, 22, 187, 193, 176, 160, 23, 105, 176, 87, 173, 87, 110, 176, 129, 141, 229, 124, 63, 159, 245, 5, 208, 120, 224, 214, 103, 196, 9, 130, 163, 231, 98, 192, 165, 14, 110, 125, 139, 220, 12, 178, 181, 139, 140, 46, 68, 249, 0, 221, 88, 104, 209, 25, 20, 181, 209, 237, 251, 48, 46, 199, 24, 172, 167, 171, 56, 192, 99, 92, 205, 125, 8, 9, 72, 215, 85, 4, 56, 72, 251, 1, 26, 52, 40, 218, 37, 116, 118, 208, 235, 45, 150, 129, 233, 0, 179, 195, 40, 161, 215, 108, 176, 117, 141, 133, 252, 60, 190, 216, 11, 160, 113, 16, 141, 227, 227, 112, 193, 197, 112, 109, 91, 220, 58, 153, 216, 69, 176, 6, 225, 219, 69, 142, 23, 226, 126, 140, 22, 5, 173, 59, 137, 110, 111, 49, 13, 111, 199, 96, 221, 129, 125, 252, 250, 241, 249, 111, 197, 1, 190, 29, 87, 188, 69, 72, 78, 34, 144, 65, 128, 143, 81, 141, 133, 18, 93, 66, 31, 7, 157, 221, 162, 248, 131, 101, 216, 98, 91, 88, 30, 244, 100, 49, 104, 96, 9, 63, 191, 175, 226, 5, 208, 56, 32, 244, 201, 114, 232, 91, 220, 25, 55, 186, 69, 38, 8, 205, 46, 146, 183, 16, 208, 75, 136, 251, 66, 49, 174, 162, 117, 141, 162, 222, 132, 105, 216, 197, 190, 188, 55, 246, 241, 235, 199, 231, 127, 87, 92, 205, 46, 174, 248, 86, 164, 43, 8, 228, 85, 4, 126, 161, 26, 7, 232, 218, 160, 146, 187, 168, 246, 160, 251, 91, 172, 7, 219, 130, 222, 165, 193, 106, 53, 230, 238, 139, 251, 234, 94, 0, 141, 179, 3, 135, 206, 149, 108, 113, 163, 220, 247, 22, 137, 25, 164, 234, 18, 2, 58, 8, 241, 1, 138, 17, 180, 232, 12, 138, 218, 232, 246, 125, 216, 151, 171, 216, 172, 167, 99, 156, 222, 49, 174, 230, 62, 132, 4, 164, 235, 12, 50, 188, 16, 248, 3, 148, 104, 161, 107, 187, 168, 237, 160, 218, 187, 216, 7, 214, 3, 140, 15, 211, 4, 102, 237, 171, 242, 85, 191, 0, 192, 177, 130, 43, 225, 194, 182, 184, 111, 210, 176, 139, 84, 13, 146, 119, 9, 33, 94, 136, 251, 49, 90, 20, 84, 238, 36, 186, 189, 197, 52, 60, 4, 155, 117, 7, 38, 242, 171, 197, 199, 190, 15, 167, 247, 118, 92, 241, 22, 33, 57, 143, 76, 6, 25, 62, 70, 59, 22, 122, 180, 139, 74, 46, 52, 119, 139, 250, 15, 246, 1, 204, 203, 96, 127, 192, 118, 125, 181, 190, 165, 23, 0, 56, 113, 112, 91, 92, 231, 22, 105, 24, 36, 102, 23, 177, 27, 164, 243, 0, 89, 95, 104, 197, 85, 84, 174, 209, 210, 155, 48, 13, 151, 48, 49, 239, 141, 137, 252, 106, 241, 177, 63, 3, 238, 101, 23, 87, 124, 43, 210, 213, 200, 228, 85, 100, 126, 161, 29, 151, 80, 183, 133, 86, 238, 162, 221, 212, 127, 139, 1, 25, 44, 12, 88, 167, 111, 197, 55, 252, 2, 104, 92, 198, 22, 119, 201, 101, 239, 34, 49, 228, 233, 18, 162, 185, 16, 226, 3, 180, 34, 168, 208, 25, 180, 180, 209, 237, 187, 49, 49, 199, 216, 172, 167, 3, 28, 221, 85, 220, 203, 125, 8, 9, 72, 215, 25, 100, 56, 200, 252, 1, 122, 180, 208, 184, 93, 148, 119, 208, 238, 45, 38, 98, 176, 33, 96, 130, 190, 81, 223, 201, 11, 0, 92, 213, 22, 55, 61, 72, 195, 22, 121, 26, 100, 238, 18, 226, 187, 16, 244, 171, 168, 80, 80, 185, 147, 232, 246, 22, 211, 240, 16, 108, 214, 221, 216, 202, 175, 10, 31, 245, 110, 28, 221, 67, 112, 197, 91, 132, 228, 60, 50, 25, 100, 248, 24, 5, 89, 168, 210, 37, 20, 115, 80, 222, 93, 44, 192, 96, 37, 192, 200, 124, 31, 190, 207, 23, 0, 184, 200, 45, 114, 48, 200, 202, 46, 50, 183, 16, 205, 75, 8, 122, 208, 138, 171, 168, 92, 163, 165, 55, 97, 26, 46, 97, 98, 62, 15, 182, 242, 171, 194, 71, 253, 60, 184, 148, 75, 184, 226, 91, 145, 174, 70, 38, 175, 34, 243, 11, 5, 57, 64, 227, 6, 197, 220, 69, 193, 7, 35, 176, 197, 140, 124, 151, 126, 18, 47, 0, 112, 205, 187, 200, 202, 32, 79, 187, 200, 229, 66, 124, 143, 209, 138, 133, 254, 156, 68, 75, 27, 221, 190, 27, 19, 115, 21, 203, 245, 180, 139, 67, 187, 138, 75, 185, 27, 33, 1, 233, 58, 131, 24, 7, 153, 63, 64, 149, 22, 74, 119, 9, 253, 29, 116, 124, 139, 161, 248, 41, 248, 41, 190, 0, 182, 200, 193, 46, 194, 52, 8, 220, 37, 196, 119, 33, 232, 199, 232, 79, 163, 114, 39, 209, 237, 93, 64, 124, 206, 18, 0, 0, 2, 149, 73, 68, 65, 84, 172, 195, 67, 176, 92, 111, 193, 104, 126, 13, 248, 132, 119, 227, 208, 30, 133, 251, 221, 34, 36, 231, 145, 201, 32, 198, 199, 40, 72, 208, 166, 75, 232, 230, 160, 191, 187, 216, 129, 159, 160, 231, 11, 96, 7, 41, 185, 132, 192, 13, 66, 121, 128, 148, 47, 84, 226, 12, 42, 215, 104, 233, 173, 88, 135, 75, 88, 153, 207, 134, 209, 252, 26, 240, 9, 63, 27, 110, 228, 18, 238, 247, 86, 164, 171, 145, 201, 171, 136, 125, 208, 145, 75, 40, 221, 66, 55, 119, 81, 243, 167, 241, 124, 1, 156, 66, 146, 46, 33, 148, 11, 241, 61, 64, 31, 130, 254, 156, 68, 75, 65, 189, 239, 198, 202, 92, 197, 120, 61, 109, 113, 98, 87, 113, 35, 119, 35, 33, 32, 93, 103, 16, 227, 32, 246, 199, 104, 211, 66, 239, 118, 81, 225, 167, 93, 207, 23, 192, 157, 72, 219, 1, 178, 187, 144, 242, 99, 244, 39, 232, 219, 77, 168, 247, 22, 235, 240, 40, 140, 215, 27, 49, 157, 95, 10, 159, 234, 141, 56, 177, 71, 225, 126, 183, 72, 200, 121, 196, 178, 145, 228, 99, 116, 100, 161, 77, 151, 80, 207, 167, 147, 158, 47, 128, 71, 34, 148, 151, 16, 241, 160, 15, 87, 81, 54, 208, 210, 91, 177, 14, 151, 176, 50, 159, 25, 211, 249, 165, 240, 169, 62, 39, 174, 227, 0, 247, 123, 43, 210, 213, 136, 229, 25, 36, 127, 161, 38, 7, 232, 221, 211, 221, 158, 47, 128, 247, 69, 112, 143, 209, 135, 160, 60, 103, 80, 209, 45, 234, 125, 55, 86, 230, 12, 38, 236, 169, 113, 86, 87, 113, 29, 111, 65, 66, 64, 192, 78, 34, 201, 65, 242, 15, 80, 168, 167, 199, 122, 190, 0, 190, 0, 34, 126, 21, 229, 9, 202, 118, 19, 234, 189, 197, 58, 60, 16, 19, 246, 118, 108, 232, 103, 195, 199, 120, 8, 206, 234, 81, 184, 220, 93, 36, 228, 60, 98, 217, 72, 242, 49, 106, 242, 244, 25, 60, 95, 0, 95, 17, 250, 112, 21, 101, 107, 84, 244, 14, 172, 195, 37, 12, 205, 23, 193, 134, 126, 54, 124, 140, 47, 130, 235, 184, 132, 203, 189, 3, 1, 107, 196, 242, 12, 146, 255, 244, 165, 60, 95, 0, 223, 0, 202, 115, 6, 21, 221, 162, 222, 119, 99, 104, 78, 98, 197, 158, 22, 78, 233, 12, 174, 227, 45, 72, 8, 8, 216, 73, 36, 249, 233, 107, 243, 124, 1, 124, 195, 40, 219, 77, 168, 247, 22, 235, 240, 88, 172, 216, 163, 176, 167, 239, 132, 31, 250, 64, 156, 210, 3, 113, 185, 187, 72, 200, 121, 196, 242, 233, 27, 242, 124, 1, 124, 159, 168, 232, 29, 88, 135, 3, 108, 205, 23, 196, 158, 190, 19, 126, 232, 151, 197, 93, 92, 194, 229, 222, 129, 128, 61, 125, 31, 158, 47, 128, 159, 40, 234, 253, 22, 108, 205, 73, 12, 217, 19, 231, 115, 18, 119, 241, 22, 36, 228, 233, 167, 224, 249, 2, 120, 218, 199, 58, 60, 28, 67, 246, 88, 108, 235, 67, 240, 35, 30, 142, 243, 121, 44, 46, 247, 233, 105, 121, 190, 0, 158, 222, 138, 173, 249, 26, 176, 173, 15, 193, 143, 248, 26, 112, 17, 79, 79, 183, 122, 190, 0, 158, 190, 12, 182, 236, 39, 142, 195, 121, 122, 250, 60, 158, 47, 128, 167, 239, 25, 59, 123, 7, 190, 225, 211, 211, 247, 228, 249, 2, 120, 122, 122, 122, 250, 137, 122, 190, 0, 158, 158, 158, 158, 126, 162, 158, 47, 128, 167, 167, 167, 167, 159, 168, 231, 11, 224, 233, 233, 233, 233, 39, 234, 249, 2, 120, 122, 122, 122, 250, 137, 122, 190, 0, 158, 158, 158, 158, 126, 146, 126, 241, 175, 253, 255, 6, 10, 84, 86, 49, 249, 57, 124, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/textures', 'air_hockey_surface.png', fileData4, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Add a wasm function to the table.
// Attempting to call this with JS function will cause of table.set() to fail
function addWasmFunction(func) {
  var table = wasmTable;
  var ret = table.length;
  table.grow(1);
  table.set(ret, func);
  return ret;
}

// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 1024,
    STACK_BASE = 27600,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5270480,
    DYNAMIC_BASE = 5270480,
    DYNAMICTOP_PTR = 27344;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
    wasmMemory = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = wasmMemory.buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'airhockey.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (Module['wasmBinary']) {
      return new Uint8Array(Module['wasmBinary']);
    }
    if (Module['readBinary']) {
      return Module['readBinary'](wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm(env) {
  // prepare imports
  var info = {
    'env': env
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  addRunDependency('wasm-instantiate');

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }
  function instantiateArrayBuffer(receiver) {
    getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }
  // Prefer streaming instantiation if available.
  if (!Module['wasmBinary'] &&
      typeof WebAssembly.instantiateStreaming === 'function' &&
      !isDataURI(wasmBinaryFile) &&
      typeof fetch === 'function') {
    WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
      .then(receiveInstantiatedSource, function(reason) {
        // We expect the most common failure cause to be a bad MIME type for the binary,
        // in which case falling back to ArrayBuffer instantiation should work.
        err('wasm streaming compile failed: ' + reason);
        err('falling back to ArrayBuffer instantiation');
        instantiateArrayBuffer(receiveInstantiatedSource);
      });
  } else {
    instantiateArrayBuffer(receiveInstantiatedSource);
  }
  return {}; // no exports yet; we'll fill them in later
}

// Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
// the wasm module at that time, and it receives imports and provides exports and so forth, the app
// doesn't need to care that it is wasm or asm.js.

Module['asm'] = function(global, env, providedBuffer) {
  // memory was already allocated (so js could use the buffer)
  env['memory'] = wasmMemory
  ;
  // import table
  env['table'] = wasmTable = new WebAssembly.Table({
    'initial': 312,
    'maximum': 312,
    'element': 'anyfunc'
  });
  env['__memory_base'] = 1024; // tell the memory segments where to place themselves
  env['__table_base'] = 0; // table starts at 0 by default (even in dynamic linking, for the main module)

  var exports = createWasm(env);
  assert(exports, 'binaryen setup failed (no wasm support?)');
  return exports;
};

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 26576;
/* global initializers */ /*__ATINIT__.push();*/








/* no memory initializer */
var tempDoublePtr = 27584
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___lock() {}

  
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var _stdin=27360;
  
  var _stdout=27376;
  
  var _stderr=27392;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
              var crypto_module = require('crypto');
              // nodejs has crypto support
              random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
              // nodejs doesn't have crypto support so fallback to Math.random
              random_device = function() { return (Math.random()*256)|0; };
          }
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see emscripten-core/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

  function _emscripten_get_heap_size() {
      return TOTAL_MEMORY;
    }

  
  
   
  
   
  
   function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        return ctx && GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          var ls = name.lastIndexOf('[');
          if (ls > 0) {
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
          //#define GLFW_KEY_SPECIAL      256
          case 0x1B:return (256+1); // DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x70:return (256+2); // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return (256+3); // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return (256+4); // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return (256+5); // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return (256+6); // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return (256+7); // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return (256+8); // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return (256+9); // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return (256+10); // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return (256+11); // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return (256+12); // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return (256+13); // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return (256+14); // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return (256+15); // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return (256+16); // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return (256+17); // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return (256+18); // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return (256+19); // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return (256+20); // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return (256+21); // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return (256+22); // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return (256+23); // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return (256+24); // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return (256+25); // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return (256+26); // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x27:return (256+30); // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return (256+29); // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return (256+28); // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return (256+27); // DOM_VK_UP -> GLFW_KEY_UP
          case 0x10:return (256+31); // DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          // #define GLFW_KEY_RSHIFT       (GLFW_KEY_SPECIAL+32)
          case 0x11:return (256+33); // DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          // #define GLFW_KEY_RCTRL        (GLFW_KEY_SPECIAL+34)
          case 0x12:return (256+35); // DOM_VK_ALT -> GLFW_KEY_LALT
          // #define GLFW_KEY_RALT         (GLFW_KEY_SPECIAL+36)
          case 0x09:return (256+37); // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x0D:return (256+38); // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x08:return (256+39); // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return (256+40); // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return (256+41); // DOM_VK_DELETE -> GLFW_KEY_DEL
          case 0x21:return (256+42); // DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22:return (256+43); // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24:return (256+44); // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return (256+45); // DOM_VK_END -> GLFW_KEY_END
          case 0x60:return (256+46); // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return (256+47); // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return (256+48); // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return (256+49); // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return (256+50); // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return (256+51); // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return (256+52); // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return (256+53); // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return (256+54); // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return (256+55); // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6F:return (256+56); // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return (256+57); // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return (256+58); // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return (256+59); // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6E:return (256+60); // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          // #define GLFW_KEY_KP_EQUAL     (GLFW_KEY_SPECIAL+61)
          // #define GLFW_KEY_KP_ENTER     (GLFW_KEY_SPECIAL+62)
          case 0x90:return (256+63); // DOM_VK_NUM_LOCK -> GLFW_KEY_KP_NUM_LOCK
          case 0x14:return (256+64); // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return (256+65); // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x13:return (256+66); // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x5B:return (256+67); // DOM_VK_WIN -> GLFW_KEY_LSUPER
          // #define GLFW_KEY_RSUPER       (GLFW_KEY_SPECIAL+68)
          case 0x5D:return (256+69); // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        dynCall_vii(GLFW.active.charFunc, charCode, 1);
  
      },onKeyChanged:function (keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
        dynCall_vii(GLFW.active.keyFunc, key, status);
  
      },onGamepadConnected:function (event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function (event) {
        GLFW.refreshJoysticks();
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function (event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        dynCall_vii(GLFW.active.cursorPosFunc, Browser.mouseX, Browser.mouseY);
  
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
        dynCall_vii(GLFW.active.mouseButtonFunc, eventButton, status);
  
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        dynCall_vi(GLFW.active.scrollFunc, GLFW.wheelPos);
  
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
        dynCall_vii(GLFW.active.windowSizeFunc, GLFW.active.width, GLFW.active.height);
  
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        err('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        err('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function (cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function () {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              dynCall_viii(GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function (event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
        // As documented in GLFW2 API (http://www.glfw.org/GLFWReference27.pdf#page=22), when size
        // callback function is set, it will be called with the current window size before this
        // function returns.
        // GLFW3 on the over hand doesn't have this behavior (https://github.com/glfw/glfw/issues/62).
        if (!win.windowSizeFunc) return;
        dynCall_vii(win.windowSizeFunc, win.width, win.height);
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
        dynCall_vii(win.windowSizeFunc, width, height);
  
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetMouseButton(button) {
      return GLFW.getMouseButton(GLFW.active.id, button);
    }

  function _glfwGetMousePos(x, y) {
      GLFW.getMousePos(GLFW.active.id, x, y);
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      GLFW.hints[0x00021001] = redbits;     // GLFW_RED_BITS
      GLFW.hints[0x00021002] = greenbits;   // GLFW_GREEN_BITS
      GLFW.hints[0x00021003] = bluebits;    // GLFW_BLUE_BITS
      GLFW.hints[0x00021004] = alphabits;   // GLFW_ALPHA_BITS
      GLFW.hints[0x00021005] = depthbits;   // GLFW_DEPTH_BITS
      GLFW.hints[0x00021006] = stencilbits; // GLFW_STENCIL_BITS
      GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
      return 1; // GL_TRUE
    }

  function _glfwPollEvents() {}

  function _glfwSwapBuffers() {
      GLFW.swapBuffers(GLFW.active.id);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

   

  var _llvm_cos_f32=Math_cos;

  var _llvm_cos_f64=Math_cos;

  
  var _Math_max=undefined; 

  
  var _Math_min=undefined; 

  var _llvm_sin_f32=Math_sin;

  var _llvm_sin_f64=Math_sin;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
  var _Int8Array=undefined;
  
  var _Int32Array=undefined; 

   


   


FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var GLctx; GL.init();
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_max,Math_min,Int8Array,Int32Array


function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return dynCall_ii(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return dynCall_iii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_iiii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_iiiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    dynCall_viii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    dynCall_viiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

var asmGlobalArg = {}

var asmLibraryArg = { "abort": abort, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "___assert_fail": ___assert_fail, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__glGenObject": __glGenObject, "_abort": _abort, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBufferData": _glBufferData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glCompileShader": _glCompileShader, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glDrawArrays": _glDrawArrays, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGenerateMipmap": _glGenerateMipmap, "_glGetAttribLocation": _glGetAttribLocation, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform4fv": _glUniform4fv, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwGetMouseButton": _glfwGetMouseButton, "_glfwGetMousePos": _glfwGetMousePos, "_glfwInit": _glfwInit, "_glfwOpenWindow": _glfwOpenWindow, "_glfwPollEvents": _glfwPollEvents, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwTerminate": _glfwTerminate, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cos_f64": _llvm_cos_f64, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_sin_f64": _llvm_sin_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_longjmp": _longjmp, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "tempDoublePtr": tempDoublePtr, "DYNAMICTOP_PTR": DYNAMICTOP_PTR }
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_maxnum_f64 = asm["_llvm_maxnum_f64"]; asm["_llvm_maxnum_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_maxnum_f64.apply(null, arguments);
};

var real__llvm_minnum_f64 = asm["_llvm_minnum_f64"]; asm["_llvm_minnum_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_minnum_f64.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__saveSetjmp.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__setThrew = asm["_setThrew"]; asm["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setThrew.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__testSetjmp.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
Module["asm"] = asm;
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments) };
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments) };
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _llvm_maxnum_f64 = Module["_llvm_maxnum_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_maxnum_f64"].apply(null, arguments) };
var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_minnum_f64"].apply(null, arguments) };
var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments) };
var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_realloc"].apply(null, arguments) };
var _saveSetjmp = Module["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_saveSetjmp"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_setThrew"].apply(null, arguments) };
var _testSetjmp = Module["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_testSetjmp"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });




/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



